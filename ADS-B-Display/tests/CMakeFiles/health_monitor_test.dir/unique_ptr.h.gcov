        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__memory/unique_ptr.h
        -:    0:Graph:HealthMonitor_Alert_test.cpp.gcno
        -:    0:Data:HealthMonitor_Alert_test.cpp.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___MEMORY_UNIQUE_PTR_H
        -:   11:#define _LIBCPP___MEMORY_UNIQUE_PTR_H
        -:   12:
        -:   13:#include <__compare/compare_three_way.h>
        -:   14:#include <__compare/compare_three_way_result.h>
        -:   15:#include <__compare/three_way_comparable.h>
        -:   16:#include <__config>
        -:   17:#include <__functional/hash.h>
        -:   18:#include <__functional/operations.h>
        -:   19:#include <__memory/allocator_traits.h> // __pointer
        -:   20:#include <__memory/auto_ptr.h>
        -:   21:#include <__memory/compressed_pair.h>
        -:   22:#include <__type_traits/add_lvalue_reference.h>
        -:   23:#include <__type_traits/common_type.h>
        -:   24:#include <__type_traits/conditional.h>
        -:   25:#include <__type_traits/dependent_type.h>
        -:   26:#include <__type_traits/enable_if.h>
        -:   27:#include <__type_traits/integral_constant.h>
        -:   28:#include <__type_traits/is_array.h>
        -:   29:#include <__type_traits/is_assignable.h>
        -:   30:#include <__type_traits/is_constructible.h>
        -:   31:#include <__type_traits/is_convertible.h>
        -:   32:#include <__type_traits/is_function.h>
        -:   33:#include <__type_traits/is_pointer.h>
        -:   34:#include <__type_traits/is_reference.h>
        -:   35:#include <__type_traits/is_same.h>
        -:   36:#include <__type_traits/is_swappable.h>
        -:   37:#include <__type_traits/is_trivially_relocatable.h>
        -:   38:#include <__type_traits/is_void.h>
        -:   39:#include <__type_traits/remove_extent.h>
        -:   40:#include <__type_traits/remove_pointer.h>
        -:   41:#include <__type_traits/type_identity.h>
        -:   42:#include <__utility/declval.h>
        -:   43:#include <__utility/forward.h>
        -:   44:#include <__utility/move.h>
        -:   45:#include <cstddef>
        -:   46:
        -:   47:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   48:#  pragma GCC system_header
        -:   49:#endif
        -:   50:
        -:   51:_LIBCPP_PUSH_MACROS
        -:   52:#include <__undef_macros>
        -:   53:
        -:   54:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   55:
        -:   56:#ifndef _LIBCPP_CXX03_LANG
        -:   57:
        -:   58:template <class _Ptr>
        -:   59:struct __is_noexcept_deref_or_void {
        -:   60:  static constexpr bool value = noexcept(*std::declval<_Ptr>());
        -:   61:};
        -:   62:
        -:   63:template <>
        -:   64:struct __is_noexcept_deref_or_void<void*> : true_type {};
        -:   65:#endif
        -:   66:
        -:   67:template <class _Tp>
        -:   68:struct _LIBCPP_TEMPLATE_VIS default_delete {
        -:   69:  static_assert(!is_function<_Tp>::value, "default_delete cannot be instantiated for function types");
        -:   70:#ifndef _LIBCPP_CXX03_LANG
        -:   71:  _LIBCPP_HIDE_FROM_ABI constexpr default_delete() _NOEXCEPT = default;
        -:   72:#else
        -:   73:  _LIBCPP_HIDE_FROM_ABI default_delete() {}
        -:   74:#endif
        -:   75:  template <class _Up, __enable_if_t<is_convertible<_Up*, _Tp*>::value, int> = 0>
        -:   76:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 default_delete(const default_delete<_Up>&) _NOEXCEPT {}
        -:   77:
      113:   78:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 void operator()(_Tp* __ptr) const _NOEXCEPT {
        -:   79:    static_assert(sizeof(_Tp) >= 0, "cannot delete an incomplete type");
        -:   80:    static_assert(!is_void<_Tp>::value, "cannot delete an incomplete type");
      113:   81:    delete __ptr;
      113:   82:  }
        -:   83:};
        -:   84:
        -:   85:template <class _Tp>
        -:   86:struct _LIBCPP_TEMPLATE_VIS default_delete<_Tp[]> {
        -:   87:private:
        -:   88:  template <class _Up>
        -:   89:  struct _EnableIfConvertible : enable_if<is_convertible<_Up (*)[], _Tp (*)[]>::value> {};
        -:   90:
        -:   91:public:
        -:   92:#ifndef _LIBCPP_CXX03_LANG
        -:   93:  _LIBCPP_HIDE_FROM_ABI constexpr default_delete() _NOEXCEPT = default;
        -:   94:#else
        -:   95:  _LIBCPP_HIDE_FROM_ABI default_delete() {}
        -:   96:#endif
        -:   97:
        -:   98:  template <class _Up>
        -:   99:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23
        -:  100:  default_delete(const default_delete<_Up[]>&, typename _EnableIfConvertible<_Up>::type* = 0) _NOEXCEPT {}
        -:  101:
        -:  102:  template <class _Up>
        -:  103:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 typename _EnableIfConvertible<_Up>::type
        -:  104:  operator()(_Up* __ptr) const _NOEXCEPT {
        -:  105:    static_assert(sizeof(_Up) >= 0, "cannot delete an incomplete type");
        -:  106:    delete[] __ptr;
        -:  107:  }
        -:  108:};
        -:  109:
        -:  110:template <class _Deleter>
        -:  111:struct __unique_ptr_deleter_sfinae {
        -:  112:  static_assert(!is_reference<_Deleter>::value, "incorrect specialization");
        -:  113:  typedef const _Deleter& __lval_ref_type;
        -:  114:  typedef _Deleter&& __good_rval_ref_type;
        -:  115:  typedef true_type __enable_rval_overload;
        -:  116:};
        -:  117:
        -:  118:template <class _Deleter>
        -:  119:struct __unique_ptr_deleter_sfinae<_Deleter const&> {
        -:  120:  typedef const _Deleter& __lval_ref_type;
        -:  121:  typedef const _Deleter&& __bad_rval_ref_type;
        -:  122:  typedef false_type __enable_rval_overload;
        -:  123:};
        -:  124:
        -:  125:template <class _Deleter>
        -:  126:struct __unique_ptr_deleter_sfinae<_Deleter&> {
        -:  127:  typedef _Deleter& __lval_ref_type;
        -:  128:  typedef _Deleter&& __bad_rval_ref_type;
        -:  129:  typedef false_type __enable_rval_overload;
        -:  130:};
        -:  131:
        -:  132:#if defined(_LIBCPP_ABI_ENABLE_UNIQUE_PTR_TRIVIAL_ABI)
        -:  133:#  define _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI __attribute__((__trivial_abi__))
        -:  134:#else
        -:  135:#  define _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI
        -:  136:#endif
        -:  137:
        -:  138:template <class _Tp, class _Dp = default_delete<_Tp> >
        -:  139:class _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS unique_ptr {
        -:  140:public:
        -:  141:  typedef _Tp element_type;
        -:  142:  typedef _Dp deleter_type;
        -:  143:  typedef _LIBCPP_NODEBUG typename __pointer<_Tp, deleter_type>::type pointer;
        -:  144:
        -:  145:  static_assert(!is_rvalue_reference<deleter_type>::value, "the specified deleter type cannot be an rvalue reference");
        -:  146:
        -:  147:  // A unique_ptr contains the following members which may be trivially relocatable:
        -:  148:  // - pointer : this may be trivially relocatable, so it's checked
        -:  149:  // - deleter_type: this may be trivially relocatable, so it's checked
        -:  150:  //
        -:  151:  // This unique_ptr implementation only contains a pointer to the unique object and a deleter, so there are no
        -:  152:  // references to itself. This means that the entire structure is trivially relocatable if its members are.
        -:  153:  using __trivially_relocatable = __conditional_t<
        -:  154:      __libcpp_is_trivially_relocatable<pointer>::value && __libcpp_is_trivially_relocatable<deleter_type>::value,
        -:  155:      unique_ptr,
        -:  156:      void>;
        -:  157:
        -:  158:private:
        -:  159:  __compressed_pair<pointer, deleter_type> __ptr_;
        -:  160:
        -:  161:  typedef _LIBCPP_NODEBUG __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -:  162:
        -:  163:  template <bool _Dummy>
        -:  164:  using _LValRefType _LIBCPP_NODEBUG = typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -:  165:
        -:  166:  template <bool _Dummy>
        -:  167:  using _GoodRValRefType _LIBCPP_NODEBUG = typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -:  168:
        -:  169:  template <bool _Dummy>
        -:  170:  using _BadRValRefType _LIBCPP_NODEBUG = typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -:  171:
        -:  172:  template <bool _Dummy, class _Deleter = typename __dependent_type< __type_identity<deleter_type>, _Dummy>::type>
        -:  173:  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG =
        -:  174:      __enable_if_t<is_default_constructible<_Deleter>::value && !is_pointer<_Deleter>::value>;
        -:  175:
        -:  176:  template <class _ArgType>
        -:  177:  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG = __enable_if_t<is_constructible<deleter_type, _ArgType>::value>;
        -:  178:
        -:  179:  template <class _UPtr, class _Up>
        -:  180:  using _EnableIfMoveConvertible _LIBCPP_NODEBUG =
        -:  181:      __enable_if_t< is_convertible<typename _UPtr::pointer, pointer>::value && !is_array<_Up>::value >;
        -:  182:
        -:  183:  template <class _UDel>
        -:  184:  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG =
        -:  185:      __enable_if_t< (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -:  186:                     (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value) >;
        -:  187:
        -:  188:  template <class _UDel>
        -:  189:  using _EnableIfDeleterAssignable = __enable_if_t< is_assignable<_Dp&, _UDel&&>::value >;
        -:  190:
        -:  191:public:
        -:  192:  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
       50:  193:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(__value_init_tag(), __value_init_tag()) {}
        -:  194:
        -:  195:  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -:  196:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT
        -:  197:      : __ptr_(__value_init_tag(), __value_init_tag()) {}
        -:  198:
        -:  199:  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -:  200:  _LIBCPP_HIDE_FROM_ABI
        -:  201:  _LIBCPP_CONSTEXPR_SINCE_CXX23 explicit unique_ptr(pointer __p) _NOEXCEPT : __ptr_(__p, __value_init_tag()) {}
        -:  202:
        -:  203:  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
        -:  204:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(pointer __p, _LValRefType<_Dummy> __d) _NOEXCEPT
        -:  205:      : __ptr_(__p, __d) {}
        -:  206:
        -:  207:  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
        -:  208:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(pointer __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -:  209:      : __ptr_(__p, std::move(__d)) {
        -:  210:    static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -:  211:  }
        -:  212:
        -:  213:  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> > >
        -:  214:  _LIBCPP_HIDE_FROM_ABI unique_ptr(pointer __p, _BadRValRefType<_Dummy> __d) = delete;
        -:  215:
        -:  216:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -:  217:      : __ptr_(__u.release(), std::forward<deleter_type>(__u.get_deleter())) {}
        -:  218:
        -:  219:  template <class _Up,
        -:  220:            class _Ep,
        -:  221:            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -:  222:            class = _EnableIfDeleterConvertible<_Ep> >
        -:  223:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -:  224:      : __ptr_(__u.release(), std::forward<_Ep>(__u.get_deleter())) {}
        -:  225:
        -:  226:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -:  227:  template <class _Up,
        -:  228:            __enable_if_t<is_convertible<_Up*, _Tp*>::value && is_same<_Dp, default_delete<_Tp> >::value, int> = 0>
        -:  229:  _LIBCPP_HIDE_FROM_ABI unique_ptr(auto_ptr<_Up>&& __p) _NOEXCEPT : __ptr_(__p.release(), __value_init_tag()) {}
        -:  230:#endif
        -:  231:
        -:  232:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {
        -:  233:    reset(__u.release());
        -:  234:    __ptr_.second() = std::forward<deleter_type>(__u.get_deleter());
        -:  235:    return *this;
        -:  236:  }
        -:  237:
        -:  238:  template <class _Up,
        -:  239:            class _Ep,
        -:  240:            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -:  241:            class = _EnableIfDeleterAssignable<_Ep> >
        -:  242:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {
        -:  243:    reset(__u.release());
        -:  244:    __ptr_.second() = std::forward<_Ep>(__u.get_deleter());
        -:  245:    return *this;
        -:  246:  }
        -:  247:
        -:  248:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -:  249:  template <class _Up,
        -:  250:            __enable_if_t<is_convertible<_Up*, _Tp*>::value && is_same<_Dp, default_delete<_Tp> >::value, int> = 0>
        -:  251:  _LIBCPP_HIDE_FROM_ABI unique_ptr& operator=(auto_ptr<_Up> __p) {
        -:  252:    reset(__p.release());
        -:  253:    return *this;
        -:  254:  }
        -:  255:#endif
        -:  256:
        -:  257:#ifdef _LIBCPP_CXX03_LANG
        -:  258:  unique_ptr(unique_ptr const&)            = delete;
        -:  259:  unique_ptr& operator=(unique_ptr const&) = delete;
        -:  260:#endif
        -:  261:
      276:  262:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 ~unique_ptr() { reset(); }
        -:  263:
        -:  264:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -:  265:    reset();
        -:  266:    return *this;
        -:  267:  }
        -:  268:
        -:  269:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 __add_lvalue_reference_t<_Tp> operator*() const
        -:  270:      _NOEXCEPT_(__is_noexcept_deref_or_void<pointer>::value) {
        -:  271:    return *__ptr_.first();
        -:  272:  }
    #####:  273:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 pointer operator->() const _NOEXCEPT { return __ptr_.first(); }
        -:  274:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 pointer get() const _NOEXCEPT { return __ptr_.first(); }
        -:  275:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 deleter_type& get_deleter() _NOEXCEPT { return __ptr_.second(); }
        -:  276:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 const deleter_type& get_deleter() const _NOEXCEPT {
        -:  277:    return __ptr_.second();
        -:  278:  }
    #####:  279:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 explicit operator bool() const _NOEXCEPT {
    #####:  280:    return __ptr_.first() != nullptr;
        -:  281:  }
        -:  282:
        -:  283:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 pointer release() _NOEXCEPT {
        -:  284:    pointer __t    = __ptr_.first();
        -:  285:    __ptr_.first() = pointer();
        -:  286:    return __t;
        -:  287:  }
        -:  288:
      138:  289:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 void reset(pointer __p = pointer()) _NOEXCEPT {
      138:  290:    pointer __tmp  = __ptr_.first();
      138:  291:    __ptr_.first() = __p;
      138:  292:    if (__tmp)
      113:  293:      __ptr_.second()(__tmp);
      138:  294:  }
        -:  295:
        -:  296:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 void swap(unique_ptr& __u) _NOEXCEPT { __ptr_.swap(__u.__ptr_); }
        -:  297:};
        -:  298:
        -:  299:template <class _Tp, class _Dp>
        -:  300:class _LIBCPP_UNIQUE_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS unique_ptr<_Tp[], _Dp> {
        -:  301:public:
        -:  302:  typedef _Tp element_type;
        -:  303:  typedef _Dp deleter_type;
        -:  304:  typedef typename __pointer<_Tp, deleter_type>::type pointer;
        -:  305:
        -:  306:  // A unique_ptr contains the following members which may be trivially relocatable:
        -:  307:  // - pointer : this may be trivially relocatable, so it's checked
        -:  308:  // - deleter_type: this may be trivially relocatable, so it's checked
        -:  309:  //
        -:  310:  // This unique_ptr implementation only contains a pointer to the unique object and a deleter, so there are no
        -:  311:  // references to itself. This means that the entire structure is trivially relocatable if its members are.
        -:  312:  using __trivially_relocatable = __conditional_t<
        -:  313:      __libcpp_is_trivially_relocatable<pointer>::value && __libcpp_is_trivially_relocatable<deleter_type>::value,
        -:  314:      unique_ptr,
        -:  315:      void>;
        -:  316:
        -:  317:private:
        -:  318:  __compressed_pair<pointer, deleter_type> __ptr_;
        -:  319:
        -:  320:  template <class _From>
        -:  321:  struct _CheckArrayPointerConversion : is_same<_From, pointer> {};
        -:  322:
        -:  323:  template <class _FromElem>
        -:  324:  struct _CheckArrayPointerConversion<_FromElem*>
        -:  325:      : integral_constant<bool,
        -:  326:                          is_same<_FromElem*, pointer>::value ||
        -:  327:                              (is_same<pointer, element_type*>::value &&
        -:  328:                               is_convertible<_FromElem (*)[], element_type (*)[]>::value) > {};
        -:  329:
        -:  330:  typedef __unique_ptr_deleter_sfinae<_Dp> _DeleterSFINAE;
        -:  331:
        -:  332:  template <bool _Dummy>
        -:  333:  using _LValRefType _LIBCPP_NODEBUG = typename __dependent_type<_DeleterSFINAE, _Dummy>::__lval_ref_type;
        -:  334:
        -:  335:  template <bool _Dummy>
        -:  336:  using _GoodRValRefType _LIBCPP_NODEBUG = typename __dependent_type<_DeleterSFINAE, _Dummy>::__good_rval_ref_type;
        -:  337:
        -:  338:  template <bool _Dummy>
        -:  339:  using _BadRValRefType _LIBCPP_NODEBUG = typename __dependent_type<_DeleterSFINAE, _Dummy>::__bad_rval_ref_type;
        -:  340:
        -:  341:  template <bool _Dummy, class _Deleter = typename __dependent_type< __type_identity<deleter_type>, _Dummy>::type>
        -:  342:  using _EnableIfDeleterDefaultConstructible _LIBCPP_NODEBUG =
        -:  343:      __enable_if_t<is_default_constructible<_Deleter>::value && !is_pointer<_Deleter>::value>;
        -:  344:
        -:  345:  template <class _ArgType>
        -:  346:  using _EnableIfDeleterConstructible _LIBCPP_NODEBUG = __enable_if_t<is_constructible<deleter_type, _ArgType>::value>;
        -:  347:
        -:  348:  template <class _Pp>
        -:  349:  using _EnableIfPointerConvertible _LIBCPP_NODEBUG = __enable_if_t< _CheckArrayPointerConversion<_Pp>::value >;
        -:  350:
        -:  351:  template <class _UPtr, class _Up, class _ElemT = typename _UPtr::element_type>
        -:  352:  using _EnableIfMoveConvertible _LIBCPP_NODEBUG =
        -:  353:      __enable_if_t< is_array<_Up>::value && is_same<pointer, element_type*>::value &&
        -:  354:                     is_same<typename _UPtr::pointer, _ElemT*>::value &&
        -:  355:                     is_convertible<_ElemT (*)[], element_type (*)[]>::value >;
        -:  356:
        -:  357:  template <class _UDel>
        -:  358:  using _EnableIfDeleterConvertible _LIBCPP_NODEBUG =
        -:  359:      __enable_if_t< (is_reference<_Dp>::value && is_same<_Dp, _UDel>::value) ||
        -:  360:                     (!is_reference<_Dp>::value && is_convertible<_UDel, _Dp>::value) >;
        -:  361:
        -:  362:  template <class _UDel>
        -:  363:  using _EnableIfDeleterAssignable _LIBCPP_NODEBUG = __enable_if_t< is_assignable<_Dp&, _UDel&&>::value >;
        -:  364:
        -:  365:public:
        -:  366:  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -:  367:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR unique_ptr() _NOEXCEPT : __ptr_(__value_init_tag(), __value_init_tag()) {}
        -:  368:
        -:  369:  template <bool _Dummy = true, class = _EnableIfDeleterDefaultConstructible<_Dummy> >
        -:  370:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR unique_ptr(nullptr_t) _NOEXCEPT
        -:  371:      : __ptr_(__value_init_tag(), __value_init_tag()) {}
        -:  372:
        -:  373:  template <class _Pp,
        -:  374:            bool _Dummy = true,
        -:  375:            class       = _EnableIfDeleterDefaultConstructible<_Dummy>,
        -:  376:            class       = _EnableIfPointerConvertible<_Pp> >
        -:  377:  _LIBCPP_HIDE_FROM_ABI
        -:  378:  _LIBCPP_CONSTEXPR_SINCE_CXX23 explicit unique_ptr(_Pp __p) _NOEXCEPT : __ptr_(__p, __value_init_tag()) {}
        -:  379:
        -:  380:  template <class _Pp,
        -:  381:            bool _Dummy = true,
        -:  382:            class       = _EnableIfDeleterConstructible<_LValRefType<_Dummy> >,
        -:  383:            class       = _EnableIfPointerConvertible<_Pp> >
        -:  384:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(_Pp __p, _LValRefType<_Dummy> __d) _NOEXCEPT
        -:  385:      : __ptr_(__p, __d) {}
        -:  386:
        -:  387:  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_LValRefType<_Dummy> > >
        -:  388:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(nullptr_t, _LValRefType<_Dummy> __d) _NOEXCEPT
        -:  389:      : __ptr_(nullptr, __d) {}
        -:  390:
        -:  391:  template <class _Pp,
        -:  392:            bool _Dummy = true,
        -:  393:            class       = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> >,
        -:  394:            class       = _EnableIfPointerConvertible<_Pp> >
        -:  395:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(_Pp __p, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -:  396:      : __ptr_(__p, std::move(__d)) {
        -:  397:    static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -:  398:  }
        -:  399:
        -:  400:  template <bool _Dummy = true, class = _EnableIfDeleterConstructible<_GoodRValRefType<_Dummy> > >
        -:  401:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(nullptr_t, _GoodRValRefType<_Dummy> __d) _NOEXCEPT
        -:  402:      : __ptr_(nullptr, std::move(__d)) {
        -:  403:    static_assert(!is_reference<deleter_type>::value, "rvalue deleter bound to reference");
        -:  404:  }
        -:  405:
        -:  406:  template <class _Pp,
        -:  407:            bool _Dummy = true,
        -:  408:            class       = _EnableIfDeleterConstructible<_BadRValRefType<_Dummy> >,
        -:  409:            class       = _EnableIfPointerConvertible<_Pp> >
        -:  410:  _LIBCPP_HIDE_FROM_ABI unique_ptr(_Pp __p, _BadRValRefType<_Dummy> __d) = delete;
        -:  411:
        -:  412:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(unique_ptr&& __u) _NOEXCEPT
        -:  413:      : __ptr_(__u.release(), std::forward<deleter_type>(__u.get_deleter())) {}
        -:  414:
        -:  415:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr& operator=(unique_ptr&& __u) _NOEXCEPT {
        -:  416:    reset(__u.release());
        -:  417:    __ptr_.second() = std::forward<deleter_type>(__u.get_deleter());
        -:  418:    return *this;
        -:  419:  }
        -:  420:
        -:  421:  template <class _Up,
        -:  422:            class _Ep,
        -:  423:            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -:  424:            class = _EnableIfDeleterConvertible<_Ep> >
        -:  425:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT
        -:  426:      : __ptr_(__u.release(), std::forward<_Ep>(__u.get_deleter())) {}
        -:  427:
        -:  428:  template <class _Up,
        -:  429:            class _Ep,
        -:  430:            class = _EnableIfMoveConvertible<unique_ptr<_Up, _Ep>, _Up>,
        -:  431:            class = _EnableIfDeleterAssignable<_Ep> >
        -:  432:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr& operator=(unique_ptr<_Up, _Ep>&& __u) _NOEXCEPT {
        -:  433:    reset(__u.release());
        -:  434:    __ptr_.second() = std::forward<_Ep>(__u.get_deleter());
        -:  435:    return *this;
        -:  436:  }
        -:  437:
        -:  438:#ifdef _LIBCPP_CXX03_LANG
        -:  439:  unique_ptr(unique_ptr const&)            = delete;
        -:  440:  unique_ptr& operator=(unique_ptr const&) = delete;
        -:  441:#endif
        -:  442:
        -:  443:public:
        -:  444:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 ~unique_ptr() { reset(); }
        -:  445:
        -:  446:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 unique_ptr& operator=(nullptr_t) _NOEXCEPT {
        -:  447:    reset();
        -:  448:    return *this;
        -:  449:  }
        -:  450:
        -:  451:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 __add_lvalue_reference_t<_Tp> operator[](size_t __i) const {
        -:  452:    return __ptr_.first()[__i];
        -:  453:  }
        -:  454:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 pointer get() const _NOEXCEPT { return __ptr_.first(); }
        -:  455:
        -:  456:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 deleter_type& get_deleter() _NOEXCEPT { return __ptr_.second(); }
        -:  457:
        -:  458:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 const deleter_type& get_deleter() const _NOEXCEPT {
        -:  459:    return __ptr_.second();
        -:  460:  }
        -:  461:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 explicit operator bool() const _NOEXCEPT {
        -:  462:    return __ptr_.first() != nullptr;
        -:  463:  }
        -:  464:
        -:  465:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 pointer release() _NOEXCEPT {
        -:  466:    pointer __t    = __ptr_.first();
        -:  467:    __ptr_.first() = pointer();
        -:  468:    return __t;
        -:  469:  }
        -:  470:
        -:  471:  template <class _Pp, __enable_if_t<_CheckArrayPointerConversion<_Pp>::value, int> = 0>
        -:  472:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 void reset(_Pp __p) _NOEXCEPT {
        -:  473:    pointer __tmp  = __ptr_.first();
        -:  474:    __ptr_.first() = __p;
        -:  475:    if (__tmp)
        -:  476:      __ptr_.second()(__tmp);
        -:  477:  }
        -:  478:
        -:  479:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 void reset(nullptr_t = nullptr) _NOEXCEPT {
        -:  480:    pointer __tmp  = __ptr_.first();
        -:  481:    __ptr_.first() = nullptr;
        -:  482:    if (__tmp)
        -:  483:      __ptr_.second()(__tmp);
        -:  484:  }
        -:  485:
        -:  486:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 void swap(unique_ptr& __u) _NOEXCEPT { __ptr_.swap(__u.__ptr_); }
        -:  487:};
        -:  488:
        -:  489:template <class _Tp, class _Dp, __enable_if_t<__is_swappable_v<_Dp>, int> = 0>
        -:  490:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 void
        -:  491:swap(unique_ptr<_Tp, _Dp>& __x, unique_ptr<_Tp, _Dp>& __y) _NOEXCEPT {
        -:  492:  __x.swap(__y);
        -:  493:}
        -:  494:
        -:  495:template <class _T1, class _D1, class _T2, class _D2>
        -:  496:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool
        -:  497:operator==(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
        -:  498:  return __x.get() == __y.get();
        -:  499:}
        -:  500:
        -:  501:#if _LIBCPP_STD_VER <= 17
        -:  502:template <class _T1, class _D1, class _T2, class _D2>
        -:  503:inline _LIBCPP_HIDE_FROM_ABI bool operator!=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
        -:  504:  return !(__x == __y);
        -:  505:}
        -:  506:#endif
        -:  507:
        -:  508:template <class _T1, class _D1, class _T2, class _D2>
        -:  509:inline _LIBCPP_HIDE_FROM_ABI bool operator<(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
        -:  510:  typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -:  511:  typedef typename unique_ptr<_T2, _D2>::pointer _P2;
        -:  512:  typedef typename common_type<_P1, _P2>::type _Vp;
        -:  513:  return less<_Vp>()(__x.get(), __y.get());
        -:  514:}
        -:  515:
        -:  516:template <class _T1, class _D1, class _T2, class _D2>
        -:  517:inline _LIBCPP_HIDE_FROM_ABI bool operator>(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
        -:  518:  return __y < __x;
        -:  519:}
        -:  520:
        -:  521:template <class _T1, class _D1, class _T2, class _D2>
        -:  522:inline _LIBCPP_HIDE_FROM_ABI bool operator<=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
        -:  523:  return !(__y < __x);
        -:  524:}
        -:  525:
        -:  526:template <class _T1, class _D1, class _T2, class _D2>
        -:  527:inline _LIBCPP_HIDE_FROM_ABI bool operator>=(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
        -:  528:  return !(__x < __y);
        -:  529:}
        -:  530:
        -:  531:#if _LIBCPP_STD_VER >= 20
        -:  532:template <class _T1, class _D1, class _T2, class _D2>
        -:  533:  requires three_way_comparable_with<typename unique_ptr<_T1, _D1>::pointer, typename unique_ptr<_T2, _D2>::pointer>
        -:  534:_LIBCPP_HIDE_FROM_ABI
        -:  535:compare_three_way_result_t<typename unique_ptr<_T1, _D1>::pointer, typename unique_ptr<_T2, _D2>::pointer>
        -:  536:operator<=>(const unique_ptr<_T1, _D1>& __x, const unique_ptr<_T2, _D2>& __y) {
        -:  537:  return compare_three_way()(__x.get(), __y.get());
        -:  538:}
        -:  539:#endif
        -:  540:
        -:  541:template <class _T1, class _D1>
        -:  542:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool
        -:  543:operator==(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT {
        -:  544:  return !__x;
        -:  545:}
        -:  546:
        -:  547:#if _LIBCPP_STD_VER <= 17
        -:  548:template <class _T1, class _D1>
        -:  549:inline _LIBCPP_HIDE_FROM_ABI bool operator==(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT {
        -:  550:  return !__x;
        -:  551:}
        -:  552:
        -:  553:template <class _T1, class _D1>
    #####:  554:inline _LIBCPP_HIDE_FROM_ABI bool operator!=(const unique_ptr<_T1, _D1>& __x, nullptr_t) _NOEXCEPT {
    #####:  555:  return static_cast<bool>(__x);
        -:  556:}
        -:  557:
        -:  558:template <class _T1, class _D1>
        -:  559:inline _LIBCPP_HIDE_FROM_ABI bool operator!=(nullptr_t, const unique_ptr<_T1, _D1>& __x) _NOEXCEPT {
        -:  560:  return static_cast<bool>(__x);
        -:  561:}
        -:  562:#endif // _LIBCPP_STD_VER <= 17
        -:  563:
        -:  564:template <class _T1, class _D1>
        -:  565:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool operator<(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
        -:  566:  typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -:  567:  return less<_P1>()(__x.get(), nullptr);
        -:  568:}
        -:  569:
        -:  570:template <class _T1, class _D1>
        -:  571:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool operator<(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
        -:  572:  typedef typename unique_ptr<_T1, _D1>::pointer _P1;
        -:  573:  return less<_P1>()(nullptr, __x.get());
        -:  574:}
        -:  575:
        -:  576:template <class _T1, class _D1>
        -:  577:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool operator>(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
        -:  578:  return nullptr < __x;
        -:  579:}
        -:  580:
        -:  581:template <class _T1, class _D1>
        -:  582:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool operator>(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
        -:  583:  return __x < nullptr;
        -:  584:}
        -:  585:
        -:  586:template <class _T1, class _D1>
        -:  587:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool operator<=(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
        -:  588:  return !(nullptr < __x);
        -:  589:}
        -:  590:
        -:  591:template <class _T1, class _D1>
        -:  592:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool operator<=(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
        -:  593:  return !(__x < nullptr);
        -:  594:}
        -:  595:
        -:  596:template <class _T1, class _D1>
        -:  597:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool operator>=(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
        -:  598:  return !(__x < nullptr);
        -:  599:}
        -:  600:
        -:  601:template <class _T1, class _D1>
        -:  602:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 bool operator>=(nullptr_t, const unique_ptr<_T1, _D1>& __x) {
        -:  603:  return !(nullptr < __x);
        -:  604:}
        -:  605:
        -:  606:#if _LIBCPP_STD_VER >= 20
        -:  607:template <class _T1, class _D1>
        -:  608:  requires three_way_comparable< typename unique_ptr<_T1, _D1>::pointer>
        -:  609:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 compare_three_way_result_t<typename unique_ptr<_T1, _D1>::pointer>
        -:  610:operator<=>(const unique_ptr<_T1, _D1>& __x, nullptr_t) {
        -:  611:  return compare_three_way()(__x.get(), static_cast<typename unique_ptr<_T1, _D1>::pointer>(nullptr));
        -:  612:}
        -:  613:#endif
        -:  614:
        -:  615:#if _LIBCPP_STD_VER >= 14
        -:  616:
        -:  617:template <class _Tp>
        -:  618:struct __unique_if {
        -:  619:  typedef unique_ptr<_Tp> __unique_single;
        -:  620:};
        -:  621:
        -:  622:template <class _Tp>
        -:  623:struct __unique_if<_Tp[]> {
        -:  624:  typedef unique_ptr<_Tp[]> __unique_array_unknown_bound;
        -:  625:};
        -:  626:
        -:  627:template <class _Tp, size_t _Np>
        -:  628:struct __unique_if<_Tp[_Np]> {
        -:  629:  typedef void __unique_array_known_bound;
        -:  630:};
        -:  631:
        -:  632:template <class _Tp, class... _Args>
        -:  633:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 typename __unique_if<_Tp>::__unique_single
        -:  634:make_unique(_Args&&... __args) {
        -:  635:  return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...));
        -:  636:}
        -:  637:
        -:  638:template <class _Tp>
        -:  639:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 typename __unique_if<_Tp>::__unique_array_unknown_bound
        -:  640:make_unique(size_t __n) {
        -:  641:  typedef __remove_extent_t<_Tp> _Up;
        -:  642:  return unique_ptr<_Tp>(new _Up[__n]());
        -:  643:}
        -:  644:
        -:  645:template <class _Tp, class... _Args>
        -:  646:typename __unique_if<_Tp>::__unique_array_known_bound make_unique(_Args&&...) = delete;
        -:  647:
        -:  648:#endif // _LIBCPP_STD_VER >= 14
        -:  649:
        -:  650:#if _LIBCPP_STD_VER >= 20
        -:  651:
        -:  652:template <class _Tp>
        -:  653:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 typename __unique_if<_Tp>::__unique_single
        -:  654:make_unique_for_overwrite() {
        -:  655:  return unique_ptr<_Tp>(new _Tp);
        -:  656:}
        -:  657:
        -:  658:template <class _Tp>
        -:  659:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX23 typename __unique_if<_Tp>::__unique_array_unknown_bound
        -:  660:make_unique_for_overwrite(size_t __n) {
        -:  661:  return unique_ptr<_Tp>(new __remove_extent_t<_Tp>[__n]);
        -:  662:}
        -:  663:
        -:  664:template <class _Tp, class... _Args>
        -:  665:typename __unique_if<_Tp>::__unique_array_known_bound make_unique_for_overwrite(_Args&&...) = delete;
        -:  666:
        -:  667:#endif // _LIBCPP_STD_VER >= 20
        -:  668:
        -:  669:template <class _Tp>
        -:  670:struct _LIBCPP_TEMPLATE_VIS hash;
        -:  671:
        -:  672:template <class _Tp, class _Dp>
        -:  673:#ifdef _LIBCPP_CXX03_LANG
        -:  674:struct _LIBCPP_TEMPLATE_VIS hash<unique_ptr<_Tp, _Dp> >
        -:  675:#else
        -:  676:struct _LIBCPP_TEMPLATE_VIS hash<__enable_hash_helper< unique_ptr<_Tp, _Dp>, typename unique_ptr<_Tp, _Dp>::pointer> >
        -:  677:#endif
        -:  678:{
        -:  679:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS)
        -:  680:  _LIBCPP_DEPRECATED_IN_CXX17 typedef unique_ptr<_Tp, _Dp> argument_type;
        -:  681:  _LIBCPP_DEPRECATED_IN_CXX17 typedef size_t result_type;
        -:  682:#endif
        -:  683:
        -:  684:  _LIBCPP_HIDE_FROM_ABI size_t operator()(const unique_ptr<_Tp, _Dp>& __ptr) const {
        -:  685:    typedef typename unique_ptr<_Tp, _Dp>::pointer pointer;
        -:  686:    return hash<pointer>()(__ptr.get());
        -:  687:  }
        -:  688:};
        -:  689:
        -:  690:_LIBCPP_END_NAMESPACE_STD
        -:  691:
        -:  692:_LIBCPP_POP_MACROS
        -:  693:
        -:  694:#endif // _LIBCPP___MEMORY_UNIQUE_PTR_H
