        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/string
        -:    0:Graph:HealthMonitor_Alert_test.cpp.gcno
        -:    0:Data:HealthMonitor_Alert_test.cpp.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP_STRING
        -:   11:#define _LIBCPP_STRING
        -:   12:
        -:   13:// clang-format off
        -:   14:
        -:   15:/*
        -:   16:    string synopsis
        -:   17:
        -:   18:#include <compare>
        -:   19:#include <initializer_list>
        -:   20:
        -:   21:namespace std
        -:   22:{
        -:   23:
        -:   24:template <class stateT>
        -:   25:class fpos
        -:   26:{
        -:   27:private:
        -:   28:    stateT st;
        -:   29:public:
        -:   30:    fpos(streamoff = streamoff());
        -:   31:
        -:   32:    operator streamoff() const;
        -:   33:
        -:   34:    stateT state() const;
        -:   35:    void state(stateT);
        -:   36:
        -:   37:    fpos& operator+=(streamoff);
        -:   38:    fpos  operator+ (streamoff) const;
        -:   39:    fpos& operator-=(streamoff);
        -:   40:    fpos  operator- (streamoff) const;
        -:   41:};
        -:   42:
        -:   43:template <class stateT> streamoff operator-(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   44:
        -:   45:template <class stateT> bool operator==(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   46:template <class stateT> bool operator!=(const fpos<stateT>& x, const fpos<stateT>& y);
        -:   47:
        -:   48:template <class charT>
        -:   49:struct char_traits
        -:   50:{
        -:   51:    using char_type           = charT;
        -:   52:    using int_type            = ...;
        -:   53:    using off_type            = streamoff;
        -:   54:    using pos_type            = streampos;
        -:   55:    using state_type          = mbstate_t;
        -:   56:    using comparison_category = strong_ordering; // Since C++20 only for the specializations
        -:   57:                                                 // char, wchar_t, char8_t, char16_t, and char32_t.
        -:   58:
        -:   59:    static void assign(char_type& c1, const char_type& c2) noexcept;
        -:   60:    static constexpr bool eq(char_type c1, char_type c2) noexcept;
        -:   61:    static constexpr bool lt(char_type c1, char_type c2) noexcept;
        -:   62:
        -:   63:    static int              compare(const char_type* s1, const char_type* s2, size_t n);
        -:   64:    static size_t           length(const char_type* s);
        -:   65:    static const char_type* find(const char_type* s, size_t n, const char_type& a);
        -:   66:    static char_type*       move(char_type* s1, const char_type* s2, size_t n);
        -:   67:    static char_type*       copy(char_type* s1, const char_type* s2, size_t n);
        -:   68:    static char_type*       assign(char_type* s, size_t n, char_type a);
        -:   69:
        -:   70:    static constexpr int_type  not_eof(int_type c) noexcept;
        -:   71:    static constexpr char_type to_char_type(int_type c) noexcept;
        -:   72:    static constexpr int_type  to_int_type(char_type c) noexcept;
        -:   73:    static constexpr bool      eq_int_type(int_type c1, int_type c2) noexcept;
        -:   74:    static constexpr int_type  eof() noexcept;
        -:   75:};
        -:   76:
        -:   77:template <> struct char_traits<char>;
        -:   78:template <> struct char_traits<wchar_t>;
        -:   79:template <> struct char_traits<char8_t>;  // C++20
        -:   80:template <> struct char_traits<char16_t>;
        -:   81:template <> struct char_traits<char32_t>;
        -:   82:
        -:   83:template<class charT, class traits = char_traits<charT>, class Allocator = allocator<charT> >
        -:   84:class basic_string
        -:   85:{
        -:   86:public:
        -:   87:// types:
        -:   88:    typedef traits traits_type;
        -:   89:    typedef typename traits_type::char_type value_type;
        -:   90:    typedef Allocator allocator_type;
        -:   91:    typedef typename allocator_type::size_type size_type;
        -:   92:    typedef typename allocator_type::difference_type difference_type;
        -:   93:    typedef typename allocator_type::reference reference;
        -:   94:    typedef typename allocator_type::const_reference const_reference;
        -:   95:    typedef typename allocator_type::pointer pointer;
        -:   96:    typedef typename allocator_type::const_pointer const_pointer;
        -:   97:    typedef implementation-defined iterator;
        -:   98:    typedef implementation-defined const_iterator;
        -:   99:    typedef std::reverse_iterator<iterator> reverse_iterator;
        -:  100:    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        -:  101:
        -:  102:    static const size_type npos = -1;
        -:  103:
        -:  104:    basic_string()
        -:  105:        noexcept(is_nothrow_default_constructible<allocator_type>::value);                      // constexpr since C++20
        -:  106:    explicit basic_string(const allocator_type& a);                                             // constexpr since C++20
        -:  107:    basic_string(const basic_string& str);                                                      // constexpr since C++20
        -:  108:    basic_string(basic_string&& str)
        -:  109:        noexcept(is_nothrow_move_constructible<allocator_type>::value);                         // constexpr since C++20
        -:  110:    basic_string(const basic_string& str, size_type pos,
        -:  111:                 const allocator_type& a = allocator_type());                                   // constexpr since C++20
        -:  112:    basic_string(const basic_string& str, size_type pos, size_type n,
        -:  113:                 const Allocator& a = Allocator());                                             // constexpr since C++20
        -:  114:    constexpr basic_string(
        -:  115:        basic_string&& str, size_type pos, const Allocator& a = Allocator());                   // since C++23
        -:  116:    constexpr basic_string(
        -:  117:        basic_string&& str, size_type pos, size_type n, const Allocator& a = Allocator());      // since C++23
        -:  118:    template<class T>
        -:  119:        basic_string(const T& t, size_type pos, size_type n, const Allocator& a = Allocator()); // C++17, constexpr since C++20
        -:  120:    template <class T>
        -:  121:        explicit basic_string(const T& t, const Allocator& a = Allocator());                    // C++17, constexpr since C++20
        -:  122:    basic_string(const value_type* s, const allocator_type& a = allocator_type());              // constexpr since C++20
        -:  123:    basic_string(const value_type* s, size_type n, const allocator_type& a = allocator_type()); // constexpr since C++20
        -:  124:    basic_string(nullptr_t) = delete; // C++23
        -:  125:    basic_string(size_type n, value_type c, const allocator_type& a = allocator_type());        // constexpr since C++20
        -:  126:    template<class InputIterator>
        -:  127:        basic_string(InputIterator begin, InputIterator end,
        -:  128:                     const allocator_type& a = allocator_type());                               // constexpr since C++20
        -:  129:    template<container-compatible-range<charT> R>
        -:  130:      constexpr basic_string(from_range_t, R&& rg, const Allocator& a = Allocator());           // since C++23
        -:  131:    basic_string(initializer_list<value_type>, const Allocator& = Allocator());                 // constexpr since C++20
        -:  132:    basic_string(const basic_string&, const Allocator&);                                        // constexpr since C++20
        -:  133:    basic_string(basic_string&&, const Allocator&);                                             // constexpr since C++20
        -:  134:
        -:  135:    ~basic_string();                                                                            // constexpr since C++20
        -:  136:
        -:  137:    operator basic_string_view<charT, traits>() const noexcept;                                 // constexpr since C++20
        -:  138:
        -:  139:    basic_string& operator=(const basic_string& str);                                           // constexpr since C++20
        -:  140:    template <class T>
        -:  141:        basic_string& operator=(const T& t);                                                    // C++17, constexpr since C++20
        -:  142:    basic_string& operator=(basic_string&& str)
        -:  143:        noexcept(
        -:  144:             allocator_type::propagate_on_container_move_assignment::value ||
        -:  145:             allocator_type::is_always_equal::value );                                          // C++17, constexpr since C++20
        -:  146:    basic_string& operator=(const value_type* s);                                               // constexpr since C++20
        -:  147:    basic_string& operator=(nullptr_t) = delete; // C++23
        -:  148:    basic_string& operator=(value_type c);                                                      // constexpr since C++20
        -:  149:    basic_string& operator=(initializer_list<value_type>);                                      // constexpr since C++20
        -:  150:
        -:  151:    iterator       begin() noexcept;                                                            // constexpr since C++20
        -:  152:    const_iterator begin() const noexcept;                                                      // constexpr since C++20
        -:  153:    iterator       end() noexcept;                                                              // constexpr since C++20
        -:  154:    const_iterator end() const noexcept;                                                        // constexpr since C++20
        -:  155:
        -:  156:    reverse_iterator       rbegin() noexcept;                                                   // constexpr since C++20
        -:  157:    const_reverse_iterator rbegin() const noexcept;                                             // constexpr since C++20
        -:  158:    reverse_iterator       rend() noexcept;                                                     // constexpr since C++20
        -:  159:    const_reverse_iterator rend() const noexcept;                                               // constexpr since C++20
        -:  160:
        -:  161:    const_iterator         cbegin() const noexcept;                                             // constexpr since C++20
        -:  162:    const_iterator         cend() const noexcept;                                               // constexpr since C++20
        -:  163:    const_reverse_iterator crbegin() const noexcept;                                            // constexpr since C++20
        -:  164:    const_reverse_iterator crend() const noexcept;                                              // constexpr since C++20
        -:  165:
        -:  166:    size_type size() const noexcept;                                                            // constexpr since C++20
        -:  167:    size_type length() const noexcept;                                                          // constexpr since C++20
        -:  168:    size_type max_size() const noexcept;                                                        // constexpr since C++20
        -:  169:    size_type capacity() const noexcept;                                                        // constexpr since C++20
        -:  170:
        -:  171:    void resize(size_type n, value_type c);                                                     // constexpr since C++20
        -:  172:    void resize(size_type n);                                                                   // constexpr since C++20
        -:  173:
        -:  174:    template<class Operation>
        -:  175:    constexpr void resize_and_overwrite(size_type n, Operation op); // since C++23
        -:  176:
        -:  177:    void reserve(size_type res_arg);                                                            // constexpr since C++20
        -:  178:    void reserve();                                                                             // deprecated in C++20, removed in C++26
        -:  179:    void shrink_to_fit();                                                                       // constexpr since C++20
        -:  180:    void clear() noexcept;                                                                      // constexpr since C++20
        -:  181:    bool empty() const noexcept;                                                                // constexpr since C++20
        -:  182:
        -:  183:    const_reference operator[](size_type pos) const;                                            // constexpr since C++20
        -:  184:    reference       operator[](size_type pos);                                                  // constexpr since C++20
        -:  185:
        -:  186:    const_reference at(size_type n) const;                                                      // constexpr since C++20
        -:  187:    reference       at(size_type n);                                                            // constexpr since C++20
        -:  188:
        -:  189:    basic_string& operator+=(const basic_string& str);                                          // constexpr since C++20
        -:  190:    template <class T>
        -:  191:        basic_string& operator+=(const T& t);                                                   // C++17, constexpr since C++20
        -:  192:    basic_string& operator+=(const value_type* s);                                              // constexpr since C++20
        -:  193:    basic_string& operator+=(value_type c);                                                     // constexpr since C++20
        -:  194:    basic_string& operator+=(initializer_list<value_type>);                                     // constexpr since C++20
        -:  195:
        -:  196:    basic_string& append(const basic_string& str);                                              // constexpr since C++20
        -:  197:    template <class T>
        -:  198:        basic_string& append(const T& t);                                                       // C++17, constexpr since C++20
        -:  199:    basic_string& append(const basic_string& str, size_type pos, size_type n=npos);             // C++14, constexpr since C++20
        -:  200:    template <class T>
        -:  201:        basic_string& append(const T& t, size_type pos, size_type n=npos);                      // C++17, constexpr since C++20
        -:  202:    basic_string& append(const value_type* s, size_type n);                                     // constexpr since C++20
        -:  203:    basic_string& append(const value_type* s);                                                  // constexpr since C++20
        -:  204:    basic_string& append(size_type n, value_type c);                                            // constexpr since C++20
        -:  205:    template<class InputIterator>
        -:  206:        basic_string& append(InputIterator first, InputIterator last);                          // constexpr since C++20
        -:  207:    template<container-compatible-range<charT> R>
        -:  208:      constexpr basic_string& append_range(R&& rg);                                             // C++23
        -:  209:    basic_string& append(initializer_list<value_type>);                                         // constexpr since C++20
        -:  210:
        -:  211:    void push_back(value_type c);                                                               // constexpr since C++20
        -:  212:    void pop_back();                                                                            // constexpr since C++20
        -:  213:    reference       front();                                                                    // constexpr since C++20
        -:  214:    const_reference front() const;                                                              // constexpr since C++20
        -:  215:    reference       back();                                                                     // constexpr since C++20
        -:  216:    const_reference back() const;                                                               // constexpr since C++20
        -:  217:
        -:  218:    basic_string& assign(const basic_string& str);                                              // constexpr since C++20
        -:  219:    template <class T>
        -:  220:        basic_string& assign(const T& t);                                                       // C++17, constexpr since C++20
        -:  221:    basic_string& assign(basic_string&& str);                                                   // constexpr since C++20
        -:  222:    basic_string& assign(const basic_string& str, size_type pos, size_type n=npos);             // C++14, constexpr since C++20
        -:  223:    template <class T>
        -:  224:        basic_string& assign(const T& t, size_type pos, size_type n=npos);                      // C++17, constexpr since C++20
        -:  225:    basic_string& assign(const value_type* s, size_type n);                                     // constexpr since C++20
        -:  226:    basic_string& assign(const value_type* s);                                                  // constexpr since C++20
        -:  227:    basic_string& assign(size_type n, value_type c);                                            // constexpr since C++20
        -:  228:    template<class InputIterator>
        -:  229:        basic_string& assign(InputIterator first, InputIterator last);                          // constexpr since C++20
        -:  230:    template<container-compatible-range<charT> R>
        -:  231:      constexpr basic_string& assign_range(R&& rg);                                             // C++23
        -:  232:    basic_string& assign(initializer_list<value_type>);                                         // constexpr since C++20
        -:  233:
        -:  234:    basic_string& insert(size_type pos1, const basic_string& str);                              // constexpr since C++20
        -:  235:    template <class T>
        -:  236:        basic_string& insert(size_type pos1, const T& t);                                       // constexpr since C++20
        -:  237:    basic_string& insert(size_type pos1, const basic_string& str,
        -:  238:                         size_type pos2, size_type n);                                          // constexpr since C++20
        -:  239:    template <class T>
        -:  240:        basic_string& insert(size_type pos1, const T& t, size_type pos2, size_type n);          // C++17, constexpr since C++20
        -:  241:    basic_string& insert(size_type pos, const value_type* s, size_type n=npos);                 // C++14, constexpr since C++20
        -:  242:    basic_string& insert(size_type pos, const value_type* s);                                   // constexpr since C++20
        -:  243:    basic_string& insert(size_type pos, size_type n, value_type c);                             // constexpr since C++20
        -:  244:    iterator      insert(const_iterator p, value_type c);                                       // constexpr since C++20
        -:  245:    iterator      insert(const_iterator p, size_type n, value_type c);                          // constexpr since C++20
        -:  246:    template<class InputIterator>
        -:  247:        iterator insert(const_iterator p, InputIterator first, InputIterator last);             // constexpr since C++20
        -:  248:    template<container-compatible-range<charT> R>
        -:  249:      constexpr iterator insert_range(const_iterator p, R&& rg);                                // C++23
        -:  250:    iterator      insert(const_iterator p, initializer_list<value_type>);                       // constexpr since C++20
        -:  251:
        -:  252:    basic_string& erase(size_type pos = 0, size_type n = npos);                                 // constexpr since C++20
        -:  253:    iterator      erase(const_iterator position);                                               // constexpr since C++20
        -:  254:    iterator      erase(const_iterator first, const_iterator last);                             // constexpr since C++20
        -:  255:
        -:  256:    basic_string& replace(size_type pos1, size_type n1, const basic_string& str);               // constexpr since C++20
        -:  257:    template <class T>
        -:  258:    basic_string& replace(size_type pos1, size_type n1, const T& t);                            // C++17, constexpr since C++20
        -:  259:    basic_string& replace(size_type pos1, size_type n1, const basic_string& str,
        -:  260:                          size_type pos2, size_type n2=npos);                                   // C++14, constexpr since C++20
        -:  261:    template <class T>
        -:  262:        basic_string& replace(size_type pos1, size_type n1, const T& t,
        -:  263:                              size_type pos2, size_type n);                                     // C++17, constexpr since C++20
        -:  264:    basic_string& replace(size_type pos, size_type n1, const value_type* s, size_type n2);      // constexpr since C++20
        -:  265:    basic_string& replace(size_type pos, size_type n1, const value_type* s);                    // constexpr since C++20
        -:  266:    basic_string& replace(size_type pos, size_type n1, size_type n2, value_type c);             // constexpr since C++20
        -:  267:    basic_string& replace(const_iterator i1, const_iterator i2, const basic_string& str);       // constexpr since C++20
        -:  268:    template <class T>
        -:  269:        basic_string& replace(const_iterator i1, const_iterator i2, const T& t);                // C++17, constexpr since C++20
        -:  270:    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s, size_type n); // constexpr since C++20
        -:  271:    basic_string& replace(const_iterator i1, const_iterator i2, const value_type* s);           // constexpr since C++20
        -:  272:    basic_string& replace(const_iterator i1, const_iterator i2, size_type n, value_type c);     // constexpr since C++20
        -:  273:    template<class InputIterator>
        -:  274:        basic_string& replace(const_iterator i1, const_iterator i2, InputIterator j1, InputIterator j2); // constexpr since C++20
        -:  275:    template<container-compatible-range<charT> R>
        -:  276:      constexpr basic_string& replace_with_range(const_iterator i1, const_iterator i2, R&& rg); // C++23
        -:  277:    basic_string& replace(const_iterator i1, const_iterator i2, initializer_list<value_type>);  // constexpr since C++20
        -:  278:
        -:  279:    size_type copy(value_type* s, size_type n, size_type pos = 0) const;                        // constexpr since C++20
        -:  280:    basic_string substr(size_type pos = 0, size_type n = npos) const;                           // constexpr in C++20, removed in C++23
        -:  281:    basic_string substr(size_type pos = 0, size_type n = npos) const&;                          // since C++23
        -:  282:    constexpr basic_string substr(size_type pos = 0, size_type n = npos) &&;                    // since C++23
        -:  283:    void swap(basic_string& str)
        -:  284:        noexcept(allocator_traits<allocator_type>::propagate_on_container_swap::value ||
        -:  285:                 allocator_traits<allocator_type>::is_always_equal::value);                     // C++17, constexpr since C++20
        -:  286:
        -:  287:    const value_type* c_str() const noexcept;                                                   // constexpr since C++20
        -:  288:    const value_type* data() const noexcept;                                                    // constexpr since C++20
        -:  289:          value_type* data()       noexcept;                                                    // C++17, constexpr since C++20
        -:  290:
        -:  291:    allocator_type get_allocator() const noexcept;                                              // constexpr since C++20
        -:  292:
        -:  293:    size_type find(const basic_string& str, size_type pos = 0) const noexcept;                  // constexpr since C++20
        -:  294:    template <class T>
        -:  295:        size_type find(const T& t, size_type pos = 0) const noexcept;                           // C++17, noexcept as an extension, constexpr since C++20
        -:  296:    size_type find(const value_type* s, size_type pos, size_type n) const noexcept;             // constexpr since C++20
        -:  297:    size_type find(const value_type* s, size_type pos = 0) const noexcept;                      // constexpr since C++20
        -:  298:    size_type find(value_type c, size_type pos = 0) const noexcept;                             // constexpr since C++20
        -:  299:
        -:  300:    size_type rfind(const basic_string& str, size_type pos = npos) const noexcept;              // constexpr since C++20
        -:  301:    template <class T>
        -:  302:        size_type rfind(const T& t, size_type pos = npos) const noexcept;                       // C++17, noexcept as an extension, constexpr since C++20
        -:  303:    size_type rfind(const value_type* s, size_type pos, size_type n) const noexcept;            // constexpr since C++20
        -:  304:    size_type rfind(const value_type* s, size_type pos = npos) const noexcept;                  // constexpr since C++20
        -:  305:    size_type rfind(value_type c, size_type pos = npos) const noexcept;                         // constexpr since C++20
        -:  306:
        -:  307:    size_type find_first_of(const basic_string& str, size_type pos = 0) const noexcept;         // constexpr since C++20
        -:  308:    template <class T>
        -:  309:        size_type find_first_of(const T& t, size_type pos = 0) const noexcept;                  // C++17, noexcept as an extension, constexpr since C++20
        -:  310:    size_type find_first_of(const value_type* s, size_type pos, size_type n) const noexcept;    // constexpr since C++20
        -:  311:    size_type find_first_of(const value_type* s, size_type pos = 0) const noexcept;             // constexpr since C++20
        -:  312:    size_type find_first_of(value_type c, size_type pos = 0) const noexcept;                    // constexpr since C++20
        -:  313:
        -:  314:    size_type find_last_of(const basic_string& str, size_type pos = npos) const noexcept;       // constexpr since C++20
        -:  315:    template <class T>
        -:  316:        size_type find_last_of(const T& t, size_type pos = npos) const noexcept noexcept;       // C++17, noexcept as an extension, constexpr since C++20
        -:  317:    size_type find_last_of(const value_type* s, size_type pos, size_type n) const noexcept;     // constexpr since C++20
        -:  318:    size_type find_last_of(const value_type* s, size_type pos = npos) const noexcept;           // constexpr since C++20
        -:  319:    size_type find_last_of(value_type c, size_type pos = npos) const noexcept;                  // constexpr since C++20
        -:  320:
        -:  321:    size_type find_first_not_of(const basic_string& str, size_type pos = 0) const noexcept;     // constexpr since C++20
        -:  322:    template <class T>
        -:  323:        size_type find_first_not_of(const T& t, size_type pos = 0) const noexcept;              // C++17, noexcept as an extension, constexpr since C++20
        -:  324:    size_type find_first_not_of(const value_type* s, size_type pos, size_type n) const noexcept; // constexpr since C++20
        -:  325:    size_type find_first_not_of(const value_type* s, size_type pos = 0) const noexcept;         // constexpr since C++20
        -:  326:    size_type find_first_not_of(value_type c, size_type pos = 0) const noexcept;                // constexpr since C++20
        -:  327:
        -:  328:    size_type find_last_not_of(const basic_string& str, size_type pos = npos) const noexcept;   // constexpr since C++20
        -:  329:    template <class T>
        -:  330:        size_type find_last_not_of(const T& t, size_type pos = npos) const noexcept;            // C++17, noexcept as an extension, constexpr since C++20
        -:  331:    size_type find_last_not_of(const value_type* s, size_type pos, size_type n) const noexcept; // constexpr since C++20
        -:  332:    size_type find_last_not_of(const value_type* s, size_type pos = npos) const noexcept;       // constexpr since C++20
        -:  333:    size_type find_last_not_of(value_type c, size_type pos = npos) const noexcept;              // constexpr since C++20
        -:  334:
        -:  335:    int compare(const basic_string& str) const noexcept;                                        // constexpr since C++20
        -:  336:    template <class T>
        -:  337:        int compare(const T& t) const noexcept;                                                 // C++17, noexcept as an extension, constexpr since C++20
        -:  338:    int compare(size_type pos1, size_type n1, const basic_string& str) const;                   // constexpr since C++20
        -:  339:    template <class T>
        -:  340:        int compare(size_type pos1, size_type n1, const T& t) const;                            // C++17, constexpr since C++20
        -:  341:    int compare(size_type pos1, size_type n1, const basic_string& str,
        -:  342:                size_type pos2, size_type n2=npos) const;                                       // C++14, constexpr since C++20
        -:  343:    template <class T>
        -:  344:        int compare(size_type pos1, size_type n1, const T& t,
        -:  345:                    size_type pos2, size_type n2=npos) const;                                   // C++17, constexpr since C++20
        -:  346:    int compare(const value_type* s) const noexcept;                                            // constexpr since C++20
        -:  347:    int compare(size_type pos1, size_type n1, const value_type* s) const;                       // constexpr since C++20
        -:  348:    int compare(size_type pos1, size_type n1, const value_type* s, size_type n2) const;         // constexpr since C++20
        -:  349:
        -:  350:    constexpr bool starts_with(basic_string_view<charT, traits> sv) const noexcept;             // C++20
        -:  351:    constexpr bool starts_with(charT c) const noexcept;                                         // C++20
        -:  352:    constexpr bool starts_with(const charT* s) const;                                           // C++20
        -:  353:    constexpr bool ends_with(basic_string_view<charT, traits> sv) const noexcept;               // C++20
        -:  354:    constexpr bool ends_with(charT c) const noexcept;                                           // C++20
        -:  355:    constexpr bool ends_with(const charT* s) const;                                             // C++20
        -:  356:
        -:  357:    constexpr bool contains(basic_string_view<charT, traits> sv) const noexcept;                // C++23
        -:  358:    constexpr bool contains(charT c) const noexcept;                                            // C++23
        -:  359:    constexpr bool contains(const charT* s) const;                                              // C++23
        -:  360:};
        -:  361:
        -:  362:template<class InputIterator,
        -:  363:         class Allocator = allocator<typename iterator_traits<InputIterator>::value_type>>
        -:  364:basic_string(InputIterator, InputIterator, Allocator = Allocator())
        -:  365:   -> basic_string<typename iterator_traits<InputIterator>::value_type,
        -:  366:                  char_traits<typename iterator_traits<InputIterator>::value_type>,
        -:  367:                  Allocator>;   // C++17
        -:  368:
        -:  369:template<ranges::input_range R,
        -:  370:         class Allocator = allocator<ranges::range_value_t<R>>>
        -:  371:  basic_string(from_range_t, R&&, Allocator = Allocator())
        -:  372:    -> basic_string<ranges::range_value_t<R>, char_traits<ranges::range_value_t<R>>,
        -:  373:                    Allocator>; // C++23
        -:  374:
        -:  375:template<class charT,
        -:  376:         class traits,
        -:  377:         class Allocator = allocator<charT>>
        -:  378:  explicit basic_string(basic_string_view<charT, traits>, const Allocator& = Allocator())
        -:  379:    -> basic_string<charT, traits, Allocator>; // C++17
        -:  380:
        -:  381:template<class charT,
        -:  382:         class traits,
        -:  383:         class Allocator = allocator<charT>>
        -:  384:  basic_string(basic_string_view<charT, traits>,
        -:  385:                typename see below::size_type, typename see below::size_type,
        -:  386:                const Allocator& = Allocator())
        -:  387:    -> basic_string<charT, traits, Allocator>; // C++17
        -:  388:
        -:  389:template<class charT, class traits, class Allocator>
        -:  390:basic_string<charT, traits, Allocator>
        -:  391:operator+(const basic_string<charT, traits, Allocator>& lhs,
        -:  392:          const basic_string<charT, traits, Allocator>& rhs);                                   // constexpr since C++20
        -:  393:
        -:  394:template<class charT, class traits, class Allocator>
        -:  395:basic_string<charT, traits, Allocator>
        -:  396:operator+(const charT* lhs , const basic_string<charT,traits,Allocator>&rhs);                   // constexpr since C++20
        -:  397:
        -:  398:template<class charT, class traits, class Allocator>
        -:  399:basic_string<charT, traits, Allocator>
        -:  400:operator+(charT lhs, const basic_string<charT,traits,Allocator>& rhs);                          // constexpr since C++20
        -:  401:
        -:  402:template<class charT, class traits, class Allocator>
        -:  403:basic_string<charT, traits, Allocator>
        -:  404:operator+(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs);                 // constexpr since C++20
        -:  405:
        -:  406:template<class charT, class traits, class Allocator>
        -:  407:basic_string<charT, traits, Allocator>
        -:  408:operator+(const basic_string<charT, traits, Allocator>& lhs, charT rhs);                        // constexpr since C++20
        -:  409:
        -:  410:template<class charT, class traits, class Allocator>
        -:  411:  constexpr basic_string<charT, traits, Allocator>
        -:  412:    operator+(const basic_string<charT, traits, Allocator>& lhs,
        -:  413:              type_identity_t<basic_string_view<charT, traits>> rhs);                           // Since C++26
        -:  414:template<class charT, class traits, class Allocator>
        -:  415:  constexpr basic_string<charT, traits, Allocator>
        -:  416:    operator+(basic_string<charT, traits, Allocator>&& lhs,
        -:  417:              type_identity_t<basic_string_view<charT, traits>> rhs);                           // Since C++26
        -:  418:template<class charT, class traits, class Allocator>
        -:  419:  constexpr basic_string<charT, traits, Allocator>
        -:  420:    operator+(type_identity_t<basic_string_view<charT, traits>> lhs,
        -:  421:              const basic_string<charT, traits, Allocator>& rhs);                               // Since C++26
        -:  422:template<class charT, class traits, class Allocator>
        -:  423:  constexpr basic_string<charT, traits, Allocator>
        -:  424:    operator+(type_identity_t<basic_string_view<charT, traits>> lhs,
        -:  425:              basic_string<charT, traits, Allocator>&& rhs);                                    // Since C++26
        -:  426:
        -:  427:
        -:  428:template<class charT, class traits, class Allocator>
        -:  429:bool operator==(const basic_string<charT, traits, Allocator>& lhs,
        -:  430:                const basic_string<charT, traits, Allocator>& rhs) noexcept;                    // constexpr since C++20
        -:  431:
        -:  432:template<class charT, class traits, class Allocator>
        -:  433:bool operator==(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;  // removed in C++20
        -:  434:
        -:  435:template<class charT, class traits, class Allocator>
        -:  436:bool operator==(const basic_string<charT,traits,Allocator>& lhs, const charT* rhs) noexcept;    // constexpr since C++20
        -:  437:
        -:  438:template<class charT, class traits, class Allocator>
        -:  439:bool operator!=(const basic_string<charT,traits,Allocator>& lhs,
        -:  440:                const basic_string<charT, traits, Allocator>& rhs) noexcept;                    // removed in C++20
        -:  441:
        -:  442:template<class charT, class traits, class Allocator>
        -:  443:bool operator!=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;  // removed in C++20
        -:  444:
        -:  445:template<class charT, class traits, class Allocator>
        -:  446:bool operator!=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;  // removed in C++20
        -:  447:
        -:  448:template<class charT, class traits, class Allocator>
        -:  449:bool operator< (const basic_string<charT, traits, Allocator>& lhs,
        -:  450:                const basic_string<charT, traits, Allocator>& rhs) noexcept;                    // removed in C++20
        -:  451:
        -:  452:template<class charT, class traits, class Allocator>
        -:  453:bool operator< (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;  // removed in C++20
        -:  454:
        -:  455:template<class charT, class traits, class Allocator>
        -:  456:bool operator< (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;  // removed in C++20
        -:  457:
        -:  458:template<class charT, class traits, class Allocator>
        -:  459:bool operator> (const basic_string<charT, traits, Allocator>& lhs,
        -:  460:                const basic_string<charT, traits, Allocator>& rhs) noexcept;                    // removed in C++20
        -:  461:
        -:  462:template<class charT, class traits, class Allocator>
        -:  463:bool operator> (const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;  // removed in C++20
        -:  464:
        -:  465:template<class charT, class traits, class Allocator>
        -:  466:bool operator> (const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;  // removed in C++20
        -:  467:
        -:  468:template<class charT, class traits, class Allocator>
        -:  469:bool operator<=(const basic_string<charT, traits, Allocator>& lhs,
        -:  470:                const basic_string<charT, traits, Allocator>& rhs) noexcept;                    // removed in C++20
        -:  471:
        -:  472:template<class charT, class traits, class Allocator>
        -:  473:bool operator<=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;  // removed in C++20
        -:  474:
        -:  475:template<class charT, class traits, class Allocator>
        -:  476:bool operator<=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;  // removed in C++20
        -:  477:
        -:  478:template<class charT, class traits, class Allocator>
        -:  479:bool operator>=(const basic_string<charT, traits, Allocator>& lhs,
        -:  480:                const basic_string<charT, traits, Allocator>& rhs) noexcept;                    // removed in C++20
        -:  481:
        -:  482:template<class charT, class traits, class Allocator>
        -:  483:bool operator>=(const basic_string<charT, traits, Allocator>& lhs, const charT* rhs) noexcept;  // removed in C++20
        -:  484:
        -:  485:template<class charT, class traits, class Allocator>
        -:  486:bool operator>=(const charT* lhs, const basic_string<charT, traits, Allocator>& rhs) noexcept;  // removed in C++20
        -:  487:
        -:  488:template<class charT, class traits, class Allocator>                                            // since C++20
        -:  489:constexpr see below operator<=>(const basic_string<charT, traits, Allocator>& lhs,
        -:  490:                                const basic_string<charT, traits, Allocator>& rhs) noexcept;
        -:  491:
        -:  492:template<class charT, class traits, class Allocator>                                            // since C++20
        -:  493:constexpr see below operator<=>(const basic_string<charT, traits, Allocator>& lhs,
        -:  494:                                const charT* rhs) noexcept;
        -:  495:
        -:  496:template<class charT, class traits, class Allocator>
        -:  497:void swap(basic_string<charT, traits, Allocator>& lhs,
        -:  498:          basic_string<charT, traits, Allocator>& rhs)
        -:  499:            noexcept(noexcept(lhs.swap(rhs)));                                                  // constexpr since C++20
        -:  500:
        -:  501:template<class charT, class traits, class Allocator>
        -:  502:basic_istream<charT, traits>&
        -:  503:operator>>(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
        -:  504:
        -:  505:template<class charT, class traits, class Allocator>
        -:  506:basic_ostream<charT, traits>&
        -:  507:operator<<(basic_ostream<charT, traits>& os, const basic_string<charT, traits, Allocator>& str);
        -:  508:
        -:  509:template<class charT, class traits, class Allocator>
        -:  510:basic_istream<charT, traits>&
        -:  511:getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str,
        -:  512:        charT delim);
        -:  513:
        -:  514:template<class charT, class traits, class Allocator>
        -:  515:basic_istream<charT, traits>&
        -:  516:getline(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
        -:  517:
        -:  518:template<class charT, class traits, class Allocator, class U>
        -:  519:typename basic_string<charT, traits, Allocator>::size_type
        -:  520:erase(basic_string<charT, traits, Allocator>& c, const U& value);    // C++20
        -:  521:template<class charT, class traits, class Allocator, class Predicate>
        -:  522:typename basic_string<charT, traits, Allocator>::size_type
        -:  523:erase_if(basic_string<charT, traits, Allocator>& c, Predicate pred); // C++20
        -:  524:
        -:  525:typedef basic_string<char>    string;
        -:  526:typedef basic_string<wchar_t> wstring;
        -:  527:typedef basic_string<char8_t> u8string; // C++20
        -:  528:typedef basic_string<char16_t> u16string;
        -:  529:typedef basic_string<char32_t> u32string;
        -:  530:
        -:  531:int                stoi  (const string& str, size_t* idx = nullptr, int base = 10);
        -:  532:long               stol  (const string& str, size_t* idx = nullptr, int base = 10);
        -:  533:unsigned long      stoul (const string& str, size_t* idx = nullptr, int base = 10);
        -:  534:long long          stoll (const string& str, size_t* idx = nullptr, int base = 10);
        -:  535:unsigned long long stoull(const string& str, size_t* idx = nullptr, int base = 10);
        -:  536:
        -:  537:float       stof (const string& str, size_t* idx = nullptr);
        -:  538:double      stod (const string& str, size_t* idx = nullptr);
        -:  539:long double stold(const string& str, size_t* idx = nullptr);
        -:  540:
        -:  541:string to_string(int val);
        -:  542:string to_string(unsigned val);
        -:  543:string to_string(long val);
        -:  544:string to_string(unsigned long val);
        -:  545:string to_string(long long val);
        -:  546:string to_string(unsigned long long val);
        -:  547:string to_string(float val);
        -:  548:string to_string(double val);
        -:  549:string to_string(long double val);
        -:  550:
        -:  551:int                stoi  (const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  552:long               stol  (const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  553:unsigned long      stoul (const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  554:long long          stoll (const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  555:unsigned long long stoull(const wstring& str, size_t* idx = nullptr, int base = 10);
        -:  556:
        -:  557:float       stof (const wstring& str, size_t* idx = nullptr);
        -:  558:double      stod (const wstring& str, size_t* idx = nullptr);
        -:  559:long double stold(const wstring& str, size_t* idx = nullptr);
        -:  560:
        -:  561:wstring to_wstring(int val);
        -:  562:wstring to_wstring(unsigned val);
        -:  563:wstring to_wstring(long val);
        -:  564:wstring to_wstring(unsigned long val);
        -:  565:wstring to_wstring(long long val);
        -:  566:wstring to_wstring(unsigned long long val);
        -:  567:wstring to_wstring(float val);
        -:  568:wstring to_wstring(double val);
        -:  569:wstring to_wstring(long double val);
        -:  570:
        -:  571:template <> struct hash<string>;
        -:  572:template <> struct hash<u8string>; // C++20
        -:  573:template <> struct hash<u16string>;
        -:  574:template <> struct hash<u32string>;
        -:  575:template <> struct hash<wstring>;
        -:  576:
        -:  577:basic_string<char>     operator""s( const char *str,     size_t len );           // C++14, constexpr since C++20
        -:  578:basic_string<wchar_t>  operator""s( const wchar_t *str,  size_t len );           // C++14, constexpr since C++20
        -:  579:constexpr basic_string<char8_t>  operator""s( const char8_t *str,  size_t len ); // C++20
        -:  580:basic_string<char16_t> operator""s( const char16_t *str, size_t len );           // C++14, constexpr since C++20
        -:  581:basic_string<char32_t> operator""s( const char32_t *str, size_t len );           // C++14, constexpr since C++20
        -:  582:
        -:  583:}  // std
        -:  584:
        -:  585:*/
        -:  586:
        -:  587:// clang-format on
        -:  588:
        -:  589:#include <__algorithm/max.h>
        -:  590:#include <__algorithm/min.h>
        -:  591:#include <__algorithm/remove.h>
        -:  592:#include <__algorithm/remove_if.h>
        -:  593:#include <__assert>
        -:  594:#include <__config>
        -:  595:#include <__debug_utils/sanitizers.h>
        -:  596:#include <__format/enable_insertable.h>
        -:  597:#include <__functional/hash.h>
        -:  598:#include <__functional/unary_function.h>
        -:  599:#include <__fwd/string.h>
        -:  600:#include <__ios/fpos.h>
        -:  601:#include <__iterator/bounded_iter.h>
        -:  602:#include <__iterator/distance.h>
        -:  603:#include <__iterator/iterator_traits.h>
        -:  604:#include <__iterator/reverse_iterator.h>
        -:  605:#include <__iterator/wrap_iter.h>
        -:  606:#include <__memory/addressof.h>
        -:  607:#include <__memory/allocate_at_least.h>
        -:  608:#include <__memory/allocator.h>
        -:  609:#include <__memory/allocator_traits.h>
        -:  610:#include <__memory/compressed_pair.h>
        -:  611:#include <__memory/construct_at.h>
        -:  612:#include <__memory/noexcept_move_assign_container.h>
        -:  613:#include <__memory/pointer_traits.h>
        -:  614:#include <__memory/swap_allocator.h>
        -:  615:#include <__memory_resource/polymorphic_allocator.h>
        -:  616:#include <__ranges/access.h>
        -:  617:#include <__ranges/concepts.h>
        -:  618:#include <__ranges/container_compatible_range.h>
        -:  619:#include <__ranges/from_range.h>
        -:  620:#include <__ranges/size.h>
        -:  621:#include <__string/char_traits.h>
        -:  622:#include <__string/extern_template_lists.h>
        -:  623:#include <__type_traits/conditional.h>
        -:  624:#include <__type_traits/enable_if.h>
        -:  625:#include <__type_traits/is_allocator.h>
        -:  626:#include <__type_traits/is_array.h>
        -:  627:#include <__type_traits/is_convertible.h>
        -:  628:#include <__type_traits/is_nothrow_assignable.h>
        -:  629:#include <__type_traits/is_nothrow_constructible.h>
        -:  630:#include <__type_traits/is_same.h>
        -:  631:#include <__type_traits/is_standard_layout.h>
        -:  632:#include <__type_traits/is_trivial.h>
        -:  633:#include <__type_traits/is_trivially_relocatable.h>
        -:  634:#include <__type_traits/remove_cvref.h>
        -:  635:#include <__type_traits/void_t.h>
        -:  636:#include <__utility/auto_cast.h>
        -:  637:#include <__utility/declval.h>
        -:  638:#include <__utility/forward.h>
        -:  639:#include <__utility/is_pointer_in_range.h>
        -:  640:#include <__utility/move.h>
        -:  641:#include <__utility/swap.h>
        -:  642:#include <__utility/unreachable.h>
        -:  643:#include <climits>
        -:  644:#include <cstdio> // EOF
        -:  645:#include <cstring>
        -:  646:#include <limits>
        -:  647:#include <stdexcept>
        -:  648:#include <string_view>
        -:  649:#include <version>
        -:  650:
        -:  651:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  652:#  include <cwchar>
        -:  653:#endif
        -:  654:
        -:  655:// standard-mandated includes
        -:  656:
        -:  657:// [iterator.range]
        -:  658:#include <__iterator/access.h>
        -:  659:#include <__iterator/data.h>
        -:  660:#include <__iterator/empty.h>
        -:  661:#include <__iterator/reverse_access.h>
        -:  662:#include <__iterator/size.h>
        -:  663:
        -:  664:// [string.syn]
        -:  665:#include <compare>
        -:  666:#include <initializer_list>
        -:  667:
        -:  668:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:  669:#  pragma GCC system_header
        -:  670:#endif
        -:  671:
        -:  672:_LIBCPP_PUSH_MACROS
        -:  673:#include <__undef_macros>
        -:  674:
        -:  675:#if !defined(_LIBCPP_HAS_NO_ASAN) && defined(_LIBCPP_INSTRUMENTED_WITH_ASAN)
        -:  676:#  define _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS __attribute__((__no_sanitize__("address")))
        -:  677:// This macro disables AddressSanitizer (ASan) instrumentation for a specific function,
        -:  678:// allowing memory accesses that would normally trigger ASan errors to proceed without crashing.
        -:  679:// This is useful for accessing parts of objects memory, which should not be accessed,
        -:  680:// such as unused bytes in short strings, that should never be accessed
        -:  681:// by other parts of the program.
        -:  682:#else
        -:  683:#  define _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS
        -:  684:#endif
        -:  685:
        -:  686:_LIBCPP_BEGIN_NAMESPACE_STD
        -:  687:
        -:  688:// basic_string
        -:  689:
        -:  690:template <class _CharT, class _Traits, class _Allocator>
        -:  691:basic_string<_CharT, _Traits, _Allocator> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  692:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const basic_string<_CharT, _Traits, _Allocator>& __y);
        -:  693:
        -:  694:template <class _CharT, class _Traits, class _Allocator>
        -:  695:_LIBCPP_HIDDEN _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -:  696:operator+(const _CharT* __x, const basic_string<_CharT, _Traits, _Allocator>& __y);
        -:  697:
        -:  698:template <class _CharT, class _Traits, class _Allocator>
        -:  699:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -:  700:operator+(_CharT __x, const basic_string<_CharT, _Traits, _Allocator>& __y);
        -:  701:
        -:  702:template <class _CharT, class _Traits, class _Allocator>
        -:  703:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -:  704:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, const _CharT* __y);
        -:  705:
        -:  706:template <class _CharT, class _Traits, class _Allocator>
        -:  707:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -:  708:operator+(const basic_string<_CharT, _Traits, _Allocator>& __x, _CharT __y);
        -:  709:
        -:  710:#if _LIBCPP_STD_VER >= 26
        -:  711:
        -:  712:template <class _CharT, class _Traits, class _Allocator>
        -:  713:_LIBCPP_HIDE_FROM_ABI constexpr basic_string<_CharT, _Traits, _Allocator>
        -:  714:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -:  715:          type_identity_t<basic_string_view<_CharT, _Traits>> __rhs);
        -:  716:
        -:  717:template <class _CharT, class _Traits, class _Allocator>
        -:  718:_LIBCPP_HIDE_FROM_ABI constexpr basic_string<_CharT, _Traits, _Allocator>
        -:  719:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, type_identity_t<basic_string_view<_CharT, _Traits>> __rhs);
        -:  720:
        -:  721:template <class _CharT, class _Traits, class _Allocator>
        -:  722:_LIBCPP_HIDE_FROM_ABI constexpr basic_string<_CharT, _Traits, _Allocator>
        -:  723:operator+(type_identity_t<basic_string_view<_CharT, _Traits>> __lhs,
        -:  724:          const basic_string<_CharT, _Traits, _Allocator>& __rhs);
        -:  725:
        -:  726:template <class _CharT, class _Traits, class _Allocator>
        -:  727:_LIBCPP_HIDE_FROM_ABI constexpr basic_string<_CharT, _Traits, _Allocator>
        -:  728:operator+(type_identity_t<basic_string_view<_CharT, _Traits>> __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs);
        -:  729:
        -:  730:#endif
        -:  731:
        -:  732:extern template _LIBCPP_EXPORTED_FROM_ABI string operator+
        -:  733:    <char, char_traits<char>, allocator<char> >(char const*, string const&);
        -:  734:
        -:  735:template <class _Iter>
        -:  736:struct __string_is_trivial_iterator : public false_type {};
        -:  737:
        -:  738:template <class _Tp>
        -:  739:struct __string_is_trivial_iterator<_Tp*> : public is_arithmetic<_Tp> {};
        -:  740:
        -:  741:template <class _Iter>
        -:  742:struct __string_is_trivial_iterator<__wrap_iter<_Iter> > : public __string_is_trivial_iterator<_Iter> {};
        -:  743:
        -:  744:template <class _CharT, class _Traits, class _Tp>
        -:  745:struct __can_be_converted_to_string_view
        -:  746:    : public _BoolConstant< is_convertible<const _Tp&, basic_string_view<_CharT, _Traits> >::value &&
        -:  747:                            !is_convertible<const _Tp&, const _CharT*>::value > {};
        -:  748:
        -:  749:struct __uninitialized_size_tag {};
        -:  750:struct __init_with_sentinel_tag {};
        -:  751:
        -:  752:template <class _CharT, class _Traits, class _Allocator>
        -:  753:class basic_string {
        -:  754:private:
        -:  755:  using __default_allocator_type = allocator<_CharT>;
        -:  756:
        -:  757:public:
        -:  758:  typedef basic_string __self;
        -:  759:  typedef basic_string_view<_CharT, _Traits> __self_view;
        -:  760:  typedef _Traits traits_type;
        -:  761:  typedef _CharT value_type;
        -:  762:  typedef _Allocator allocator_type;
        -:  763:  typedef allocator_traits<allocator_type> __alloc_traits;
        -:  764:  typedef typename __alloc_traits::size_type size_type;
        -:  765:  typedef typename __alloc_traits::difference_type difference_type;
        -:  766:  typedef value_type& reference;
        -:  767:  typedef const value_type& const_reference;
        -:  768:  typedef typename __alloc_traits::pointer pointer;
        -:  769:  typedef typename __alloc_traits::const_pointer const_pointer;
        -:  770:
        -:  771:  // A basic_string contains the following members which may be trivially relocatable:
        -:  772:  // - pointer: is currently assumed to be trivially relocatable, but is still checked in case that changes
        -:  773:  // - size_type: is always trivially relocatable, since it has to be an integral type
        -:  774:  // - value_type: is always trivially relocatable, since it has to be trivial
        -:  775:  // - unsigned char: is a fundamental type, so it's trivially relocatable
        -:  776:  // - allocator_type: may or may not be trivially relocatable, so it's checked
        -:  777:  //
        -:  778:  // This string implementation doesn't contain any references into itself. It only contains a bit that says whether
        -:  779:  // it is in small or large string mode, so the entire structure is trivially relocatable if its members are.
        -:  780:#if !defined(_LIBCPP_HAS_NO_ASAN) && defined(_LIBCPP_INSTRUMENTED_WITH_ASAN)
        -:  781:  // When compiling with AddressSanitizer (ASan), basic_string cannot be trivially
        -:  782:  // relocatable. Because the object's memory might be poisoned when its content
        -:  783:  // is kept inside objects memory (short string optimization), instead of in allocated
        -:  784:  // external memory. In such cases, the destructor is responsible for unpoisoning
        -:  785:  // the memory to avoid triggering false positives.
        -:  786:  // Therefore it's crucial to ensure the destructor is called.
        -:  787:  using __trivially_relocatable = void;
        -:  788:#else
        -:  789:  using __trivially_relocatable = __conditional_t<
        -:  790:      __libcpp_is_trivially_relocatable<allocator_type>::value && __libcpp_is_trivially_relocatable<pointer>::value,
        -:  791:      basic_string,
        -:  792:      void>;
        -:  793:#endif
        -:  794:#if !defined(_LIBCPP_HAS_NO_ASAN) && defined(_LIBCPP_INSTRUMENTED_WITH_ASAN)
        -:  795:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 pointer __asan_volatile_wrapper(pointer const& __ptr) const {
        -:  796:    if (__libcpp_is_constant_evaluated())
        -:  797:      return __ptr;
        -:  798:
        -:  799:    pointer volatile __copy_ptr = __ptr;
        -:  800:
        -:  801:    return const_cast<pointer&>(__copy_ptr);
        -:  802:  }
        -:  803:
        -:  804:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_pointer
        -:  805:  __asan_volatile_wrapper(const_pointer const& __ptr) const {
        -:  806:    if (__libcpp_is_constant_evaluated())
        -:  807:      return __ptr;
        -:  808:
        -:  809:    const_pointer volatile __copy_ptr = __ptr;
        -:  810:
        -:  811:    return const_cast<const_pointer&>(__copy_ptr);
        -:  812:  }
        -:  813:#  define _LIBCPP_ASAN_VOLATILE_WRAPPER(PTR) __asan_volatile_wrapper(PTR)
        -:  814:#else
        -:  815:#  define _LIBCPP_ASAN_VOLATILE_WRAPPER(PTR) PTR
        -:  816:#endif
        -:  817:
        -:  818:  static_assert(!is_array<value_type>::value, "Character type of basic_string must not be an array");
        -:  819:  static_assert(is_standard_layout<value_type>::value, "Character type of basic_string must be standard-layout");
        -:  820:  static_assert(is_trivial<value_type>::value, "Character type of basic_string must be trivial");
        -:  821:  static_assert(is_same<_CharT, typename traits_type::char_type>::value,
        -:  822:                "traits_type::char_type must be the same type as CharT");
        -:  823:  static_assert(is_same<typename allocator_type::value_type, value_type>::value,
        -:  824:                "Allocator::value_type must be same type as value_type");
        -:  825:  static_assert(__check_valid_allocator<allocator_type>::value, "");
        -:  826:
        -:  827:#ifdef _LIBCPP_ABI_BOUNDED_ITERATORS_IN_STRING
        -:  828:  // Users might provide custom allocators, and prior to C++20 we have no existing way to detect whether the allocator's
        -:  829:  // pointer type is contiguous (though it has to be by the Standard). Using the wrapper type ensures the iterator is
        -:  830:  // considered contiguous.
        -:  831:  typedef __bounded_iter<__wrap_iter<pointer>> iterator;
        -:  832:  typedef __bounded_iter<__wrap_iter<const_pointer>> const_iterator;
        -:  833:#else
        -:  834:  typedef __wrap_iter<pointer> iterator;
        -:  835:  typedef __wrap_iter<const_pointer> const_iterator;
        -:  836:#endif
        -:  837:  typedef std::reverse_iterator<iterator> reverse_iterator;
        -:  838:  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        -:  839:
        -:  840:private:
        -:  841:  static_assert(CHAR_BIT == 8, "This implementation assumes that one byte contains 8 bits");
        -:  842:
        -:  843:#ifdef _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  844:
        -:  845:  struct __long {
        -:  846:    pointer __data_;
        -:  847:    size_type __size_;
        -:  848:    size_type __cap_ : sizeof(size_type) * CHAR_BIT - 1;
        -:  849:    size_type __is_long_ : 1;
        -:  850:  };
        -:  851:
        -:  852:  enum { __min_cap = (sizeof(__long) - 1) / sizeof(value_type) > 2 ? (sizeof(__long) - 1) / sizeof(value_type) : 2 };
        -:  853:
        -:  854:  struct __short {
        -:  855:    value_type __data_[__min_cap];
        -:  856:    unsigned char __padding_[sizeof(value_type) - 1];
        -:  857:    unsigned char __size_    : 7;
        -:  858:    unsigned char __is_long_ : 1;
        -:  859:  };
        -:  860:
        -:  861:  // The __endian_factor is required because the field we use to store the size
        -:  862:  // has one fewer bit than it would if it were not a bitfield.
        -:  863:  //
        -:  864:  // If the LSB is used to store the short-flag in the short string representation,
        -:  865:  // we have to multiply the size by two when it is stored and divide it by two when
        -:  866:  // it is loaded to make sure that we always store an even number. In the long string
        -:  867:  // representation, we can ignore this because we can assume that we always allocate
        -:  868:  // an even amount of value_types.
        -:  869:  //
        -:  870:  // If the MSB is used for the short-flag, the max_size() is numeric_limits<size_type>::max() / 2.
        -:  871:  // This does not impact the short string representation, since we never need the MSB
        -:  872:  // for representing the size of a short string anyway.
        -:  873:
        -:  874:#  ifdef _LIBCPP_BIG_ENDIAN
        -:  875:  static const size_type __endian_factor = 2;
        -:  876:#  else
        -:  877:  static const size_type __endian_factor = 1;
        -:  878:#  endif
        -:  879:
        -:  880:#else // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  881:
        -:  882:#  ifdef _LIBCPP_BIG_ENDIAN
        -:  883:  static const size_type __endian_factor = 1;
        -:  884:#  else
        -:  885:  static const size_type __endian_factor = 2;
        -:  886:#  endif
        -:  887:
        -:  888:  // Attribute 'packed' is used to keep the layout compatible with the
        -:  889:  // previous definition that did not use bit fields. This is because on
        -:  890:  // some platforms bit fields have a default size rather than the actual
        -:  891:  // size used, e.g., it is 4 bytes on AIX. See D128285 for details.
        -:  892:  struct __long {
        -:  893:    struct _LIBCPP_PACKED {
        -:  894:      size_type __is_long_ : 1;
        -:  895:      size_type __cap_ : sizeof(size_type) * CHAR_BIT - 1;
        -:  896:    };
        -:  897:    size_type __size_;
        -:  898:    pointer __data_;
        -:  899:  };
        -:  900:
        -:  901:  enum { __min_cap = (sizeof(__long) - 1) / sizeof(value_type) > 2 ? (sizeof(__long) - 1) / sizeof(value_type) : 2 };
        -:  902:
        -:  903:  struct __short {
        -:  904:    struct _LIBCPP_PACKED {
        -:  905:      unsigned char __is_long_ : 1;
        -:  906:      unsigned char __size_    : 7;
        -:  907:    };
        -:  908:    char __padding_[sizeof(value_type) - 1];
        -:  909:    value_type __data_[__min_cap];
        -:  910:  };
        -:  911:
        -:  912:#endif // _LIBCPP_ABI_ALTERNATE_STRING_LAYOUT
        -:  913:
        -:  914:  static_assert(sizeof(__short) == (sizeof(value_type) * (__min_cap + 1)), "__short has an unexpected size.");
        -:  915:
        -:  916:  union __rep {
        -:  917:    __short __s;
        -:  918:    __long __l;
        -:  919:  };
        -:  920:
        -:  921:  __compressed_pair<__rep, allocator_type> __r_;
        -:  922:
        -:  923:  // Construct a string with the given allocator and enough storage to hold `__size` characters, but
        -:  924:  // don't initialize the characters. The contents of the string, including the null terminator, must be
        -:  925:  // initialized separately.
        -:  926:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 explicit basic_string(
        -:  927:      __uninitialized_size_tag, size_type __size, const allocator_type& __a)
        -:  928:      : __r_(__default_init_tag(), __a) {
        -:  929:    if (__size > max_size())
        -:  930:      __throw_length_error();
        -:  931:    if (__fits_in_sso(__size)) {
        -:  932:      __r_.first() = __rep();
        -:  933:      __set_short_size(__size);
        -:  934:    } else {
        -:  935:      auto __capacity   = __recommend(__size) + 1;
        -:  936:      auto __allocation = __alloc_traits::allocate(__alloc(), __capacity);
        -:  937:      __begin_lifetime(__allocation, __capacity);
        -:  938:      __set_long_cap(__capacity);
        -:  939:      __set_long_pointer(__allocation);
        -:  940:      __set_long_size(__size);
        -:  941:    }
        -:  942:    __annotate_new(__size);
        -:  943:  }
        -:  944:
        -:  945:  template <class _Iter, class _Sent>
        -:  946:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20
        -:  947:  basic_string(__init_with_sentinel_tag, _Iter __first, _Sent __last, const allocator_type& __a)
        -:  948:      : __r_(__default_init_tag(), __a) {
        -:  949:    __init_with_sentinel(std::move(__first), std::move(__last));
        -:  950:  }
        -:  951:
        -:  952:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator __make_iterator(pointer __p) {
        -:  953:#ifdef _LIBCPP_ABI_BOUNDED_ITERATORS_IN_STRING
        -:  954:    // Bound the iterator according to the size (and not the capacity, unlike vector).
        -:  955:    //
        -:  956:    // By the Standard, string iterators are generally not guaranteed to stay valid when the container is modified,
        -:  957:    // regardless of whether reallocation occurs. This allows us to check for out-of-bounds accesses using logical size,
        -:  958:    // a stricter check, since correct code can never rely on being able to access newly-added elements via an existing
        -:  959:    // iterator.
        -:  960:    return std::__make_bounded_iter(
        -:  961:        std::__wrap_iter<pointer>(__p),
        -:  962:        std::__wrap_iter<pointer>(__get_pointer()),
        -:  963:        std::__wrap_iter<pointer>(__get_pointer() + size()));
        -:  964:#else
        -:  965:    return iterator(__p);
        -:  966:#endif // _LIBCPP_ABI_BOUNDED_ITERATORS_IN_STRING
        -:  967:  }
        -:  968:
        -:  969:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_iterator __make_const_iterator(const_pointer __p) const {
        -:  970:#ifdef _LIBCPP_ABI_BOUNDED_ITERATORS_IN_STRING
        -:  971:    // Bound the iterator according to the size (and not the capacity, unlike vector).
        -:  972:    return std::__make_bounded_iter(
        -:  973:        std::__wrap_iter<const_pointer>(__p),
        -:  974:        std::__wrap_iter<const_pointer>(__get_pointer()),
        -:  975:        std::__wrap_iter<const_pointer>(__get_pointer() + size()));
        -:  976:#else
        -:  977:    return const_iterator(__p);
        -:  978:#endif // _LIBCPP_ABI_BOUNDED_ITERATORS_IN_STRING
        -:  979:  }
        -:  980:
        -:  981:public:
        -:  982:  _LIBCPP_TEMPLATE_DATA_VIS static const size_type npos = -1;
        -:  983:
      604:  984:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string()
        -:  985:      _NOEXCEPT_(is_nothrow_default_constructible<allocator_type>::value)
      604:  986:      : __r_(__value_init_tag(), __default_init_tag()) {
      302:  987:    __annotate_new(0);
      604:  988:  }
        -:  989:
        -:  990:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 explicit basic_string(const allocator_type& __a)
        -:  991:#if _LIBCPP_STD_VER <= 14
        -:  992:      _NOEXCEPT_(is_nothrow_copy_constructible<allocator_type>::value)
        -:  993:#else
        -:  994:      _NOEXCEPT
        -:  995:#endif
        -:  996:      : __r_(__value_init_tag(), __a) {
        -:  997:    __annotate_new(0);
        -:  998:  }
        -:  999:
        -: 1000:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS basic_string(const basic_string& __str)
        -: 1001:      : __r_(__default_init_tag(), __alloc_traits::select_on_container_copy_construction(__str.__alloc())) {
        -: 1002:    if (!__str.__is_long()) {
        -: 1003:      __r_.first() = __str.__r_.first();
        -: 1004:      __annotate_new(__get_short_size());
        -: 1005:    } else
        -: 1006:      __init_copy_ctor_external(std::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
        -: 1007:  }
        -: 1008:
        -: 1009:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS
        -: 1010:  basic_string(const basic_string& __str, const allocator_type& __a)
        -: 1011:      : __r_(__default_init_tag(), __a) {
        -: 1012:    if (!__str.__is_long()) {
        -: 1013:      __r_.first() = __str.__r_.first();
        -: 1014:      __annotate_new(__get_short_size());
        -: 1015:    } else
        -: 1016:      __init_copy_ctor_external(std::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
        -: 1017:  }
        -: 1018:
        -: 1019:#ifndef _LIBCPP_CXX03_LANG
      470: 1020:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(basic_string&& __str)
        -: 1021:#  if _LIBCPP_STD_VER <= 14
        -: 1022:      _NOEXCEPT_(is_nothrow_move_constructible<allocator_type>::value)
        -: 1023:#  else
        -: 1024:      _NOEXCEPT
        -: 1025:#  endif
        -: 1026:      // Turning off ASan instrumentation for variable initialization with _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS
        -: 1027:      // does not work consistently during initialization of __r_, so we instead unpoison __str's memory manually first.
        -: 1028:      // __str's memory needs to be unpoisoned only in the case where it's a short string.
      705: 1029:      : __r_([](basic_string& __s) -> decltype(__s.__r_)&& {
      235: 1030:          if (!__s.__is_long())
       54: 1031:            __s.__annotate_delete();
      235: 1032:          return std::move(__s.__r_);
      470: 1033:        }(__str)) {
      235: 1034:    __str.__r_.first() = __rep();
      235: 1035:    __str.__annotate_new(0);
      235: 1036:    if (!__is_long())
       54: 1037:      __annotate_new(size());
      470: 1038:  }
        -: 1039:
        -: 1040:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(basic_string&& __str, const allocator_type& __a)
        -: 1041:      : __r_(__default_init_tag(), __a) {
        -: 1042:    if (__str.__is_long() && __a != __str.__alloc()) // copy, not move
        -: 1043:      __init(std::__to_address(__str.__get_long_pointer()), __str.__get_long_size());
        -: 1044:    else {
        -: 1045:      if (__libcpp_is_constant_evaluated())
        -: 1046:        __r_.first() = __rep();
        -: 1047:      if (!__str.__is_long())
        -: 1048:        __str.__annotate_delete();
        -: 1049:      __r_.first()       = __str.__r_.first();
        -: 1050:      __str.__r_.first() = __rep();
        -: 1051:      __str.__annotate_new(0);
        -: 1052:      if (!__is_long() && this != &__str)
        -: 1053:        __annotate_new(size());
        -: 1054:    }
        -: 1055:  }
        -: 1056:#endif // _LIBCPP_CXX03_LANG
        -: 1057:
        -: 1058:  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
      228: 1059:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(const _CharT* __s)
      228: 1060:      : __r_(__default_init_tag(), __default_init_tag()) {
        -: 1061:    _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "basic_string(const char*) detected nullptr");
      114: 1062:    __init(__s, traits_type::length(__s));
      228: 1063:  }
        -: 1064:
        -: 1065:  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
        -: 1066:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(const _CharT* __s, const _Allocator& __a)
        -: 1067:      : __r_(__default_init_tag(), __a) {
        -: 1068:    _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "basic_string(const char*, allocator) detected nullptr");
        -: 1069:    __init(__s, traits_type::length(__s));
        -: 1070:  }
        -: 1071:
        -: 1072:#if _LIBCPP_STD_VER >= 23
        -: 1073:  basic_string(nullptr_t) = delete;
        -: 1074:#endif
        -: 1075:
        -: 1076:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(const _CharT* __s, size_type __n)
        -: 1077:      : __r_(__default_init_tag(), __default_init_tag()) {
        -: 1078:    _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "basic_string(const char*, n) detected nullptr");
        -: 1079:    __init(__s, __n);
        -: 1080:  }
        -: 1081:
        -: 1082:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20
        -: 1083:  basic_string(const _CharT* __s, size_type __n, const _Allocator& __a)
        -: 1084:      : __r_(__default_init_tag(), __a) {
        -: 1085:    _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "basic_string(const char*, n, allocator) detected nullptr");
        -: 1086:    __init(__s, __n);
        -: 1087:  }
        -: 1088:
    #####: 1089:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(size_type __n, _CharT __c)
    #####: 1090:      : __r_(__default_init_tag(), __default_init_tag()) {
    #####: 1091:    __init(__n, __c);
    #####: 1092:  }
        -: 1093:
        -: 1094:#if _LIBCPP_STD_VER >= 23
        -: 1095:  _LIBCPP_HIDE_FROM_ABI constexpr basic_string(
        -: 1096:      basic_string&& __str, size_type __pos, const _Allocator& __alloc = _Allocator())
        -: 1097:      : basic_string(std::move(__str), __pos, npos, __alloc) {}
        -: 1098:
        -: 1099:  _LIBCPP_HIDE_FROM_ABI constexpr basic_string(
        -: 1100:      basic_string&& __str, size_type __pos, size_type __n, const _Allocator& __alloc = _Allocator())
        -: 1101:      : __r_(__default_init_tag(), __alloc) {
        -: 1102:    if (__pos > __str.size())
        -: 1103:      __throw_out_of_range();
        -: 1104:
        -: 1105:    auto __len = std::min<size_type>(__n, __str.size() - __pos);
        -: 1106:    if (__alloc_traits::is_always_equal::value || __alloc == __str.__alloc()) {
        -: 1107:      __move_assign(std::move(__str), __pos, __len);
        -: 1108:    } else {
        -: 1109:      // Perform a copy because the allocators are not compatible.
        -: 1110:      __init(__str.data() + __pos, __len);
        -: 1111:    }
        -: 1112:  }
        -: 1113:#endif
        -: 1114:
        -: 1115:  template <__enable_if_t<__is_allocator<_Allocator>::value, int> = 0>
        -: 1116:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(size_type __n, _CharT __c, const _Allocator& __a)
        -: 1117:      : __r_(__default_init_tag(), __a) {
        -: 1118:    __init(__n, __c);
        -: 1119:  }
        -: 1120:
        -: 1121:  _LIBCPP_CONSTEXPR_SINCE_CXX20
        -: 1122:  basic_string(const basic_string& __str, size_type __pos, size_type __n, const _Allocator& __a = _Allocator())
        -: 1123:      : __r_(__default_init_tag(), __a) {
        -: 1124:    size_type __str_sz = __str.size();
        -: 1125:    if (__pos > __str_sz)
        -: 1126:      __throw_out_of_range();
        -: 1127:    __init(__str.data() + __pos, std::min(__n, __str_sz - __pos));
        -: 1128:  }
        -: 1129:
        -: 1130:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20
        -: 1131:  basic_string(const basic_string& __str, size_type __pos, const _Allocator& __a = _Allocator())
        -: 1132:      : __r_(__default_init_tag(), __a) {
        -: 1133:    size_type __str_sz = __str.size();
        -: 1134:    if (__pos > __str_sz)
        -: 1135:      __throw_out_of_range();
        -: 1136:    __init(__str.data() + __pos, __str_sz - __pos);
        -: 1137:  }
        -: 1138:
        -: 1139:  template <class _Tp,
        -: 1140:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1141:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1142:                          int> = 0>
        -: 1143:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20
        -: 1144:  basic_string(const _Tp& __t, size_type __pos, size_type __n, const allocator_type& __a = allocator_type())
        -: 1145:      : __r_(__default_init_tag(), __a) {
        -: 1146:    __self_view __sv0 = __t;
        -: 1147:    __self_view __sv  = __sv0.substr(__pos, __n);
        -: 1148:    __init(__sv.data(), __sv.size());
        -: 1149:  }
        -: 1150:
        -: 1151:  template <class _Tp,
        -: 1152:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1153:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1154:                          int> = 0>
        -: 1155:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 explicit basic_string(const _Tp& __t)
        -: 1156:      : __r_(__default_init_tag(), __default_init_tag()) {
        -: 1157:    __self_view __sv = __t;
        -: 1158:    __init(__sv.data(), __sv.size());
        -: 1159:  }
        -: 1160:
        -: 1161:  template <class _Tp,
        -: 1162:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1163:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1164:                          int> = 0>
        -: 1165:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -: 1166:  _LIBCPP_CONSTEXPR_SINCE_CXX20 explicit basic_string(const _Tp& __t, const allocator_type& __a)
        -: 1167:      : __r_(__default_init_tag(), __a) {
        -: 1168:    __self_view __sv = __t;
        -: 1169:    __init(__sv.data(), __sv.size());
        -: 1170:  }
        -: 1171:
        -: 1172:  template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> = 0>
        -: 1173:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(_InputIterator __first, _InputIterator __last)
        -: 1174:      : __r_(__default_init_tag(), __default_init_tag()) {
        -: 1175:    __init(__first, __last);
        -: 1176:  }
        -: 1177:
        -: 1178:  template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> = 0>
        -: 1179:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20
        -: 1180:  basic_string(_InputIterator __first, _InputIterator __last, const allocator_type& __a)
        -: 1181:      : __r_(__default_init_tag(), __a) {
        -: 1182:    __init(__first, __last);
        -: 1183:  }
        -: 1184:
        -: 1185:#if _LIBCPP_STD_VER >= 23
        -: 1186:  template <_ContainerCompatibleRange<_CharT> _Range>
        -: 1187:  _LIBCPP_HIDE_FROM_ABI constexpr basic_string(
        -: 1188:      from_range_t, _Range&& __range, const allocator_type& __a = allocator_type())
        -: 1189:      : __r_(__default_init_tag(), __a) {
        -: 1190:    if constexpr (ranges::forward_range<_Range> || ranges::sized_range<_Range>) {
        -: 1191:      __init_with_size(ranges::begin(__range), ranges::end(__range), ranges::distance(__range));
        -: 1192:    } else {
        -: 1193:      __init_with_sentinel(ranges::begin(__range), ranges::end(__range));
        -: 1194:    }
        -: 1195:  }
        -: 1196:#endif
        -: 1197:
        -: 1198:#ifndef _LIBCPP_CXX03_LANG
        -: 1199:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(initializer_list<_CharT> __il)
        -: 1200:      : __r_(__default_init_tag(), __default_init_tag()) {
        -: 1201:    __init(__il.begin(), __il.end());
        -: 1202:  }
        -: 1203:
        -: 1204:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string(initializer_list<_CharT> __il, const _Allocator& __a)
        -: 1205:      : __r_(__default_init_tag(), __a) {
        -: 1206:    __init(__il.begin(), __il.end());
        -: 1207:  }
        -: 1208:#endif // _LIBCPP_CXX03_LANG
        -: 1209:
        -: 1210:  inline _LIBCPP_CONSTEXPR_SINCE_CXX20 ~basic_string() {
        -: 1211:    __annotate_delete();
        -: 1212:    if (__is_long())
        -: 1213:      __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 1214:  }
        -: 1215:
        -: 1216:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 operator __self_view() const _NOEXCEPT {
        -: 1217:    return __self_view(data(), size());
        -: 1218:  }
        -: 1219:
        -: 1220:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS basic_string&
        -: 1221:  operator=(const basic_string& __str);
        -: 1222:
        -: 1223:  template <class _Tp,
        -: 1224:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1225:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1226:                          int> = 0>
        -: 1227:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& operator=(const _Tp& __t) {
        -: 1228:    __self_view __sv = __t;
        -: 1229:    return assign(__sv);
        -: 1230:  }
        -: 1231:
        -: 1232:#ifndef _LIBCPP_CXX03_LANG
        -: 1233:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1234:  operator=(basic_string&& __str) noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
        -: 1235:    __move_assign(__str, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
        -: 1236:    return *this;
        -: 1237:  }
        -: 1238:
        -: 1239:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& operator=(initializer_list<value_type> __il) {
        -: 1240:    return assign(__il.begin(), __il.size());
        -: 1241:  }
        -: 1242:#endif
        -: 1243:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& operator=(const value_type* __s) {
        -: 1244:    return assign(__s);
        -: 1245:  }
        -: 1246:#if _LIBCPP_STD_VER >= 23
        -: 1247:  basic_string& operator=(nullptr_t) = delete;
        -: 1248:#endif
        -: 1249:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& operator=(value_type __c);
        -: 1250:
        -: 1251:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator begin() _NOEXCEPT {
        -: 1252:    return __make_iterator(__get_pointer());
        -: 1253:  }
        -: 1254:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_iterator begin() const _NOEXCEPT {
        -: 1255:    return __make_const_iterator(__get_pointer());
        -: 1256:  }
        -: 1257:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator end() _NOEXCEPT {
        -: 1258:    return __make_iterator(__get_pointer() + size());
        -: 1259:  }
        -: 1260:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_iterator end() const _NOEXCEPT {
        -: 1261:    return __make_const_iterator(__get_pointer() + size());
        -: 1262:  }
        -: 1263:
        -: 1264:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 reverse_iterator rbegin() _NOEXCEPT {
        -: 1265:    return reverse_iterator(end());
        -: 1266:  }
        -: 1267:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_reverse_iterator rbegin() const _NOEXCEPT {
        -: 1268:    return const_reverse_iterator(end());
        -: 1269:  }
        -: 1270:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 reverse_iterator rend() _NOEXCEPT {
        -: 1271:    return reverse_iterator(begin());
        -: 1272:  }
        -: 1273:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_reverse_iterator rend() const _NOEXCEPT {
        -: 1274:    return const_reverse_iterator(begin());
        -: 1275:  }
        -: 1276:
        -: 1277:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_iterator cbegin() const _NOEXCEPT { return begin(); }
        -: 1278:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_iterator cend() const _NOEXCEPT { return end(); }
        -: 1279:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_reverse_iterator crbegin() const _NOEXCEPT {
        -: 1280:    return rbegin();
        -: 1281:  }
        -: 1282:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_reverse_iterator crend() const _NOEXCEPT { return rend(); }
        -: 1283:
     1743: 1284:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type size() const _NOEXCEPT {
     1743: 1285:    return __is_long() ? __get_long_size() : __get_short_size();
        -: 1286:  }
        -: 1287:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type length() const _NOEXCEPT { return size(); }
        -: 1288:
        -: 1289:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type max_size() const _NOEXCEPT {
        -: 1290:    size_type __m = __alloc_traits::max_size(__alloc());
        -: 1291:    if (__m <= std::numeric_limits<size_type>::max() / 2) {
        -: 1292:      return __m - __alignment;
        -: 1293:    } else {
        -: 1294:      bool __uses_lsb = __endian_factor == 2;
        -: 1295:      return __uses_lsb ? __m - __alignment : (__m / 2) - __alignment;
        -: 1296:    }
        -: 1297:  }
        -: 1298:
        -: 1299:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type capacity() const _NOEXCEPT {
        -: 1300:    return (__is_long() ? __get_long_cap() : static_cast<size_type>(__min_cap)) - 1;
        -: 1301:  }
        -: 1302:
        -: 1303:  _LIBCPP_CONSTEXPR_SINCE_CXX20 void resize(size_type __n, value_type __c);
        -: 1304:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void resize(size_type __n) { resize(__n, value_type()); }
        -: 1305:
        -: 1306:  _LIBCPP_CONSTEXPR_SINCE_CXX20 void reserve(size_type __requested_capacity);
        -: 1307:
        -: 1308:#if _LIBCPP_STD_VER >= 23
        -: 1309:  template <class _Op>
        -: 1310:  _LIBCPP_HIDE_FROM_ABI constexpr void resize_and_overwrite(size_type __n, _Op __op) {
        -: 1311:    __resize_default_init(__n);
        -: 1312:    __erase_to_end(std::move(__op)(data(), _LIBCPP_AUTO_CAST(__n)));
        -: 1313:  }
        -: 1314:#endif
        -: 1315:
        -: 1316:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __resize_default_init(size_type __n);
        -: 1317:
        -: 1318:#if _LIBCPP_STD_VER < 26 || defined(_LIBCPP_ENABLE_CXX26_REMOVED_STRING_RESERVE)
        -: 1319:  _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_HIDE_FROM_ABI void reserve() _NOEXCEPT { shrink_to_fit(); }
        -: 1320:#endif
        -: 1321:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void shrink_to_fit() _NOEXCEPT;
        -: 1322:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void clear() _NOEXCEPT;
        -: 1323:
        -: 1324:  _LIBCPP_NODISCARD _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 bool empty() const _NOEXCEPT {
        -: 1325:    return size() == 0;
        -: 1326:  }
        -: 1327:
        -: 1328:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_reference operator[](size_type __pos) const _NOEXCEPT {
        -: 1329:    _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__pos <= size(), "string index out of bounds");
        -: 1330:    if (__builtin_constant_p(__pos) && !__fits_in_sso(__pos)) {
        -: 1331:      return *(__get_long_pointer() + __pos);
        -: 1332:    }
        -: 1333:    return *(data() + __pos);
        -: 1334:  }
        -: 1335:
        -: 1336:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 reference operator[](size_type __pos) _NOEXCEPT {
        -: 1337:    _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__pos <= size(), "string index out of bounds");
        -: 1338:    if (__builtin_constant_p(__pos) && !__fits_in_sso(__pos)) {
        -: 1339:      return *(__get_long_pointer() + __pos);
        -: 1340:    }
        -: 1341:    return *(__get_pointer() + __pos);
        -: 1342:  }
        -: 1343:
        -: 1344:  _LIBCPP_CONSTEXPR_SINCE_CXX20 const_reference at(size_type __n) const;
        -: 1345:  _LIBCPP_CONSTEXPR_SINCE_CXX20 reference at(size_type __n);
        -: 1346:
        -: 1347:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& operator+=(const basic_string& __str) {
        -: 1348:    return append(__str);
        -: 1349:  }
        -: 1350:
        -: 1351:  template <class _Tp,
        -: 1352:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1353:                              !__is_same_uncvref<_Tp, basic_string >::value,
        -: 1354:                          int> = 0>
        -: 1355:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1356:  operator+=(const _Tp& __t) {
        -: 1357:    __self_view __sv = __t;
        -: 1358:    return append(__sv);
        -: 1359:  }
        -: 1360:
        -: 1361:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& operator+=(const value_type* __s) {
        -: 1362:    return append(__s);
        -: 1363:  }
        -: 1364:
        -: 1365:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& operator+=(value_type __c) {
        -: 1366:    push_back(__c);
        -: 1367:    return *this;
        -: 1368:  }
        -: 1369:
        -: 1370:#ifndef _LIBCPP_CXX03_LANG
        -: 1371:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& operator+=(initializer_list<value_type> __il) {
        -: 1372:    return append(__il);
        -: 1373:  }
        -: 1374:#endif // _LIBCPP_CXX03_LANG
        -: 1375:
        -: 1376:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& append(const basic_string& __str) {
        -: 1377:    return append(__str.data(), __str.size());
        -: 1378:  }
        -: 1379:
        -: 1380:  template <class _Tp,
        -: 1381:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1382:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1383:                          int> = 0>
        -: 1384:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1385:  append(const _Tp& __t) {
        -: 1386:    __self_view __sv = __t;
        -: 1387:    return append(__sv.data(), __sv.size());
        -: 1388:  }
        -: 1389:
        -: 1390:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& append(const basic_string& __str, size_type __pos, size_type __n = npos);
        -: 1391:
        -: 1392:  template <class _Tp,
        -: 1393:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1394:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1395:                          int> = 0>
        -: 1396:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20
        -: 1397:
        -: 1398:  basic_string&
        -: 1399:  append(const _Tp& __t, size_type __pos, size_type __n = npos);
        -: 1400:
        -: 1401:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& append(const value_type* __s, size_type __n);
        -: 1402:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& append(const value_type* __s);
        -: 1403:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& append(size_type __n, value_type __c);
        -: 1404:
        -: 1405:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __append_default_init(size_type __n);
        -: 1406:
        -: 1407:  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
        -: 1408:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1409:  append(_InputIterator __first, _InputIterator __last) {
        -: 1410:    const basic_string __temp(__first, __last, __alloc());
        -: 1411:    append(__temp.data(), __temp.size());
        -: 1412:    return *this;
        -: 1413:  }
        -: 1414:
        -: 1415:  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
        -: 1416:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1417:  append(_ForwardIterator __first, _ForwardIterator __last);
        -: 1418:
        -: 1419:#if _LIBCPP_STD_VER >= 23
        -: 1420:  template <_ContainerCompatibleRange<_CharT> _Range>
        -: 1421:  _LIBCPP_HIDE_FROM_ABI constexpr basic_string& append_range(_Range&& __range) {
        -: 1422:    insert_range(end(), std::forward<_Range>(__range));
        -: 1423:    return *this;
        -: 1424:  }
        -: 1425:#endif
        -: 1426:
        -: 1427:#ifndef _LIBCPP_CXX03_LANG
        -: 1428:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& append(initializer_list<value_type> __il) {
        -: 1429:    return append(__il.begin(), __il.size());
        -: 1430:  }
        -: 1431:#endif // _LIBCPP_CXX03_LANG
        -: 1432:
        -: 1433:  _LIBCPP_CONSTEXPR_SINCE_CXX20 void push_back(value_type __c);
        -: 1434:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void pop_back();
        -: 1435:
        -: 1436:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 reference front() _NOEXCEPT {
        -: 1437:    _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(!empty(), "string::front(): string is empty");
        -: 1438:    return *__get_pointer();
        -: 1439:  }
        -: 1440:
        -: 1441:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_reference front() const _NOEXCEPT {
        -: 1442:    _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(!empty(), "string::front(): string is empty");
        -: 1443:    return *data();
        -: 1444:  }
        -: 1445:
        -: 1446:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 reference back() _NOEXCEPT {
        -: 1447:    _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(!empty(), "string::back(): string is empty");
        -: 1448:    return *(__get_pointer() + size() - 1);
        -: 1449:  }
        -: 1450:
        -: 1451:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_reference back() const _NOEXCEPT {
        -: 1452:    _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(!empty(), "string::back(): string is empty");
        -: 1453:    return *(data() + size() - 1);
        -: 1454:  }
        -: 1455:
        -: 1456:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1457:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1458:  assign(const _Tp& __t) {
        -: 1459:    __self_view __sv = __t;
        -: 1460:    return assign(__sv.data(), __sv.size());
        -: 1461:  }
        -: 1462:
        -: 1463:#if _LIBCPP_STD_VER >= 20
        -: 1464:  _LIBCPP_HIDE_FROM_ABI constexpr void __move_assign(basic_string&& __str, size_type __pos, size_type __len) {
        -: 1465:    // Pilfer the allocation from __str.
        -: 1466:    _LIBCPP_ASSERT_INTERNAL(__alloc() == __str.__alloc(), "__move_assign called with wrong allocator");
        -: 1467:    size_type __old_sz = __str.size();
        -: 1468:    if (!__str.__is_long())
        -: 1469:      __str.__annotate_delete();
        -: 1470:    __r_.first()       = __str.__r_.first();
        -: 1471:    __str.__r_.first() = __rep();
        -: 1472:    __str.__annotate_new(0);
        -: 1473:
        -: 1474:    _Traits::move(data(), data() + __pos, __len);
        -: 1475:    __set_size(__len);
        -: 1476:    _Traits::assign(data()[__len], value_type());
        -: 1477:
        -: 1478:    if (!__is_long()) {
        -: 1479:      __annotate_new(__len);
        -: 1480:    } else if (__old_sz > __len) {
        -: 1481:      __annotate_shrink(__old_sz);
        -: 1482:    }
        -: 1483:  }
        -: 1484:#endif
        -: 1485:
        -: 1486:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& assign(const basic_string& __str) {
        -: 1487:    return *this = __str;
        -: 1488:  }
        -: 1489:#ifndef _LIBCPP_CXX03_LANG
        -: 1490:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1491:  assign(basic_string&& __str) noexcept(__noexcept_move_assign_container<_Allocator, __alloc_traits>::value) {
        -: 1492:    *this = std::move(__str);
        -: 1493:    return *this;
        -: 1494:  }
        -: 1495:#endif
        -: 1496:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& assign(const basic_string& __str, size_type __pos, size_type __n = npos);
        -: 1497:
        -: 1498:  template <class _Tp,
        -: 1499:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1500:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1501:                          int> = 0>
        -: 1502:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1503:  assign(const _Tp& __t, size_type __pos, size_type __n = npos);
        -: 1504:
        -: 1505:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& assign(const value_type* __s, size_type __n);
        -: 1506:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& assign(const value_type* __s);
        -: 1507:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& assign(size_type __n, value_type __c);
        -: 1508:  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
        -: 1509:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1510:  assign(_InputIterator __first, _InputIterator __last);
        -: 1511:
        -: 1512:  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
        -: 1513:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1514:  assign(_ForwardIterator __first, _ForwardIterator __last);
        -: 1515:
        -: 1516:#if _LIBCPP_STD_VER >= 23
        -: 1517:  template <_ContainerCompatibleRange<_CharT> _Range>
        -: 1518:  _LIBCPP_HIDE_FROM_ABI constexpr basic_string& assign_range(_Range&& __range) {
        -: 1519:    if constexpr (__string_is_trivial_iterator<ranges::iterator_t<_Range>>::value &&
        -: 1520:                  (ranges::forward_range<_Range> || ranges::sized_range<_Range>)) {
        -: 1521:      size_type __n = static_cast<size_type>(ranges::distance(__range));
        -: 1522:      __assign_trivial(ranges::begin(__range), ranges::end(__range), __n);
        -: 1523:
        -: 1524:    } else {
        -: 1525:      __assign_with_sentinel(ranges::begin(__range), ranges::end(__range));
        -: 1526:    }
        -: 1527:
        -: 1528:    return *this;
        -: 1529:  }
        -: 1530:#endif
        -: 1531:
        -: 1532:#ifndef _LIBCPP_CXX03_LANG
        -: 1533:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& assign(initializer_list<value_type> __il) {
        -: 1534:    return assign(__il.begin(), __il.size());
        -: 1535:  }
        -: 1536:#endif // _LIBCPP_CXX03_LANG
        -: 1537:
        -: 1538:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1539:  insert(size_type __pos1, const basic_string& __str) {
        -: 1540:    return insert(__pos1, __str.data(), __str.size());
        -: 1541:  }
        -: 1542:
        -: 1543:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1544:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1545:  insert(size_type __pos1, const _Tp& __t) {
        -: 1546:    __self_view __sv = __t;
        -: 1547:    return insert(__pos1, __sv.data(), __sv.size());
        -: 1548:  }
        -: 1549:
        -: 1550:  template <class _Tp,
        -: 1551:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1552:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1553:                          int> = 0>
        -: 1554:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1555:  insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n = npos);
        -: 1556:
        -: 1557:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1558:  insert(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n = npos);
        -: 1559:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& insert(size_type __pos, const value_type* __s, size_type __n);
        -: 1560:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& insert(size_type __pos, const value_type* __s);
        -: 1561:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& insert(size_type __pos, size_type __n, value_type __c);
        -: 1562:  _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator insert(const_iterator __pos, value_type __c);
        -: 1563:
        -: 1564:#if _LIBCPP_STD_VER >= 23
        -: 1565:  template <_ContainerCompatibleRange<_CharT> _Range>
        -: 1566:  _LIBCPP_HIDE_FROM_ABI constexpr iterator insert_range(const_iterator __position, _Range&& __range) {
        -: 1567:    if constexpr (ranges::forward_range<_Range> || ranges::sized_range<_Range>) {
        -: 1568:      auto __n = static_cast<size_type>(ranges::distance(__range));
        -: 1569:      return __insert_with_size(__position, ranges::begin(__range), ranges::end(__range), __n);
        -: 1570:
        -: 1571:    } else {
        -: 1572:      basic_string __temp(from_range, std::forward<_Range>(__range), __alloc());
        -: 1573:      return insert(__position, __temp.data(), __temp.data() + __temp.size());
        -: 1574:    }
        -: 1575:  }
        -: 1576:#endif
        -: 1577:
        -: 1578:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator
        -: 1579:  insert(const_iterator __pos, size_type __n, value_type __c) {
        -: 1580:    difference_type __p = __pos - begin();
        -: 1581:    insert(static_cast<size_type>(__p), __n, __c);
        -: 1582:    return begin() + __p;
        -: 1583:  }
        -: 1584:
        -: 1585:  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
        -: 1586:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator
        -: 1587:  insert(const_iterator __pos, _InputIterator __first, _InputIterator __last);
        -: 1588:
        -: 1589:  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
        -: 1590:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator
        -: 1591:  insert(const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last);
        -: 1592:
        -: 1593:#ifndef _LIBCPP_CXX03_LANG
        -: 1594:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator
        -: 1595:  insert(const_iterator __pos, initializer_list<value_type> __il) {
        -: 1596:    return insert(__pos, __il.begin(), __il.end());
        -: 1597:  }
        -: 1598:#endif // _LIBCPP_CXX03_LANG
        -: 1599:
        -: 1600:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& erase(size_type __pos = 0, size_type __n = npos);
        -: 1601:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator erase(const_iterator __pos);
        -: 1602:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator erase(const_iterator __first, const_iterator __last);
        -: 1603:
        -: 1604:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1605:  replace(size_type __pos1, size_type __n1, const basic_string& __str) {
        -: 1606:    return replace(__pos1, __n1, __str.data(), __str.size());
        -: 1607:  }
        -: 1608:
        -: 1609:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1610:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1611:  replace(size_type __pos1, size_type __n1, const _Tp& __t) {
        -: 1612:    __self_view __sv = __t;
        -: 1613:    return replace(__pos1, __n1, __sv.data(), __sv.size());
        -: 1614:  }
        -: 1615:
        -: 1616:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1617:  replace(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2 = npos);
        -: 1618:
        -: 1619:  template <class _Tp,
        -: 1620:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1621:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1622:                          int> = 0>
        -: 1623:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1624:  replace(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2 = npos);
        -: 1625:
        -: 1626:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1627:  replace(size_type __pos, size_type __n1, const value_type* __s, size_type __n2);
        -: 1628:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& replace(size_type __pos, size_type __n1, const value_type* __s);
        -: 1629:  _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& replace(size_type __pos, size_type __n1, size_type __n2, value_type __c);
        -: 1630:
        -: 1631:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1632:  replace(const_iterator __i1, const_iterator __i2, const basic_string& __str) {
        -: 1633:    return replace(
        -: 1634:        static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __str.data(), __str.size());
        -: 1635:  }
        -: 1636:
        -: 1637:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1638:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1639:  replace(const_iterator __i1, const_iterator __i2, const _Tp& __t) {
        -: 1640:    __self_view __sv = __t;
        -: 1641:    return replace(__i1 - begin(), __i2 - __i1, __sv);
        -: 1642:  }
        -: 1643:
        -: 1644:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1645:  replace(const_iterator __i1, const_iterator __i2, const value_type* __s, size_type __n) {
        -: 1646:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s, __n);
        -: 1647:  }
        -: 1648:
        -: 1649:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1650:  replace(const_iterator __i1, const_iterator __i2, const value_type* __s) {
        -: 1651:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __s);
        -: 1652:  }
        -: 1653:
        -: 1654:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1655:  replace(const_iterator __i1, const_iterator __i2, size_type __n, value_type __c) {
        -: 1656:    return replace(static_cast<size_type>(__i1 - begin()), static_cast<size_type>(__i2 - __i1), __n, __c);
        -: 1657:  }
        -: 1658:
        -: 1659:  template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> = 0>
        -: 1660:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1661:  replace(const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2);
        -: 1662:
        -: 1663:#if _LIBCPP_STD_VER >= 23
        -: 1664:  template <_ContainerCompatibleRange<_CharT> _Range>
        -: 1665:  _LIBCPP_HIDE_FROM_ABI constexpr basic_string&
        -: 1666:  replace_with_range(const_iterator __i1, const_iterator __i2, _Range&& __range) {
        -: 1667:    basic_string __temp(from_range, std::forward<_Range>(__range), __alloc());
        -: 1668:    return replace(__i1, __i2, __temp);
        -: 1669:  }
        -: 1670:#endif
        -: 1671:
        -: 1672:#ifndef _LIBCPP_CXX03_LANG
        -: 1673:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 1674:  replace(const_iterator __i1, const_iterator __i2, initializer_list<value_type> __il) {
        -: 1675:    return replace(__i1, __i2, __il.begin(), __il.end());
        -: 1676:  }
        -: 1677:#endif // _LIBCPP_CXX03_LANG
        -: 1678:
        -: 1679:  _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type copy(value_type* __s, size_type __n, size_type __pos = 0) const;
        -: 1680:
        -: 1681:#if _LIBCPP_STD_VER <= 20
        -: 1682:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string
        -: 1683:  substr(size_type __pos = 0, size_type __n = npos) const {
        -: 1684:    return basic_string(*this, __pos, __n);
        -: 1685:  }
        -: 1686:#else
        -: 1687:  _LIBCPP_HIDE_FROM_ABI constexpr basic_string substr(size_type __pos = 0, size_type __n = npos) const& {
        -: 1688:    return basic_string(*this, __pos, __n);
        -: 1689:  }
        -: 1690:
        -: 1691:  _LIBCPP_HIDE_FROM_ABI constexpr basic_string substr(size_type __pos = 0, size_type __n = npos) && {
        -: 1692:    return basic_string(std::move(*this), __pos, __n);
        -: 1693:  }
        -: 1694:#endif
        -: 1695:
        -: 1696:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void swap(basic_string& __str)
        -: 1697:#if _LIBCPP_STD_VER >= 14
        -: 1698:      _NOEXCEPT;
        -: 1699:#else
        -: 1700:      _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value || __is_nothrow_swappable_v<allocator_type>);
        -: 1701:#endif
        -: 1702:
     1567: 1703:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const value_type* c_str() const _NOEXCEPT { return data(); }
     1869: 1704:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const value_type* data() const _NOEXCEPT {
     1869: 1705:    return std::__to_address(__get_pointer());
        -: 1706:  }
        -: 1707:#if _LIBCPP_STD_VER >= 17
    #####: 1708:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 value_type* data() _NOEXCEPT {
    #####: 1709:    return std::__to_address(__get_pointer());
        -: 1710:  }
        -: 1711:#endif
        -: 1712:
        -: 1713:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 allocator_type get_allocator() const _NOEXCEPT {
        -: 1714:    return __alloc();
        -: 1715:  }
        -: 1716:
        -: 1717:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1718:  find(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1719:
        -: 1720:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1721:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1722:  find(const _Tp& __t, size_type __pos = 0) const _NOEXCEPT;
        -: 1723:
        -: 1724:  _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type find(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1725:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1726:  find(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1727:  _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type find(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1728:
        -: 1729:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1730:  rfind(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1731:
        -: 1732:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1733:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1734:  rfind(const _Tp& __t, size_type __pos = npos) const _NOEXCEPT;
        -: 1735:
        -: 1736:  _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type rfind(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1737:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1738:  rfind(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1739:  _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type rfind(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1740:
        -: 1741:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1742:  find_first_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1743:
        -: 1744:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1745:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1746:  find_first_of(const _Tp& __t, size_type __pos = 0) const _NOEXCEPT;
        -: 1747:
        -: 1748:  _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1749:  find_first_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1750:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1751:  find_first_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1752:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1753:  find_first_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1754:
        -: 1755:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1756:  find_last_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1757:
        -: 1758:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1759:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1760:  find_last_of(const _Tp& __t, size_type __pos = npos) const _NOEXCEPT;
        -: 1761:
        -: 1762:  _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1763:  find_last_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1764:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1765:  find_last_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1766:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1767:  find_last_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1768:
        -: 1769:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1770:  find_first_not_of(const basic_string& __str, size_type __pos = 0) const _NOEXCEPT;
        -: 1771:
        -: 1772:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1773:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1774:  find_first_not_of(const _Tp& __t, size_type __pos = 0) const _NOEXCEPT;
        -: 1775:
        -: 1776:  _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1777:  find_first_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1778:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1779:  find_first_not_of(const value_type* __s, size_type __pos = 0) const _NOEXCEPT;
        -: 1780:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1781:  find_first_not_of(value_type __c, size_type __pos = 0) const _NOEXCEPT;
        -: 1782:
        -: 1783:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1784:  find_last_not_of(const basic_string& __str, size_type __pos = npos) const _NOEXCEPT;
        -: 1785:
        -: 1786:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1787:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1788:  find_last_not_of(const _Tp& __t, size_type __pos = npos) const _NOEXCEPT;
        -: 1789:
        -: 1790:  _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1791:  find_last_not_of(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT;
        -: 1792:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1793:  find_last_not_of(const value_type* __s, size_type __pos = npos) const _NOEXCEPT;
        -: 1794:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type
        -: 1795:  find_last_not_of(value_type __c, size_type __pos = npos) const _NOEXCEPT;
        -: 1796:
        -: 1797:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 int compare(const basic_string& __str) const _NOEXCEPT;
        -: 1798:
        -: 1799:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1800:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 1801:  compare(const _Tp& __t) const _NOEXCEPT;
        -: 1802:
        -: 1803:  template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> = 0>
        -: 1804:  _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS _LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 1805:  compare(size_type __pos1, size_type __n1, const _Tp& __t) const;
        -: 1806:
        -: 1807:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 1808:  compare(size_type __pos1, size_type __n1, const basic_string& __str) const;
        -: 1809:  _LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 1810:  compare(size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2 = npos) const;
        -: 1811:
        -: 1812:  template <class _Tp,
        -: 1813:            __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 1814:                              !__is_same_uncvref<_Tp, basic_string>::value,
        -: 1815:                          int> = 0>
        -: 1816:  inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 1817:  compare(size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2 = npos) const;
        -: 1818:
        -: 1819:  _LIBCPP_CONSTEXPR_SINCE_CXX20 int compare(const value_type* __s) const _NOEXCEPT;
        -: 1820:  _LIBCPP_CONSTEXPR_SINCE_CXX20 int compare(size_type __pos1, size_type __n1, const value_type* __s) const;
        -: 1821:  _LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 1822:  compare(size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const;
        -: 1823:
        -: 1824:#if _LIBCPP_STD_VER >= 20
        -: 1825:  constexpr _LIBCPP_HIDE_FROM_ABI bool starts_with(__self_view __sv) const noexcept {
        -: 1826:    return __self_view(data(), size()).starts_with(__sv);
        -: 1827:  }
        -: 1828:
        -: 1829:  constexpr _LIBCPP_HIDE_FROM_ABI bool starts_with(value_type __c) const noexcept {
        -: 1830:    return !empty() && _Traits::eq(front(), __c);
        -: 1831:  }
        -: 1832:
        -: 1833:  constexpr _LIBCPP_HIDE_FROM_ABI bool starts_with(const value_type* __s) const noexcept {
        -: 1834:    return starts_with(__self_view(__s));
        -: 1835:  }
        -: 1836:
        -: 1837:  constexpr _LIBCPP_HIDE_FROM_ABI bool ends_with(__self_view __sv) const noexcept {
        -: 1838:    return __self_view(data(), size()).ends_with(__sv);
        -: 1839:  }
        -: 1840:
        -: 1841:  constexpr _LIBCPP_HIDE_FROM_ABI bool ends_with(value_type __c) const noexcept {
        -: 1842:    return !empty() && _Traits::eq(back(), __c);
        -: 1843:  }
        -: 1844:
        -: 1845:  constexpr _LIBCPP_HIDE_FROM_ABI bool ends_with(const value_type* __s) const noexcept {
        -: 1846:    return ends_with(__self_view(__s));
        -: 1847:  }
        -: 1848:#endif
        -: 1849:
        -: 1850:#if _LIBCPP_STD_VER >= 23
        -: 1851:  constexpr _LIBCPP_HIDE_FROM_ABI bool contains(__self_view __sv) const noexcept {
        -: 1852:    return __self_view(data(), size()).contains(__sv);
        -: 1853:  }
        -: 1854:
        -: 1855:  constexpr _LIBCPP_HIDE_FROM_ABI bool contains(value_type __c) const noexcept {
        -: 1856:    return __self_view(data(), size()).contains(__c);
        -: 1857:  }
        -: 1858:
        -: 1859:  constexpr _LIBCPP_HIDE_FROM_ABI bool contains(const value_type* __s) const {
        -: 1860:    return __self_view(data(), size()).contains(__s);
        -: 1861:  }
        -: 1862:#endif
        -: 1863:
        -: 1864:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 bool __invariants() const;
        -: 1865:
        -: 1866:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __clear_and_shrink() _NOEXCEPT;
        -: 1867:
        -: 1868:private:
        -: 1869:  template <class _Alloc>
        -: 1870:  inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 bool friend
        -: 1871:  operator==(const basic_string<char, char_traits<char>, _Alloc>& __lhs,
        -: 1872:             const basic_string<char, char_traits<char>, _Alloc>& __rhs) _NOEXCEPT;
        -: 1873:
        -: 1874:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __shrink_or_extend(size_type __target_capacity);
        -: 1875:
        -: 1876:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS bool
     4285: 1877:  __is_long() const _NOEXCEPT {
        -: 1878:    if (__libcpp_is_constant_evaluated() && __builtin_constant_p(__r_.first().__l.__is_long_)) {
        -: 1879:      return __r_.first().__l.__is_long_;
        -: 1880:    }
     4285: 1881:    return __r_.first().__s.__is_long_;
        -: 1882:  }
        -: 1883:
        -: 1884:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __begin_lifetime(pointer __begin, size_type __n) {
        -: 1885:#if _LIBCPP_STD_VER >= 20
        -: 1886:    if (__libcpp_is_constant_evaluated()) {
        -: 1887:      for (size_type __i = 0; __i != __n; ++__i)
        -: 1888:        std::construct_at(std::addressof(__begin[__i]));
        -: 1889:    }
        -: 1890:#else
        -: 1891:    (void)__begin;
        -: 1892:    (void)__n;
        -: 1893:#endif // _LIBCPP_STD_VER >= 20
        -: 1894:  }
        -: 1895:
        -: 1896:  _LIBCPP_CONSTEXPR _LIBCPP_HIDE_FROM_ABI static bool __fits_in_sso(size_type __sz) { return __sz < __min_cap; }
        -: 1897:
        -: 1898:  template <class _Iterator, class _Sentinel>
        -: 1899:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_HIDE_FROM_ABI void
        -: 1900:  __assign_trivial(_Iterator __first, _Sentinel __last, size_type __n);
        -: 1901:
        -: 1902:  template <class _Iterator, class _Sentinel>
        -: 1903:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_HIDE_FROM_ABI void __assign_with_sentinel(_Iterator __first, _Sentinel __last);
        -: 1904:
        -: 1905:  // Copy [__first, __last) into [__dest, __dest + (__last - __first)). Assumes that the ranges don't overlap.
        -: 1906:  template <class _ForwardIter, class _Sent>
        -: 1907:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 static value_type*
        -: 1908:  __copy_non_overlapping_range(_ForwardIter __first, _Sent __last, value_type* __dest) {
        -: 1909:#ifndef _LIBCPP_CXX03_LANG
        -: 1910:    if constexpr (__libcpp_is_contiguous_iterator<_ForwardIter>::value &&
        -: 1911:                  is_same<value_type, __iter_value_type<_ForwardIter>>::value && is_same<_ForwardIter, _Sent>::value) {
        -: 1912:      traits_type::copy(__dest, std::__to_address(__first), __last - __first);
        -: 1913:      return __dest + (__last - __first);
        -: 1914:    }
        -: 1915:#endif
        -: 1916:
        -: 1917:    for (; __first != __last; ++__first)
        -: 1918:      traits_type::assign(*__dest++, *__first);
        -: 1919:    return __dest;
        -: 1920:  }
        -: 1921:
        -: 1922:  template <class _ForwardIterator, class _Sentinel>
        -: 1923:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 iterator
        -: 1924:  __insert_from_safe_copy(size_type __n, size_type __ip, _ForwardIterator __first, _Sentinel __last) {
        -: 1925:    size_type __sz  = size();
        -: 1926:    size_type __cap = capacity();
        -: 1927:    value_type* __p;
        -: 1928:    if (__cap - __sz >= __n) {
        -: 1929:      __annotate_increase(__n);
        -: 1930:      __p                = std::__to_address(__get_pointer());
        -: 1931:      size_type __n_move = __sz - __ip;
        -: 1932:      if (__n_move != 0)
        -: 1933:        traits_type::move(__p + __ip + __n, __p + __ip, __n_move);
        -: 1934:    } else {
        -: 1935:      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __ip, 0, __n);
        -: 1936:      __p = std::__to_address(__get_long_pointer());
        -: 1937:    }
        -: 1938:    __sz += __n;
        -: 1939:    __set_size(__sz);
        -: 1940:    traits_type::assign(__p[__sz], value_type());
        -: 1941:    __copy_non_overlapping_range(__first, __last, __p + __ip);
        -: 1942:
        -: 1943:    return begin() + __ip;
        -: 1944:  }
        -: 1945:
        -: 1946:  template <class _Iterator, class _Sentinel>
        -: 1947:  _LIBCPP_CONSTEXPR_SINCE_CXX20 iterator
        -: 1948:  __insert_with_size(const_iterator __pos, _Iterator __first, _Sentinel __last, size_type __n);
        -: 1949:
        -: 1950:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX14 allocator_type& __alloc() _NOEXCEPT { return __r_.second(); }
        -: 1951:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR const allocator_type& __alloc() const _NOEXCEPT { return __r_.second(); }
        -: 1952:
        -: 1953:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS void
        -: 1954:  __set_short_size(size_type __s) _NOEXCEPT {
        -: 1955:    _LIBCPP_ASSERT_INTERNAL(__s < __min_cap, "__s should never be greater than or equal to the short string capacity");
        -: 1956:    __r_.first().__s.__size_    = __s;
        -: 1957:    __r_.first().__s.__is_long_ = false;
        -: 1958:  }
        -: 1959:
        -: 1960:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS size_type
      352: 1961:  __get_short_size() const _NOEXCEPT {
        -: 1962:    _LIBCPP_ASSERT_INTERNAL(!__r_.first().__s.__is_long_, "String has to be short when trying to get the short size");
      352: 1963:    return __r_.first().__s.__size_;
        -: 1964:  }
        -: 1965:
        -: 1966:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __set_long_size(size_type __s) _NOEXCEPT {
        -: 1967:    __r_.first().__l.__size_ = __s;
        -: 1968:  }
     1391: 1969:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type __get_long_size() const _NOEXCEPT {
     1391: 1970:    return __r_.first().__l.__size_;
        -: 1971:  }
        -: 1972:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __set_size(size_type __s) _NOEXCEPT {
        -: 1973:    if (__is_long())
        -: 1974:      __set_long_size(__s);
        -: 1975:    else
        -: 1976:      __set_short_size(__s);
        -: 1977:  }
        -: 1978:
        -: 1979:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __set_long_cap(size_type __s) _NOEXCEPT {
        -: 1980:    __r_.first().__l.__cap_     = __s / __endian_factor;
        -: 1981:    __r_.first().__l.__is_long_ = true;
        -: 1982:  }
        -: 1983:
        -: 1984:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type __get_long_cap() const _NOEXCEPT {
        -: 1985:    return __r_.first().__l.__cap_ * __endian_factor;
        -: 1986:  }
        -: 1987:
        -: 1988:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __set_long_pointer(pointer __p) _NOEXCEPT {
        -: 1989:    __r_.first().__l.__data_ = __p;
        -: 1990:  }
      173: 1991:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 pointer __get_long_pointer() _NOEXCEPT {
      173: 1992:    return _LIBCPP_ASAN_VOLATILE_WRAPPER(__r_.first().__l.__data_);
        -: 1993:  }
     1451: 1994:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_pointer __get_long_pointer() const _NOEXCEPT {
     1451: 1995:    return _LIBCPP_ASAN_VOLATILE_WRAPPER(__r_.first().__l.__data_);
        -: 1996:  }
        -: 1997:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS pointer
        2: 1998:  __get_short_pointer() _NOEXCEPT {
        2: 1999:    return _LIBCPP_ASAN_VOLATILE_WRAPPER(pointer_traits<pointer>::pointer_to(__r_.first().__s.__data_[0]));
        -: 2000:  }
        -: 2001:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS const_pointer
      442: 2002:  __get_short_pointer() const _NOEXCEPT {
      442: 2003:    return _LIBCPP_ASAN_VOLATILE_WRAPPER(pointer_traits<const_pointer>::pointer_to(__r_.first().__s.__data_[0]));
        -: 2004:  }
      173: 2005:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 pointer __get_pointer() _NOEXCEPT {
      173: 2006:    return __is_long() ? __get_long_pointer() : __get_short_pointer();
        -: 2007:  }
     1893: 2008:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 const_pointer __get_pointer() const _NOEXCEPT {
     1893: 2009:    return __is_long() ? __get_long_pointer() : __get_short_pointer();
        -: 2010:  }
        -: 2011:
        -: 2012:  // The following functions are no-ops outside of AddressSanitizer mode.
        -: 2013:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2014:  __annotate_contiguous_container(const void* __old_mid, const void* __new_mid) const {
        -: 2015:    (void)__old_mid;
        -: 2016:    (void)__new_mid;
        -: 2017:#if !defined(_LIBCPP_HAS_NO_ASAN) && defined(_LIBCPP_INSTRUMENTED_WITH_ASAN)
        -: 2018:  #if defined(__APPLE__)
        -: 2019:    // TODO: remove after addressing issue #96099 (https://github.com/llvm/llvm-project/issues/96099)
        -: 2020:    if(!__is_long())
        -: 2021:      return;
        -: 2022:  #endif
        -: 2023:    std::__annotate_contiguous_container<_Allocator>(data(), data() + capacity() + 1, __old_mid, __new_mid);
        -: 2024:#endif
        -: 2025:  }
        -: 2026:
      618: 2027:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __annotate_new(size_type __current_size) const _NOEXCEPT {
        -: 2028:    (void)__current_size;
        -: 2029:#if !defined(_LIBCPP_HAS_NO_ASAN) && defined(_LIBCPP_INSTRUMENTED_WITH_ASAN)
        -: 2030:    if (!__libcpp_is_constant_evaluated())
        -: 2031:      __annotate_contiguous_container(data() + capacity() + 1, data() + __current_size + 1);
        -: 2032:#endif
      618: 2033:  }
        -: 2034:
       56: 2035:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __annotate_delete() const _NOEXCEPT {
        -: 2036:#if !defined(_LIBCPP_HAS_NO_ASAN) && defined(_LIBCPP_INSTRUMENTED_WITH_ASAN)
        -: 2037:    if (!__libcpp_is_constant_evaluated())
        -: 2038:      __annotate_contiguous_container(data() + size() + 1, data() + capacity() + 1);
        -: 2039:#endif
       56: 2040:  }
        -: 2041:
        -: 2042:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __annotate_increase(size_type __n) const _NOEXCEPT {
        -: 2043:    (void)__n;
        -: 2044:#if !defined(_LIBCPP_HAS_NO_ASAN) && defined(_LIBCPP_INSTRUMENTED_WITH_ASAN)
        -: 2045:    if (!__libcpp_is_constant_evaluated())
        -: 2046:      __annotate_contiguous_container(data() + size() + 1, data() + size() + 1 + __n);
        -: 2047:#endif
        -: 2048:  }
        -: 2049:
        -: 2050:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __annotate_shrink(size_type __old_size) const _NOEXCEPT {
        -: 2051:    (void)__old_size;
        -: 2052:#if !defined(_LIBCPP_HAS_NO_ASAN) && defined(_LIBCPP_INSTRUMENTED_WITH_ASAN)
        -: 2053:    if (!__libcpp_is_constant_evaluated())
        -: 2054:      __annotate_contiguous_container(data() + __old_size + 1, data() + size() + 1);
        -: 2055:#endif
        -: 2056:  }
        -: 2057:
        -: 2058:  template <size_type __a>
        -: 2059:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type __align_it(size_type __s) _NOEXCEPT {
        -: 2060:    return (__s + (__a - 1)) & ~(__a - 1);
        -: 2061:  }
        -: 2062:  enum { __alignment = 8 };
        -: 2063:  static _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 size_type __recommend(size_type __s) _NOEXCEPT {
        -: 2064:    if (__s < __min_cap) {
        -: 2065:      return static_cast<size_type>(__min_cap) - 1;
        -: 2066:    }
        -: 2067:    const size_type __boundary = sizeof(value_type) < __alignment ? __alignment / sizeof(value_type) : __endian_factor;
        -: 2068:    size_type __guess          = __align_it<__boundary>(__s + 1) - 1;
        -: 2069:    if (__guess == __min_cap)
        -: 2070:      __guess += __endian_factor;
        -: 2071:    return __guess;
        -: 2072:  }
        -: 2073:
        -: 2074:  inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void __init(const value_type* __s, size_type __sz, size_type __reserve);
        -: 2075:  inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void __init(const value_type* __s, size_type __sz);
        -: 2076:  inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void __init(size_type __n, value_type __c);
        -: 2077:
        -: 2078:  // Slow path for the (inlined) copy constructor for 'long' strings.
        -: 2079:  // Always externally instantiated and not inlined.
        -: 2080:  // Requires that __s is zero terminated.
        -: 2081:  // The main reason for this function to exist is because for unstable, we
        -: 2082:  // want to allow inlining of the copy constructor. However, we don't want
        -: 2083:  // to call the __init() functions as those are marked as inline which may
        -: 2084:  // result in over-aggressive inlining by the compiler, where our aim is
        -: 2085:  // to only inline the fast path code directly in the ctor.
        -: 2086:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE void __init_copy_ctor_external(const value_type* __s, size_type __sz);
        -: 2087:
        -: 2088:  template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> = 0>
        -: 2089:  inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void __init(_InputIterator __first, _InputIterator __last);
        -: 2090:
        -: 2091:  template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> = 0>
        -: 2092:  inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void __init(_ForwardIterator __first, _ForwardIterator __last);
        -: 2093:
        -: 2094:  template <class _InputIterator, class _Sentinel>
        -: 2095:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2096:  __init_with_sentinel(_InputIterator __first, _Sentinel __last);
        -: 2097:  template <class _InputIterator, class _Sentinel>
        -: 2098:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2099:  __init_with_size(_InputIterator __first, _Sentinel __last, size_type __sz);
        -: 2100:
        -: 2101:  _LIBCPP_CONSTEXPR_SINCE_CXX20
        -: 2102:#if _LIBCPP_ABI_VERSION >= 2 //  We want to use the function in the dylib in ABIv1
        -: 2103:  _LIBCPP_HIDE_FROM_ABI
        -: 2104:#endif
        -: 2105:  _LIBCPP_DEPRECATED_("use __grow_by_without_replace") void __grow_by(
        -: 2106:      size_type __old_cap,
        -: 2107:      size_type __delta_cap,
        -: 2108:      size_type __old_sz,
        -: 2109:      size_type __n_copy,
        -: 2110:      size_type __n_del,
        -: 2111:      size_type __n_add = 0);
        -: 2112:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_HIDE_FROM_ABI void __grow_by_without_replace(
        -: 2113:      size_type __old_cap,
        -: 2114:      size_type __delta_cap,
        -: 2115:      size_type __old_sz,
        -: 2116:      size_type __n_copy,
        -: 2117:      size_type __n_del,
        -: 2118:      size_type __n_add = 0);
        -: 2119:  _LIBCPP_CONSTEXPR_SINCE_CXX20 void __grow_by_and_replace(
        -: 2120:      size_type __old_cap,
        -: 2121:      size_type __delta_cap,
        -: 2122:      size_type __old_sz,
        -: 2123:      size_type __n_copy,
        -: 2124:      size_type __n_del,
        -: 2125:      size_type __n_add,
        -: 2126:      const value_type* __p_new_stuff);
        -: 2127:
        -: 2128:  // __assign_no_alias is invoked for assignment operations where we
        -: 2129:  // have proof that the input does not alias the current instance.
        -: 2130:  // For example, operator=(basic_string) performs a 'self' check.
        -: 2131:  template <bool __is_short>
        -: 2132:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE basic_string& __assign_no_alias(const value_type* __s, size_type __n);
        -: 2133:
        -: 2134:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __erase_to_end(size_type __pos) {
        -: 2135:    __null_terminate_at(std::__to_address(__get_pointer()), __pos);
        -: 2136:  }
        -: 2137:
        -: 2138:  // __erase_external_with_move is invoked for erase() invocations where
        -: 2139:  // `n ~= npos`, likely requiring memory moves on the string data.
        -: 2140:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE void __erase_external_with_move(size_type __pos, size_type __n);
        -: 2141:
        -: 2142:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __copy_assign_alloc(const basic_string& __str) {
        -: 2143:    __copy_assign_alloc(
        -: 2144:        __str, integral_constant<bool, __alloc_traits::propagate_on_container_copy_assignment::value>());
        -: 2145:  }
        -: 2146:
        -: 2147:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __copy_assign_alloc(const basic_string& __str, true_type) {
        -: 2148:    if (__alloc() == __str.__alloc())
        -: 2149:      __alloc() = __str.__alloc();
        -: 2150:    else {
        -: 2151:      if (!__str.__is_long()) {
        -: 2152:        __clear_and_shrink();
        -: 2153:        __alloc() = __str.__alloc();
        -: 2154:      } else {
        -: 2155:        __annotate_delete();
        -: 2156:        allocator_type __a = __str.__alloc();
        -: 2157:        auto __allocation  = std::__allocate_at_least(__a, __str.__get_long_cap());
        -: 2158:        __begin_lifetime(__allocation.ptr, __allocation.count);
        -: 2159:        if (__is_long())
        -: 2160:          __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2161:        __alloc() = std::move(__a);
        -: 2162:        __set_long_pointer(__allocation.ptr);
        -: 2163:        __set_long_cap(__allocation.count);
        -: 2164:        __set_long_size(__str.size());
        -: 2165:        __annotate_new(__get_long_size());
        -: 2166:      }
        -: 2167:    }
        -: 2168:  }
        -: 2169:
        -: 2170:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2171:  __copy_assign_alloc(const basic_string&, false_type) _NOEXCEPT {}
        -: 2172:
        -: 2173:#ifndef _LIBCPP_CXX03_LANG
        -: 2174:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2175:  __move_assign(basic_string& __str, false_type) noexcept(__alloc_traits::is_always_equal::value);
        -: 2176:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS void
        -: 2177:  __move_assign(basic_string& __str, true_type)
        -: 2178:#  if _LIBCPP_STD_VER >= 17
        -: 2179:      noexcept;
        -: 2180:#  else
        -: 2181:      noexcept(is_nothrow_move_assignable<allocator_type>::value);
        -: 2182:#  endif
        -: 2183:#endif
        -: 2184:
        -: 2185:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __move_assign_alloc(basic_string& __str)
        -: 2186:      _NOEXCEPT_(!__alloc_traits::propagate_on_container_move_assignment::value ||
        -: 2187:                 is_nothrow_move_assignable<allocator_type>::value) {
        -: 2188:    __move_assign_alloc(
        -: 2189:        __str, integral_constant<bool, __alloc_traits::propagate_on_container_move_assignment::value>());
        -: 2190:  }
        -: 2191:
        -: 2192:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __move_assign_alloc(basic_string& __c, true_type)
        -: 2193:      _NOEXCEPT_(is_nothrow_move_assignable<allocator_type>::value) {
        -: 2194:    __alloc() = std::move(__c.__alloc());
        -: 2195:  }
        -: 2196:
        -: 2197:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void __move_assign_alloc(basic_string&, false_type) _NOEXCEPT {}
        -: 2198:
        -: 2199:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE basic_string& __assign_external(const value_type* __s);
        -: 2200:  _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE basic_string& __assign_external(const value_type* __s, size_type __n);
        -: 2201:
        -: 2202:  // Assigns the value in __s, guaranteed to be __n < __min_cap in length.
        -: 2203:  inline _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string& __assign_short(const value_type* __s, size_type __n) {
        -: 2204:    size_type __old_size = size();
        -: 2205:    if (__n > __old_size)
        -: 2206:      __annotate_increase(__n - __old_size);
        -: 2207:    pointer __p =
        -: 2208:        __is_long() ? (__set_long_size(__n), __get_long_pointer()) : (__set_short_size(__n), __get_short_pointer());
        -: 2209:    traits_type::move(std::__to_address(__p), __s, __n);
        -: 2210:    traits_type::assign(__p[__n], value_type());
        -: 2211:    if (__old_size > __n)
        -: 2212:      __annotate_shrink(__old_size);
        -: 2213:    return *this;
        -: 2214:  }
        -: 2215:
        -: 2216:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string&
        -: 2217:  __null_terminate_at(value_type* __p, size_type __newsz) {
        -: 2218:    size_type __old_size = size();
        -: 2219:    if (__newsz > __old_size)
        -: 2220:      __annotate_increase(__newsz - __old_size);
        -: 2221:    __set_size(__newsz);
        -: 2222:    traits_type::assign(__p[__newsz], value_type());
        -: 2223:    if (__old_size > __newsz)
        -: 2224:      __annotate_shrink(__old_size);
        -: 2225:    return *this;
        -: 2226:  }
        -: 2227:
        -: 2228:  template <class _Tp>
        -: 2229:  _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 bool __addr_in_range(const _Tp& __v) const {
        -: 2230:    return std::__is_pointer_in_range(data(), data() + size() + 1, std::addressof(__v));
        -: 2231:  }
        -: 2232:
        -: 2233:  _LIBCPP_NORETURN _LIBCPP_HIDE_FROM_ABI void __throw_length_error() const {
        -: 2234:    std::__throw_length_error("basic_string");
        -: 2235:  }
        -: 2236:
        -: 2237:  _LIBCPP_NORETURN _LIBCPP_HIDE_FROM_ABI void __throw_out_of_range() const {
        -: 2238:    std::__throw_out_of_range("basic_string");
        -: 2239:  }
        -: 2240:
        -: 2241:  friend _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string operator+ <>(const basic_string&, const basic_string&);
        -: 2242:  friend _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string operator+ <>(const value_type*, const basic_string&);
        -: 2243:  friend _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string operator+ <>(value_type, const basic_string&);
        -: 2244:  friend _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string operator+ <>(const basic_string&, const value_type*);
        -: 2245:  friend _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string operator+ <>(const basic_string&, value_type);
        -: 2246:#if _LIBCPP_STD_VER >= 26
        -: 2247:  friend constexpr basic_string operator+ <>(const basic_string&, type_identity_t<__self_view>);
        -: 2248:  friend constexpr basic_string operator+ <>(type_identity_t<__self_view>, const basic_string&);
        -: 2249:#endif
        -: 2250:};
        -: 2251:
        -: 2252:// These declarations must appear before any functions are implicitly used
        -: 2253:// so that they have the correct visibility specifier.
        -: 2254:#define _LIBCPP_DECLARE(...) extern template __VA_ARGS__;
        -: 2255:#ifdef _LIBCPP_ABI_STRING_OPTIMIZED_EXTERNAL_INSTANTIATION
        -: 2256:_LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST(_LIBCPP_DECLARE, char)
        -: 2257:#  ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 2258:_LIBCPP_STRING_UNSTABLE_EXTERN_TEMPLATE_LIST(_LIBCPP_DECLARE, wchar_t)
        -: 2259:#  endif
        -: 2260:#else
        -: 2261:_LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST(_LIBCPP_DECLARE, char)
        -: 2262:#  ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 2263:_LIBCPP_STRING_V1_EXTERN_TEMPLATE_LIST(_LIBCPP_DECLARE, wchar_t)
        -: 2264:#  endif
        -: 2265:#endif
        -: 2266:#undef _LIBCPP_DECLARE
        -: 2267:
        -: 2268:#if _LIBCPP_STD_VER >= 17
        -: 2269:template <class _InputIterator,
        -: 2270:          class _CharT     = __iter_value_type<_InputIterator>,
        -: 2271:          class _Allocator = allocator<_CharT>,
        -: 2272:          class            = enable_if_t<__has_input_iterator_category<_InputIterator>::value>,
        -: 2273:          class            = enable_if_t<__is_allocator<_Allocator>::value> >
        -: 2274:basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
        -: 2275:    -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;
        -: 2276:
        -: 2277:template <class _CharT,
        -: 2278:          class _Traits,
        -: 2279:          class _Allocator = allocator<_CharT>,
        -: 2280:          class            = enable_if_t<__is_allocator<_Allocator>::value> >
        -: 2281:explicit basic_string(basic_string_view<_CharT, _Traits>,
        -: 2282:                      const _Allocator& = _Allocator()) -> basic_string<_CharT, _Traits, _Allocator>;
        -: 2283:
        -: 2284:template <class _CharT,
        -: 2285:          class _Traits,
        -: 2286:          class _Allocator = allocator<_CharT>,
        -: 2287:          class            = enable_if_t<__is_allocator<_Allocator>::value>,
        -: 2288:          class _Sz        = typename allocator_traits<_Allocator>::size_type >
        -: 2289:basic_string(basic_string_view<_CharT, _Traits>, _Sz, _Sz, const _Allocator& = _Allocator())
        -: 2290:    -> basic_string<_CharT, _Traits, _Allocator>;
        -: 2291:#endif
        -: 2292:
        -: 2293:#if _LIBCPP_STD_VER >= 23
        -: 2294:template <ranges::input_range _Range,
        -: 2295:          class _Allocator = allocator<ranges::range_value_t<_Range>>,
        -: 2296:          class            = enable_if_t<__is_allocator<_Allocator>::value> >
        -: 2297:basic_string(from_range_t, _Range&&, _Allocator = _Allocator())
        -: 2298:    -> basic_string<ranges::range_value_t<_Range>, char_traits<ranges::range_value_t<_Range>>, _Allocator>;
        -: 2299:#endif
        -: 2300:
        -: 2301:template <class _CharT, class _Traits, class _Allocator>
        -: 2302:_LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2303:basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz, size_type __reserve) {
        -: 2304:  if (__libcpp_is_constant_evaluated())
        -: 2305:    __r_.first() = __rep();
        -: 2306:  if (__reserve > max_size())
        -: 2307:    __throw_length_error();
        -: 2308:  pointer __p;
        -: 2309:  if (__fits_in_sso(__reserve)) {
        -: 2310:    __set_short_size(__sz);
        -: 2311:    __p = __get_short_pointer();
        -: 2312:  } else {
        -: 2313:    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__reserve) + 1);
        -: 2314:    __p               = __allocation.ptr;
        -: 2315:    __begin_lifetime(__p, __allocation.count);
        -: 2316:    __set_long_pointer(__p);
        -: 2317:    __set_long_cap(__allocation.count);
        -: 2318:    __set_long_size(__sz);
        -: 2319:  }
        -: 2320:  traits_type::copy(std::__to_address(__p), __s, __sz);
        -: 2321:  traits_type::assign(__p[__sz], value_type());
        -: 2322:  __annotate_new(__sz);
        -: 2323:}
        -: 2324:
        -: 2325:template <class _CharT, class _Traits, class _Allocator>
        -: 2326:_LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2327:basic_string<_CharT, _Traits, _Allocator>::__init(const value_type* __s, size_type __sz) {
        -: 2328:  if (__libcpp_is_constant_evaluated())
        -: 2329:    __r_.first() = __rep();
        -: 2330:  if (__sz > max_size())
        -: 2331:    __throw_length_error();
        -: 2332:  pointer __p;
        -: 2333:  if (__fits_in_sso(__sz)) {
        -: 2334:    __set_short_size(__sz);
        -: 2335:    __p = __get_short_pointer();
        -: 2336:  } else {
        -: 2337:    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__sz) + 1);
        -: 2338:    __p               = __allocation.ptr;
        -: 2339:    __begin_lifetime(__p, __allocation.count);
        -: 2340:    __set_long_pointer(__p);
        -: 2341:    __set_long_cap(__allocation.count);
        -: 2342:    __set_long_size(__sz);
        -: 2343:  }
        -: 2344:  traits_type::copy(std::__to_address(__p), __s, __sz);
        -: 2345:  traits_type::assign(__p[__sz], value_type());
        -: 2346:  __annotate_new(__sz);
        -: 2347:}
        -: 2348:
        -: 2349:template <class _CharT, class _Traits, class _Allocator>
        -: 2350:_LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE void
        -: 2351:basic_string<_CharT, _Traits, _Allocator>::__init_copy_ctor_external(const value_type* __s, size_type __sz) {
        -: 2352:  if (__libcpp_is_constant_evaluated())
        -: 2353:    __r_.first() = __rep();
        -: 2354:
        -: 2355:  pointer __p;
        -: 2356:  if (__fits_in_sso(__sz)) {
        -: 2357:    __p = __get_short_pointer();
        -: 2358:    __set_short_size(__sz);
        -: 2359:  } else {
        -: 2360:    if (__sz > max_size())
        -: 2361:      __throw_length_error();
        -: 2362:    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__sz) + 1);
        -: 2363:    __p               = __allocation.ptr;
        -: 2364:    __begin_lifetime(__p, __allocation.count);
        -: 2365:    __set_long_pointer(__p);
        -: 2366:    __set_long_cap(__allocation.count);
        -: 2367:    __set_long_size(__sz);
        -: 2368:  }
        -: 2369:  traits_type::copy(std::__to_address(__p), __s, __sz + 1);
        -: 2370:  __annotate_new(__sz);
        -: 2371:}
        -: 2372:
        -: 2373:template <class _CharT, class _Traits, class _Allocator>
        -: 2374:_LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::__init(size_type __n, value_type __c) {
        -: 2375:  if (__libcpp_is_constant_evaluated())
        -: 2376:    __r_.first() = __rep();
        -: 2377:
        -: 2378:  if (__n > max_size())
        -: 2379:    __throw_length_error();
        -: 2380:  pointer __p;
        -: 2381:  if (__fits_in_sso(__n)) {
        -: 2382:    __set_short_size(__n);
        -: 2383:    __p = __get_short_pointer();
        -: 2384:  } else {
        -: 2385:    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__n) + 1);
        -: 2386:    __p               = __allocation.ptr;
        -: 2387:    __begin_lifetime(__p, __allocation.count);
        -: 2388:    __set_long_pointer(__p);
        -: 2389:    __set_long_cap(__allocation.count);
        -: 2390:    __set_long_size(__n);
        -: 2391:  }
        -: 2392:  traits_type::assign(std::__to_address(__p), __n, __c);
        -: 2393:  traits_type::assign(__p[__n], value_type());
        -: 2394:  __annotate_new(__n);
        -: 2395:}
        -: 2396:
        -: 2397:template <class _CharT, class _Traits, class _Allocator>
        -: 2398:template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
        -: 2399:_LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2400:basic_string<_CharT, _Traits, _Allocator>::__init(_InputIterator __first, _InputIterator __last) {
        -: 2401:  __init_with_sentinel(std::move(__first), std::move(__last));
        -: 2402:}
        -: 2403:
        -: 2404:template <class _CharT, class _Traits, class _Allocator>
        -: 2405:template <class _InputIterator, class _Sentinel>
        -: 2406:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2407:basic_string<_CharT, _Traits, _Allocator>::__init_with_sentinel(_InputIterator __first, _Sentinel __last) {
        -: 2408:  __r_.first() = __rep();
        -: 2409:  __annotate_new(0);
        -: 2410:
        -: 2411:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -: 2412:  try {
        -: 2413:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -: 2414:    for (; __first != __last; ++__first)
        -: 2415:      push_back(*__first);
        -: 2416:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -: 2417:  } catch (...) {
        -: 2418:    __annotate_delete();
        -: 2419:    if (__is_long())
        -: 2420:      __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2421:    throw;
        -: 2422:  }
        -: 2423:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -: 2424:}
        -: 2425:
        -: 2426:template <class _CharT, class _Traits, class _Allocator>
        -: 2427:template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
        -: 2428:_LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2429:basic_string<_CharT, _Traits, _Allocator>::__init(_ForwardIterator __first, _ForwardIterator __last) {
        -: 2430:  size_type __sz = static_cast<size_type>(std::distance(__first, __last));
        -: 2431:  __init_with_size(__first, __last, __sz);
        -: 2432:}
        -: 2433:
        -: 2434:template <class _CharT, class _Traits, class _Allocator>
        -: 2435:template <class _InputIterator, class _Sentinel>
        -: 2436:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2437:basic_string<_CharT, _Traits, _Allocator>::__init_with_size(_InputIterator __first, _Sentinel __last, size_type __sz) {
        -: 2438:  if (__libcpp_is_constant_evaluated())
        -: 2439:    __r_.first() = __rep();
        -: 2440:
        -: 2441:  if (__sz > max_size())
        -: 2442:    __throw_length_error();
        -: 2443:
        -: 2444:  pointer __p;
        -: 2445:  if (__fits_in_sso(__sz)) {
        -: 2446:    __set_short_size(__sz);
        -: 2447:    __p = __get_short_pointer();
        -: 2448:
        -: 2449:  } else {
        -: 2450:    auto __allocation = std::__allocate_at_least(__alloc(), __recommend(__sz) + 1);
        -: 2451:    __p               = __allocation.ptr;
        -: 2452:    __begin_lifetime(__p, __allocation.count);
        -: 2453:    __set_long_pointer(__p);
        -: 2454:    __set_long_cap(__allocation.count);
        -: 2455:    __set_long_size(__sz);
        -: 2456:  }
        -: 2457:
        -: 2458:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -: 2459:  try {
        -: 2460:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -: 2461:    auto __end = __copy_non_overlapping_range(__first, __last, std::__to_address(__p));
        -: 2462:    traits_type::assign(*__end, value_type());
        -: 2463:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -: 2464:  } catch (...) {
        -: 2465:    if (__is_long())
        -: 2466:      __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2467:    throw;
        -: 2468:  }
        -: 2469:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -: 2470:  __annotate_new(__sz);
        -: 2471:}
        -: 2472:
        -: 2473:template <class _CharT, class _Traits, class _Allocator>
        -: 2474:_LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::__grow_by_and_replace(
        -: 2475:    size_type __old_cap,
        -: 2476:    size_type __delta_cap,
        -: 2477:    size_type __old_sz,
        -: 2478:    size_type __n_copy,
        -: 2479:    size_type __n_del,
        -: 2480:    size_type __n_add,
        -: 2481:    const value_type* __p_new_stuff) {
        -: 2482:  size_type __ms = max_size();
        -: 2483:  if (__delta_cap > __ms - __old_cap - 1)
        -: 2484:    __throw_length_error();
        -: 2485:  pointer __old_p = __get_pointer();
        -: 2486:  size_type __cap =
        -: 2487:      __old_cap < __ms / 2 - __alignment ? __recommend(std::max(__old_cap + __delta_cap, 2 * __old_cap)) : __ms - 1;
        -: 2488:  __annotate_delete();
        -: 2489:  auto __allocation = std::__allocate_at_least(__alloc(), __cap + 1);
        -: 2490:  pointer __p       = __allocation.ptr;
        -: 2491:  __begin_lifetime(__p, __allocation.count);
        -: 2492:  if (__n_copy != 0)
        -: 2493:    traits_type::copy(std::__to_address(__p), std::__to_address(__old_p), __n_copy);
        -: 2494:  if (__n_add != 0)
        -: 2495:    traits_type::copy(std::__to_address(__p) + __n_copy, __p_new_stuff, __n_add);
        -: 2496:  size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
        -: 2497:  if (__sec_cp_sz != 0)
        -: 2498:    traits_type::copy(
        -: 2499:        std::__to_address(__p) + __n_copy + __n_add, std::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);
        -: 2500:  if (__old_cap + 1 != __min_cap)
        -: 2501:    __alloc_traits::deallocate(__alloc(), __old_p, __old_cap + 1);
        -: 2502:  __set_long_pointer(__p);
        -: 2503:  __set_long_cap(__allocation.count);
        -: 2504:  __old_sz = __n_copy + __n_add + __sec_cp_sz;
        -: 2505:  __set_long_size(__old_sz);
        -: 2506:  traits_type::assign(__p[__old_sz], value_type());
        -: 2507:  __annotate_new(__old_sz);
        -: 2508:}
        -: 2509:
        -: 2510:// __grow_by is deprecated because it does not set the size. It may not update the size when the size is changed, and it
        -: 2511:// may also not set the size at all when the string was short initially. This leads to unpredictable size value. It is
        -: 2512:// not removed or changed to avoid breaking the ABI.
        -: 2513:template <class _CharT, class _Traits, class _Allocator>
        -: 2514:void _LIBCPP_CONSTEXPR_SINCE_CXX20
        -: 2515:#if _LIBCPP_ABI_VERSION >= 2 // We want to use the function in the dylib in ABIv1
        -: 2516:_LIBCPP_HIDE_FROM_ABI
        -: 2517:#endif
        -: 2518:_LIBCPP_DEPRECATED_("use __grow_by_without_replace") basic_string<_CharT, _Traits, _Allocator>::__grow_by(
        -: 2519:    size_type __old_cap,
        -: 2520:    size_type __delta_cap,
        -: 2521:    size_type __old_sz,
        -: 2522:    size_type __n_copy,
        -: 2523:    size_type __n_del,
        -: 2524:    size_type __n_add) {
        -: 2525:  size_type __ms = max_size();
        -: 2526:  if (__delta_cap > __ms - __old_cap)
        -: 2527:    __throw_length_error();
        -: 2528:  pointer __old_p = __get_pointer();
        -: 2529:  size_type __cap =
        -: 2530:      __old_cap < __ms / 2 - __alignment ? __recommend(std::max(__old_cap + __delta_cap, 2 * __old_cap)) : __ms - 1;
        -: 2531:  __annotate_delete();
        -: 2532:  auto __allocation = std::__allocate_at_least(__alloc(), __cap + 1);
        -: 2533:  pointer __p       = __allocation.ptr;
        -: 2534:  __begin_lifetime(__p, __allocation.count);
        -: 2535:  if (__n_copy != 0)
        -: 2536:    traits_type::copy(std::__to_address(__p), std::__to_address(__old_p), __n_copy);
        -: 2537:  size_type __sec_cp_sz = __old_sz - __n_del - __n_copy;
        -: 2538:  if (__sec_cp_sz != 0)
        -: 2539:    traits_type::copy(
        -: 2540:        std::__to_address(__p) + __n_copy + __n_add, std::__to_address(__old_p) + __n_copy + __n_del, __sec_cp_sz);
        -: 2541:  if (__old_cap + 1 != __min_cap)
        -: 2542:    __alloc_traits::deallocate(__alloc(), __old_p, __old_cap + 1);
        -: 2543:  __set_long_pointer(__p);
        -: 2544:  __set_long_cap(__allocation.count);
        -: 2545:}
        -: 2546:
        -: 2547:template <class _CharT, class _Traits, class _Allocator>
        -: 2548:void _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_HIDE_FROM_ABI
        -: 2549:basic_string<_CharT, _Traits, _Allocator>::__grow_by_without_replace(
        -: 2550:    size_type __old_cap,
        -: 2551:    size_type __delta_cap,
        -: 2552:    size_type __old_sz,
        -: 2553:    size_type __n_copy,
        -: 2554:    size_type __n_del,
        -: 2555:    size_type __n_add) {
        -: 2556:  _LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 2557:  __grow_by(__old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
        -: 2558:  _LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 2559:  __set_long_size(__old_sz - __n_del + __n_add);
        -: 2560:  __annotate_new(__old_sz - __n_del + __n_add);
        -: 2561:}
        -: 2562:
        -: 2563:// assign
        -: 2564:
        -: 2565:template <class _CharT, class _Traits, class _Allocator>
        -: 2566:template <bool __is_short>
        -: 2567:_LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE basic_string<_CharT, _Traits, _Allocator>&
        -: 2568:basic_string<_CharT, _Traits, _Allocator>::__assign_no_alias(const value_type* __s, size_type __n) {
        -: 2569:  size_type __cap = __is_short ? static_cast<size_type>(__min_cap) : __get_long_cap();
        -: 2570:  if (__n < __cap) {
        -: 2571:    size_type __old_size = __is_short ? __get_short_size() : __get_long_size();
        -: 2572:    if (__n > __old_size)
        -: 2573:      __annotate_increase(__n - __old_size);
        -: 2574:    pointer __p = __is_short ? __get_short_pointer() : __get_long_pointer();
        -: 2575:    __is_short ? __set_short_size(__n) : __set_long_size(__n);
        -: 2576:    traits_type::copy(std::__to_address(__p), __s, __n);
        -: 2577:    traits_type::assign(__p[__n], value_type());
        -: 2578:    if (__old_size > __n)
        -: 2579:      __annotate_shrink(__old_size);
        -: 2580:  } else {
        -: 2581:    size_type __sz = __is_short ? __get_short_size() : __get_long_size();
        -: 2582:    __grow_by_and_replace(__cap - 1, __n - __cap + 1, __sz, 0, __sz, __n, __s);
        -: 2583:  }
        -: 2584:  return *this;
        -: 2585:}
        -: 2586:
        -: 2587:template <class _CharT, class _Traits, class _Allocator>
        -: 2588:_LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE basic_string<_CharT, _Traits, _Allocator>&
        -: 2589:basic_string<_CharT, _Traits, _Allocator>::__assign_external(const value_type* __s, size_type __n) {
        -: 2590:  size_type __cap = capacity();
        -: 2591:  if (__cap >= __n) {
        -: 2592:    size_type __old_size = size();
        -: 2593:    if (__n > __old_size)
        -: 2594:      __annotate_increase(__n - __old_size);
        -: 2595:    value_type* __p = std::__to_address(__get_pointer());
        -: 2596:    traits_type::move(__p, __s, __n);
        -: 2597:    return __null_terminate_at(__p, __n);
        -: 2598:  } else {
        -: 2599:    size_type __sz = size();
        -: 2600:    __grow_by_and_replace(__cap, __n - __cap, __sz, 0, __sz, __n, __s);
        -: 2601:    return *this;
        -: 2602:  }
        -: 2603:}
        -: 2604:
        -: 2605:template <class _CharT, class _Traits, class _Allocator>
        -: 2606:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2607:basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s, size_type __n) {
        -: 2608:  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::assign received nullptr");
        -: 2609:  return (__builtin_constant_p(__n) && __fits_in_sso(__n)) ? __assign_short(__s, __n) : __assign_external(__s, __n);
        -: 2610:}
        -: 2611:
        -: 2612:template <class _CharT, class _Traits, class _Allocator>
        -: 2613:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2614:basic_string<_CharT, _Traits, _Allocator>::assign(size_type __n, value_type __c) {
        -: 2615:  size_type __cap      = capacity();
        -: 2616:  size_type __old_size = size();
        -: 2617:  if (__cap < __n) {
        -: 2618:    size_type __sz = size();
        -: 2619:    __grow_by_without_replace(__cap, __n - __cap, __sz, 0, __sz);
        -: 2620:    __annotate_increase(__n);
        -: 2621:  } else if (__n > __old_size)
        -: 2622:    __annotate_increase(__n - __old_size);
        -: 2623:  value_type* __p = std::__to_address(__get_pointer());
        -: 2624:  traits_type::assign(__p, __n, __c);
        -: 2625:  return __null_terminate_at(__p, __n);
        -: 2626:}
        -: 2627:
        -: 2628:template <class _CharT, class _Traits, class _Allocator>
        -: 2629:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2630:basic_string<_CharT, _Traits, _Allocator>::operator=(value_type __c) {
        -: 2631:  pointer __p;
        -: 2632:  size_type __old_size = size();
        -: 2633:  if (__old_size == 0)
        -: 2634:    __annotate_increase(1);
        -: 2635:  if (__is_long()) {
        -: 2636:    __p = __get_long_pointer();
        -: 2637:    __set_long_size(1);
        -: 2638:  } else {
        -: 2639:    __p = __get_short_pointer();
        -: 2640:    __set_short_size(1);
        -: 2641:  }
        -: 2642:  traits_type::assign(*__p, __c);
        -: 2643:  traits_type::assign(*++__p, value_type());
        -: 2644:  if (__old_size > 1)
        -: 2645:    __annotate_shrink(__old_size);
        -: 2646:  return *this;
        -: 2647:}
        -: 2648:
        -: 2649:template <class _CharT, class _Traits, class _Allocator>
        -: 2650:_LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS basic_string<_CharT, _Traits, _Allocator>&
        -: 2651:basic_string<_CharT, _Traits, _Allocator>::operator=(const basic_string& __str) {
        -: 2652:  if (this != std::addressof(__str)) {
        -: 2653:    __copy_assign_alloc(__str);
        -: 2654:    if (!__is_long()) {
        -: 2655:      if (!__str.__is_long()) {
        -: 2656:        size_type __old_size = __get_short_size();
        -: 2657:        if (__get_short_size() < __str.__get_short_size())
        -: 2658:          __annotate_increase(__str.__get_short_size() - __get_short_size());
        -: 2659:        __r_.first() = __str.__r_.first();
        -: 2660:        if (__old_size > __get_short_size())
        -: 2661:          __annotate_shrink(__old_size);
        -: 2662:      } else {
        -: 2663:        return __assign_no_alias<true>(__str.data(), __str.size());
        -: 2664:      }
        -: 2665:    } else {
        -: 2666:      return __assign_no_alias<false>(__str.data(), __str.size());
        -: 2667:    }
        -: 2668:  }
        -: 2669:  return *this;
        -: 2670:}
        -: 2671:
        -: 2672:#ifndef _LIBCPP_CXX03_LANG
        -: 2673:
        -: 2674:template <class _CharT, class _Traits, class _Allocator>
        -: 2675:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::__move_assign(
        -: 2676:    basic_string& __str, false_type) noexcept(__alloc_traits::is_always_equal::value) {
        -: 2677:  if (__alloc() != __str.__alloc())
        -: 2678:    assign(__str);
        -: 2679:  else
        -: 2680:    __move_assign(__str, true_type());
        -: 2681:}
        -: 2682:
        -: 2683:template <class _CharT, class _Traits, class _Allocator>
        -: 2684:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_STRING_INTERNAL_MEMORY_ACCESS void
        -: 2685:basic_string<_CharT, _Traits, _Allocator>::__move_assign(basic_string& __str, true_type)
        -: 2686:#  if _LIBCPP_STD_VER >= 17
        -: 2687:    noexcept
        -: 2688:#  else
        -: 2689:    noexcept(is_nothrow_move_assignable<allocator_type>::value)
        -: 2690:#  endif
        -: 2691:{
        -: 2692:  __annotate_delete();
        -: 2693:  if (__is_long()) {
        -: 2694:    __alloc_traits::deallocate(__alloc(), __get_long_pointer(), __get_long_cap());
        -: 2695:#  if _LIBCPP_STD_VER <= 14
        -: 2696:    if (!is_nothrow_move_assignable<allocator_type>::value) {
        -: 2697:      __set_short_size(0);
        -: 2698:      traits_type::assign(__get_short_pointer()[0], value_type());
        -: 2699:      __annotate_new(0);
        -: 2700:    }
        -: 2701:#  endif
        -: 2702:  }
        -: 2703:  size_type __str_old_size = __str.size();
        -: 2704:  bool __str_was_short     = !__str.__is_long();
        -: 2705:
        -: 2706:  __move_assign_alloc(__str);
        -: 2707:  __r_.first() = __str.__r_.first();
        -: 2708:  __str.__set_short_size(0);
        -: 2709:  traits_type::assign(__str.__get_short_pointer()[0], value_type());
        -: 2710:
        -: 2711:  if (__str_was_short && this != &__str)
        -: 2712:    __str.__annotate_shrink(__str_old_size);
        -: 2713:  else
        -: 2714:    // ASan annotations: was long, so object memory is unpoisoned as new.
        -: 2715:    // Or is same as *this, and __annotate_delete() was called.
        -: 2716:    __str.__annotate_new(0);
        -: 2717:
        -: 2718:  // ASan annotations: Guard against `std::string s; s = std::move(s);`
        -: 2719:  // You can find more here: https://en.cppreference.com/w/cpp/utility/move
        -: 2720:  // Quote: "Unless otherwise specified, all standard library objects that have been moved
        -: 2721:  // from are placed in a "valid but unspecified state", meaning the object's class
        -: 2722:  // invariants hold (so functions without preconditions, such as the assignment operator,
        -: 2723:  // can be safely used on the object after it was moved from):"
        -: 2724:  // Quote: "v = std::move(v); // the value of v is unspecified"
        -: 2725:  if (!__is_long() && &__str != this)
        -: 2726:    // If it is long string, delete was never called on original __str's buffer.
        -: 2727:    __annotate_new(__get_short_size());
        -: 2728:}
        -: 2729:
        -: 2730:#endif
        -: 2731:
        -: 2732:template <class _CharT, class _Traits, class _Allocator>
        -: 2733:template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
        -: 2734:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2735:basic_string<_CharT, _Traits, _Allocator>::assign(_InputIterator __first, _InputIterator __last) {
        -: 2736:  __assign_with_sentinel(__first, __last);
        -: 2737:  return *this;
        -: 2738:}
        -: 2739:
        -: 2740:template <class _CharT, class _Traits, class _Allocator>
        -: 2741:template <class _InputIterator, class _Sentinel>
        -: 2742:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 2743:basic_string<_CharT, _Traits, _Allocator>::__assign_with_sentinel(_InputIterator __first, _Sentinel __last) {
        -: 2744:  const basic_string __temp(__init_with_sentinel_tag(), std::move(__first), std::move(__last), __alloc());
        -: 2745:  assign(__temp.data(), __temp.size());
        -: 2746:}
        -: 2747:
        -: 2748:template <class _CharT, class _Traits, class _Allocator>
        -: 2749:template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
        -: 2750:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2751:basic_string<_CharT, _Traits, _Allocator>::assign(_ForwardIterator __first, _ForwardIterator __last) {
        -: 2752:  if (__string_is_trivial_iterator<_ForwardIterator>::value) {
        -: 2753:    size_type __n = static_cast<size_type>(std::distance(__first, __last));
        -: 2754:    __assign_trivial(__first, __last, __n);
        -: 2755:  } else {
        -: 2756:    __assign_with_sentinel(__first, __last);
        -: 2757:  }
        -: 2758:
        -: 2759:  return *this;
        -: 2760:}
        -: 2761:
        -: 2762:template <class _CharT, class _Traits, class _Allocator>
        -: 2763:template <class _Iterator, class _Sentinel>
        -: 2764:_LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_HIDE_FROM_ABI void
        -: 2765:basic_string<_CharT, _Traits, _Allocator>::__assign_trivial(_Iterator __first, _Sentinel __last, size_type __n) {
        -: 2766:  _LIBCPP_ASSERT_INTERNAL(
        -: 2767:      __string_is_trivial_iterator<_Iterator>::value, "The iterator type given to `__assign_trivial` must be trivial");
        -: 2768:
        -: 2769:  size_type __old_size = size();
        -: 2770:  size_type __cap      = capacity();
        -: 2771:  if (__cap < __n) {
        -: 2772:    // Unlike `append` functions, if the input range points into the string itself, there is no case that the input
        -: 2773:    // range could get invalidated by reallocation:
        -: 2774:    // 1. If the input range is a subset of the string itself, its size cannot exceed the capacity of the string,
        -: 2775:    //    thus no reallocation would happen.
        -: 2776:    // 2. In the exotic case where the input range is the byte representation of the string itself, the string
        -: 2777:    //    object itself stays valid even if reallocation happens.
        -: 2778:    size_type __sz = size();
        -: 2779:    __grow_by_without_replace(__cap, __n - __cap, __sz, 0, __sz);
        -: 2780:    __annotate_increase(__n);
        -: 2781:  } else if (__n > __old_size)
        -: 2782:    __annotate_increase(__n - __old_size);
        -: 2783:  pointer __p = __get_pointer();
        -: 2784:  for (; __first != __last; ++__p, (void)++__first)
        -: 2785:    traits_type::assign(*__p, *__first);
        -: 2786:  traits_type::assign(*__p, value_type());
        -: 2787:  __set_size(__n);
        -: 2788:  if (__n < __old_size)
        -: 2789:    __annotate_shrink(__old_size);
        -: 2790:}
        -: 2791:
        -: 2792:template <class _CharT, class _Traits, class _Allocator>
        -: 2793:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2794:basic_string<_CharT, _Traits, _Allocator>::assign(const basic_string& __str, size_type __pos, size_type __n) {
        -: 2795:  size_type __sz = __str.size();
        -: 2796:  if (__pos > __sz)
        -: 2797:    __throw_out_of_range();
        -: 2798:  return assign(__str.data() + __pos, std::min(__n, __sz - __pos));
        -: 2799:}
        -: 2800:
        -: 2801:template <class _CharT, class _Traits, class _Allocator>
        -: 2802:template <class _Tp,
        -: 2803:          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 2804:                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 2805:                        int> >
        -: 2806:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2807:basic_string<_CharT, _Traits, _Allocator>::assign(const _Tp& __t, size_type __pos, size_type __n) {
        -: 2808:  __self_view __sv = __t;
        -: 2809:  size_type __sz   = __sv.size();
        -: 2810:  if (__pos > __sz)
        -: 2811:    __throw_out_of_range();
        -: 2812:  return assign(__sv.data() + __pos, std::min(__n, __sz - __pos));
        -: 2813:}
        -: 2814:
        -: 2815:template <class _CharT, class _Traits, class _Allocator>
        -: 2816:_LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE basic_string<_CharT, _Traits, _Allocator>&
        -: 2817:basic_string<_CharT, _Traits, _Allocator>::__assign_external(const value_type* __s) {
        -: 2818:  return __assign_external(__s, traits_type::length(__s));
        -: 2819:}
        -: 2820:
        -: 2821:template <class _CharT, class _Traits, class _Allocator>
        -: 2822:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2823:basic_string<_CharT, _Traits, _Allocator>::assign(const value_type* __s) {
        -: 2824:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::assign received nullptr");
        -: 2825:  return __builtin_constant_p(*__s)
        -: 2826:           ? (__fits_in_sso(traits_type::length(__s)) ? __assign_short(__s, traits_type::length(__s))
        -: 2827:                                                      : __assign_external(__s, traits_type::length(__s)))
        -: 2828:           : __assign_external(__s);
        -: 2829:}
        -: 2830:// append
        -: 2831:
        -: 2832:template <class _CharT, class _Traits, class _Allocator>
        -: 2833:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2834:basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s, size_type __n) {
        -: 2835:  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::append received nullptr");
        -: 2836:  size_type __cap = capacity();
        -: 2837:  size_type __sz  = size();
        -: 2838:  if (__cap - __sz >= __n) {
        -: 2839:    if (__n) {
        -: 2840:      __annotate_increase(__n);
        -: 2841:      value_type* __p = std::__to_address(__get_pointer());
        -: 2842:      traits_type::copy(__p + __sz, __s, __n);
        -: 2843:      __sz += __n;
        -: 2844:      __set_size(__sz);
        -: 2845:      traits_type::assign(__p[__sz], value_type());
        -: 2846:    }
        -: 2847:  } else
        -: 2848:    __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __sz, 0, __n, __s);
        -: 2849:  return *this;
        -: 2850:}
        -: 2851:
        -: 2852:template <class _CharT, class _Traits, class _Allocator>
        -: 2853:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2854:basic_string<_CharT, _Traits, _Allocator>::append(size_type __n, value_type __c) {
        -: 2855:  if (__n) {
        -: 2856:    size_type __cap = capacity();
        -: 2857:    size_type __sz  = size();
        -: 2858:    if (__cap - __sz < __n)
        -: 2859:      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2860:    __annotate_increase(__n);
        -: 2861:    pointer __p = __get_pointer();
        -: 2862:    traits_type::assign(std::__to_address(__p) + __sz, __n, __c);
        -: 2863:    __sz += __n;
        -: 2864:    __set_size(__sz);
        -: 2865:    traits_type::assign(__p[__sz], value_type());
        -: 2866:  }
        -: 2867:  return *this;
        -: 2868:}
        -: 2869:
        -: 2870:template <class _CharT, class _Traits, class _Allocator>
        -: 2871:_LIBCPP_CONSTEXPR_SINCE_CXX20 inline void
        -: 2872:basic_string<_CharT, _Traits, _Allocator>::__append_default_init(size_type __n) {
        -: 2873:  if (__n) {
        -: 2874:    size_type __cap = capacity();
        -: 2875:    size_type __sz  = size();
        -: 2876:    if (__cap - __sz < __n)
        -: 2877:      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2878:    __annotate_increase(__n);
        -: 2879:    pointer __p = __get_pointer();
        -: 2880:    __sz += __n;
        -: 2881:    __set_size(__sz);
        -: 2882:    traits_type::assign(__p[__sz], value_type());
        -: 2883:  }
        -: 2884:}
        -: 2885:
        -: 2886:template <class _CharT, class _Traits, class _Allocator>
        -: 2887:_LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::push_back(value_type __c) {
        -: 2888:  bool __is_short = !__is_long();
        -: 2889:  size_type __cap;
        -: 2890:  size_type __sz;
        -: 2891:  if (__is_short) {
        -: 2892:    __cap = __min_cap - 1;
        -: 2893:    __sz  = __get_short_size();
        -: 2894:  } else {
        -: 2895:    __cap = __get_long_cap() - 1;
        -: 2896:    __sz  = __get_long_size();
        -: 2897:  }
        -: 2898:  if (__sz == __cap) {
        -: 2899:    __grow_by_without_replace(__cap, 1, __sz, __sz, 0);
        -: 2900:    __annotate_increase(1);
        -: 2901:    __is_short = false; // the string is always long after __grow_by
        -: 2902:  } else
        -: 2903:    __annotate_increase(1);
        -: 2904:  pointer __p = __get_pointer();
        -: 2905:  if (__is_short) {
        -: 2906:    __p = __get_short_pointer() + __sz;
        -: 2907:    __set_short_size(__sz + 1);
        -: 2908:  } else {
        -: 2909:    __p = __get_long_pointer() + __sz;
        -: 2910:    __set_long_size(__sz + 1);
        -: 2911:  }
        -: 2912:  traits_type::assign(*__p, __c);
        -: 2913:  traits_type::assign(*++__p, value_type());
        -: 2914:}
        -: 2915:
        -: 2916:template <class _CharT, class _Traits, class _Allocator>
        -: 2917:template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
        -: 2918:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2919:basic_string<_CharT, _Traits, _Allocator>::append(_ForwardIterator __first, _ForwardIterator __last) {
        -: 2920:  size_type __sz  = size();
        -: 2921:  size_type __cap = capacity();
        -: 2922:  size_type __n   = static_cast<size_type>(std::distance(__first, __last));
        -: 2923:  if (__n) {
        -: 2924:    if (__string_is_trivial_iterator<_ForwardIterator>::value && !__addr_in_range(*__first)) {
        -: 2925:      if (__cap - __sz < __n)
        -: 2926:        __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __sz, 0);
        -: 2927:      __annotate_increase(__n);
        -: 2928:      auto __end = __copy_non_overlapping_range(__first, __last, std::__to_address(__get_pointer() + __sz));
        -: 2929:      traits_type::assign(*__end, value_type());
        -: 2930:      __set_size(__sz + __n);
        -: 2931:    } else {
        -: 2932:      const basic_string __temp(__first, __last, __alloc());
        -: 2933:      append(__temp.data(), __temp.size());
        -: 2934:    }
        -: 2935:  }
        -: 2936:  return *this;
        -: 2937:}
        -: 2938:
        -: 2939:template <class _CharT, class _Traits, class _Allocator>
        -: 2940:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2941:basic_string<_CharT, _Traits, _Allocator>::append(const basic_string& __str, size_type __pos, size_type __n) {
        -: 2942:  size_type __sz = __str.size();
        -: 2943:  if (__pos > __sz)
        -: 2944:    __throw_out_of_range();
        -: 2945:  return append(__str.data() + __pos, std::min(__n, __sz - __pos));
        -: 2946:}
        -: 2947:
        -: 2948:template <class _CharT, class _Traits, class _Allocator>
        -: 2949:template <class _Tp,
        -: 2950:          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 2951:                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 2952:                        int> >
        -: 2953:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2954:basic_string<_CharT, _Traits, _Allocator>::append(const _Tp& __t, size_type __pos, size_type __n) {
        -: 2955:  __self_view __sv = __t;
        -: 2956:  size_type __sz   = __sv.size();
        -: 2957:  if (__pos > __sz)
        -: 2958:    __throw_out_of_range();
        -: 2959:  return append(__sv.data() + __pos, std::min(__n, __sz - __pos));
        -: 2960:}
        -: 2961:
        -: 2962:template <class _CharT, class _Traits, class _Allocator>
        -: 2963:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2964:basic_string<_CharT, _Traits, _Allocator>::append(const value_type* __s) {
        -: 2965:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::append received nullptr");
        -: 2966:  return append(__s, traits_type::length(__s));
        -: 2967:}
        -: 2968:
        -: 2969:// insert
        -: 2970:
        -: 2971:template <class _CharT, class _Traits, class _Allocator>
        -: 2972:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 2973:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s, size_type __n) {
        -: 2974:  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::insert received nullptr");
        -: 2975:  size_type __sz = size();
        -: 2976:  if (__pos > __sz)
        -: 2977:    __throw_out_of_range();
        -: 2978:  size_type __cap = capacity();
        -: 2979:  if (__cap - __sz >= __n) {
        -: 2980:    if (__n) {
        -: 2981:      __annotate_increase(__n);
        -: 2982:      value_type* __p    = std::__to_address(__get_pointer());
        -: 2983:      size_type __n_move = __sz - __pos;
        -: 2984:      if (__n_move != 0) {
        -: 2985:        if (std::__is_pointer_in_range(__p + __pos, __p + __sz, __s))
        -: 2986:          __s += __n;
        -: 2987:        traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
        -: 2988:      }
        -: 2989:      traits_type::move(__p + __pos, __s, __n);
        -: 2990:      __sz += __n;
        -: 2991:      __set_size(__sz);
        -: 2992:      traits_type::assign(__p[__sz], value_type());
        -: 2993:    }
        -: 2994:  } else
        -: 2995:    __grow_by_and_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n, __s);
        -: 2996:  return *this;
        -: 2997:}
        -: 2998:
        -: 2999:template <class _CharT, class _Traits, class _Allocator>
        -: 3000:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3001:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, size_type __n, value_type __c) {
        -: 3002:  size_type __sz = size();
        -: 3003:  if (__pos > __sz)
        -: 3004:    __throw_out_of_range();
        -: 3005:  if (__n) {
        -: 3006:    size_type __cap = capacity();
        -: 3007:    value_type* __p;
        -: 3008:    if (__cap - __sz >= __n) {
        -: 3009:      __annotate_increase(__n);
        -: 3010:      __p                = std::__to_address(__get_pointer());
        -: 3011:      size_type __n_move = __sz - __pos;
        -: 3012:      if (__n_move != 0)
        -: 3013:        traits_type::move(__p + __pos + __n, __p + __pos, __n_move);
        -: 3014:    } else {
        -: 3015:      __grow_by_without_replace(__cap, __sz + __n - __cap, __sz, __pos, 0, __n);
        -: 3016:      __p = std::__to_address(__get_long_pointer());
        -: 3017:    }
        -: 3018:    traits_type::assign(__p + __pos, __n, __c);
        -: 3019:    __sz += __n;
        -: 3020:    __set_size(__sz);
        -: 3021:    traits_type::assign(__p[__sz], value_type());
        -: 3022:  }
        -: 3023:  return *this;
        -: 3024:}
        -: 3025:
        -: 3026:template <class _CharT, class _Traits, class _Allocator>
        -: 3027:template <class _InputIterator, __enable_if_t<__has_exactly_input_iterator_category<_InputIterator>::value, int> >
        -: 3028:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3029:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, _InputIterator __first, _InputIterator __last) {
        -: 3030:  const basic_string __temp(__first, __last, __alloc());
        -: 3031:  return insert(__pos, __temp.data(), __temp.data() + __temp.size());
        -: 3032:}
        -: 3033:
        -: 3034:template <class _CharT, class _Traits, class _Allocator>
        -: 3035:template <class _ForwardIterator, __enable_if_t<__has_forward_iterator_category<_ForwardIterator>::value, int> >
        -: 3036:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3037:basic_string<_CharT, _Traits, _Allocator>::insert(
        -: 3038:    const_iterator __pos, _ForwardIterator __first, _ForwardIterator __last) {
        -: 3039:  auto __n = static_cast<size_type>(std::distance(__first, __last));
        -: 3040:  return __insert_with_size(__pos, __first, __last, __n);
        -: 3041:}
        -: 3042:
        -: 3043:template <class _CharT, class _Traits, class _Allocator>
        -: 3044:template <class _Iterator, class _Sentinel>
        -: 3045:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3046:basic_string<_CharT, _Traits, _Allocator>::__insert_with_size(
        -: 3047:    const_iterator __pos, _Iterator __first, _Sentinel __last, size_type __n) {
        -: 3048:  size_type __ip = static_cast<size_type>(__pos - begin());
        -: 3049:  if (__n == 0)
        -: 3050:    return begin() + __ip;
        -: 3051:
        -: 3052:  if (__string_is_trivial_iterator<_Iterator>::value && !__addr_in_range(*__first)) {
        -: 3053:    return __insert_from_safe_copy(__n, __ip, __first, __last);
        -: 3054:  } else {
        -: 3055:    const basic_string __temp(__init_with_sentinel_tag(), __first, __last, __alloc());
        -: 3056:    return __insert_from_safe_copy(__n, __ip, __temp.begin(), __temp.end());
        -: 3057:  }
        -: 3058:}
        -: 3059:
        -: 3060:template <class _CharT, class _Traits, class _Allocator>
        -: 3061:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3062:basic_string<_CharT, _Traits, _Allocator>::insert(
        -: 3063:    size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n) {
        -: 3064:  size_type __str_sz = __str.size();
        -: 3065:  if (__pos2 > __str_sz)
        -: 3066:    __throw_out_of_range();
        -: 3067:  return insert(__pos1, __str.data() + __pos2, std::min(__n, __str_sz - __pos2));
        -: 3068:}
        -: 3069:
        -: 3070:template <class _CharT, class _Traits, class _Allocator>
        -: 3071:template <class _Tp,
        -: 3072:          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 3073:                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 3074:                        int> >
        -: 3075:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3076:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos1, const _Tp& __t, size_type __pos2, size_type __n) {
        -: 3077:  __self_view __sv   = __t;
        -: 3078:  size_type __str_sz = __sv.size();
        -: 3079:  if (__pos2 > __str_sz)
        -: 3080:    __throw_out_of_range();
        -: 3081:  return insert(__pos1, __sv.data() + __pos2, std::min(__n, __str_sz - __pos2));
        -: 3082:}
        -: 3083:
        -: 3084:template <class _CharT, class _Traits, class _Allocator>
        -: 3085:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3086:basic_string<_CharT, _Traits, _Allocator>::insert(size_type __pos, const value_type* __s) {
        -: 3087:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::insert received nullptr");
        -: 3088:  return insert(__pos, __s, traits_type::length(__s));
        -: 3089:}
        -: 3090:
        -: 3091:template <class _CharT, class _Traits, class _Allocator>
        -: 3092:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3093:basic_string<_CharT, _Traits, _Allocator>::insert(const_iterator __pos, value_type __c) {
        -: 3094:  size_type __ip  = static_cast<size_type>(__pos - begin());
        -: 3095:  size_type __sz  = size();
        -: 3096:  size_type __cap = capacity();
        -: 3097:  value_type* __p;
        -: 3098:  if (__cap == __sz) {
        -: 3099:    __grow_by_without_replace(__cap, 1, __sz, __ip, 0, 1);
        -: 3100:    __p = std::__to_address(__get_long_pointer());
        -: 3101:  } else {
        -: 3102:    __annotate_increase(1);
        -: 3103:    __p                = std::__to_address(__get_pointer());
        -: 3104:    size_type __n_move = __sz - __ip;
        -: 3105:    if (__n_move != 0)
        -: 3106:      traits_type::move(__p + __ip + 1, __p + __ip, __n_move);
        -: 3107:  }
        -: 3108:  traits_type::assign(__p[__ip], __c);
        -: 3109:  traits_type::assign(__p[++__sz], value_type());
        -: 3110:  __set_size(__sz);
        -: 3111:  return begin() + static_cast<difference_type>(__ip);
        -: 3112:}
        -: 3113:
        -: 3114:// replace
        -: 3115:
        -: 3116:template <class _CharT, class _Traits, class _Allocator>
        -: 3117:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3118:basic_string<_CharT, _Traits, _Allocator>::replace(
        -: 3119:    size_type __pos, size_type __n1, const value_type* __s, size_type __n2)
        -: 3120:    _LIBCPP_DISABLE_UBSAN_UNSIGNED_INTEGER_CHECK {
        -: 3121:  _LIBCPP_ASSERT_NON_NULL(__n2 == 0 || __s != nullptr, "string::replace received nullptr");
        -: 3122:  size_type __sz = size();
        -: 3123:  if (__pos > __sz)
        -: 3124:    __throw_out_of_range();
        -: 3125:  __n1            = std::min(__n1, __sz - __pos);
        -: 3126:  size_type __cap = capacity();
        -: 3127:  if (__cap - __sz + __n1 >= __n2) {
        -: 3128:    value_type* __p = std::__to_address(__get_pointer());
        -: 3129:    if (__n1 != __n2) {
        -: 3130:      if (__n2 > __n1)
        -: 3131:        __annotate_increase(__n2 - __n1);
        -: 3132:      size_type __n_move = __sz - __pos - __n1;
        -: 3133:      if (__n_move != 0) {
        -: 3134:        if (__n1 > __n2) {
        -: 3135:          traits_type::move(__p + __pos, __s, __n2);
        -: 3136:          traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 3137:          return __null_terminate_at(__p, __sz + (__n2 - __n1));
        -: 3138:        }
        -: 3139:        if (std::__is_pointer_in_range(__p + __pos + 1, __p + __sz, __s)) {
        -: 3140:          if (__p + __pos + __n1 <= __s)
        -: 3141:            __s += __n2 - __n1;
        -: 3142:          else // __p + __pos < __s < __p + __pos + __n1
        -: 3143:          {
        -: 3144:            traits_type::move(__p + __pos, __s, __n1);
        -: 3145:            __pos += __n1;
        -: 3146:            __s += __n2;
        -: 3147:            __n2 -= __n1;
        -: 3148:            __n1 = 0;
        -: 3149:          }
        -: 3150:        }
        -: 3151:        traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 3152:      }
        -: 3153:    }
        -: 3154:    traits_type::move(__p + __pos, __s, __n2);
        -: 3155:    return __null_terminate_at(__p, __sz + (__n2 - __n1));
        -: 3156:  } else
        -: 3157:    __grow_by_and_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2, __s);
        -: 3158:  return *this;
        -: 3159:}
        -: 3160:
        -: 3161:template <class _CharT, class _Traits, class _Allocator>
        -: 3162:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3163:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, size_type __n2, value_type __c) {
        -: 3164:  size_type __sz = size();
        -: 3165:  if (__pos > __sz)
        -: 3166:    __throw_out_of_range();
        -: 3167:  __n1            = std::min(__n1, __sz - __pos);
        -: 3168:  size_type __cap = capacity();
        -: 3169:  value_type* __p;
        -: 3170:  if (__cap - __sz + __n1 >= __n2) {
        -: 3171:    __p = std::__to_address(__get_pointer());
        -: 3172:    if (__n1 != __n2) {
        -: 3173:      if (__n2 > __n1)
        -: 3174:        __annotate_increase(__n2 - __n1);
        -: 3175:      size_type __n_move = __sz - __pos - __n1;
        -: 3176:      if (__n_move != 0)
        -: 3177:        traits_type::move(__p + __pos + __n2, __p + __pos + __n1, __n_move);
        -: 3178:    }
        -: 3179:  } else {
        -: 3180:    __grow_by_without_replace(__cap, __sz - __n1 + __n2 - __cap, __sz, __pos, __n1, __n2);
        -: 3181:    __p = std::__to_address(__get_long_pointer());
        -: 3182:  }
        -: 3183:  traits_type::assign(__p + __pos, __n2, __c);
        -: 3184:  return __null_terminate_at(__p, __sz - (__n1 - __n2));
        -: 3185:}
        -: 3186:
        -: 3187:template <class _CharT, class _Traits, class _Allocator>
        -: 3188:template <class _InputIterator, __enable_if_t<__has_input_iterator_category<_InputIterator>::value, int> >
        -: 3189:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3190:basic_string<_CharT, _Traits, _Allocator>::replace(
        -: 3191:    const_iterator __i1, const_iterator __i2, _InputIterator __j1, _InputIterator __j2) {
        -: 3192:  const basic_string __temp(__j1, __j2, __alloc());
        -: 3193:  return replace(__i1, __i2, __temp);
        -: 3194:}
        -: 3195:
        -: 3196:template <class _CharT, class _Traits, class _Allocator>
        -: 3197:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3198:basic_string<_CharT, _Traits, _Allocator>::replace(
        -: 3199:    size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2) {
        -: 3200:  size_type __str_sz = __str.size();
        -: 3201:  if (__pos2 > __str_sz)
        -: 3202:    __throw_out_of_range();
        -: 3203:  return replace(__pos1, __n1, __str.data() + __pos2, std::min(__n2, __str_sz - __pos2));
        -: 3204:}
        -: 3205:
        -: 3206:template <class _CharT, class _Traits, class _Allocator>
        -: 3207:template <class _Tp,
        -: 3208:          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 3209:                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 3210:                        int> >
        -: 3211:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3212:basic_string<_CharT, _Traits, _Allocator>::replace(
        -: 3213:    size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2) {
        -: 3214:  __self_view __sv   = __t;
        -: 3215:  size_type __str_sz = __sv.size();
        -: 3216:  if (__pos2 > __str_sz)
        -: 3217:    __throw_out_of_range();
        -: 3218:  return replace(__pos1, __n1, __sv.data() + __pos2, std::min(__n2, __str_sz - __pos2));
        -: 3219:}
        -: 3220:
        -: 3221:template <class _CharT, class _Traits, class _Allocator>
        -: 3222:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3223:basic_string<_CharT, _Traits, _Allocator>::replace(size_type __pos, size_type __n1, const value_type* __s) {
        -: 3224:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::replace received nullptr");
        -: 3225:  return replace(__pos, __n1, __s, traits_type::length(__s));
        -: 3226:}
        -: 3227:
        -: 3228:// erase
        -: 3229:
        -: 3230:// 'externally instantiated' erase() implementation, called when __n != npos.
        -: 3231:// Does not check __pos against size()
        -: 3232:template <class _CharT, class _Traits, class _Allocator>
        -: 3233:_LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_NOINLINE void
        -: 3234:basic_string<_CharT, _Traits, _Allocator>::__erase_external_with_move(size_type __pos, size_type __n) {
        -: 3235:  if (__n) {
        -: 3236:    size_type __sz     = size();
        -: 3237:    value_type* __p    = std::__to_address(__get_pointer());
        -: 3238:    __n                = std::min(__n, __sz - __pos);
        -: 3239:    size_type __n_move = __sz - __pos - __n;
        -: 3240:    if (__n_move != 0)
        -: 3241:      traits_type::move(__p + __pos, __p + __pos + __n, __n_move);
        -: 3242:    __null_terminate_at(__p, __sz - __n);
        -: 3243:  }
        -: 3244:}
        -: 3245:
        -: 3246:template <class _CharT, class _Traits, class _Allocator>
        -: 3247:_LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>&
        -: 3248:basic_string<_CharT, _Traits, _Allocator>::erase(size_type __pos, size_type __n) {
        -: 3249:  if (__pos > size())
        -: 3250:    __throw_out_of_range();
        -: 3251:  if (__n == npos) {
        -: 3252:    __erase_to_end(__pos);
        -: 3253:  } else {
        -: 3254:    __erase_external_with_move(__pos, __n);
        -: 3255:  }
        -: 3256:  return *this;
        -: 3257:}
        -: 3258:
        -: 3259:template <class _CharT, class _Traits, class _Allocator>
        -: 3260:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3261:basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __pos) {
        -: 3262:  _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(
        -: 3263:      __pos != end(), "string::erase(iterator) called with a non-dereferenceable iterator");
        -: 3264:  iterator __b  = begin();
        -: 3265:  size_type __r = static_cast<size_type>(__pos - __b);
        -: 3266:  erase(__r, 1);
        -: 3267:  return __b + static_cast<difference_type>(__r);
        -: 3268:}
        -: 3269:
        -: 3270:template <class _CharT, class _Traits, class _Allocator>
        -: 3271:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::iterator
        -: 3272:basic_string<_CharT, _Traits, _Allocator>::erase(const_iterator __first, const_iterator __last) {
        -: 3273:  _LIBCPP_ASSERT_VALID_INPUT_RANGE(__first <= __last, "string::erase(first, last) called with invalid range");
        -: 3274:  iterator __b  = begin();
        -: 3275:  size_type __r = static_cast<size_type>(__first - __b);
        -: 3276:  erase(__r, static_cast<size_type>(__last - __first));
        -: 3277:  return __b + static_cast<difference_type>(__r);
        -: 3278:}
        -: 3279:
        -: 3280:template <class _CharT, class _Traits, class _Allocator>
        -: 3281:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::pop_back() {
        -: 3282:  _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(!empty(), "string::pop_back(): string is already empty");
        -: 3283:  __erase_to_end(size() - 1);
        -: 3284:}
        -: 3285:
        -: 3286:template <class _CharT, class _Traits, class _Allocator>
        -: 3287:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::clear() _NOEXCEPT {
        -: 3288:  size_type __old_size = size();
        -: 3289:  if (__is_long()) {
        -: 3290:    traits_type::assign(*__get_long_pointer(), value_type());
        -: 3291:    __set_long_size(0);
        -: 3292:  } else {
        -: 3293:    traits_type::assign(*__get_short_pointer(), value_type());
        -: 3294:    __set_short_size(0);
        -: 3295:  }
        -: 3296:  __annotate_shrink(__old_size);
        -: 3297:}
        -: 3298:
        -: 3299:template <class _CharT, class _Traits, class _Allocator>
        -: 3300:_LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::resize(size_type __n, value_type __c) {
        -: 3301:  size_type __sz = size();
        -: 3302:  if (__n > __sz)
        -: 3303:    append(__n - __sz, __c);
        -: 3304:  else
        -: 3305:    __erase_to_end(__n);
        -: 3306:}
        -: 3307:
        -: 3308:template <class _CharT, class _Traits, class _Allocator>
        -: 3309:_LIBCPP_CONSTEXPR_SINCE_CXX20 inline void
        -: 3310:basic_string<_CharT, _Traits, _Allocator>::__resize_default_init(size_type __n) {
        -: 3311:  size_type __sz = size();
        -: 3312:  if (__n > __sz) {
        -: 3313:    __append_default_init(__n - __sz);
        -: 3314:  } else
        -: 3315:    __erase_to_end(__n);
        -: 3316:}
        -: 3317:
        -: 3318:template <class _CharT, class _Traits, class _Allocator>
        -: 3319:_LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::reserve(size_type __requested_capacity) {
        -: 3320:  if (__requested_capacity > max_size())
        -: 3321:    __throw_length_error();
        -: 3322:
        -: 3323:  // Make sure reserve(n) never shrinks. This is technically only required in C++20
        -: 3324:  // and later (since P0966R1), however we provide consistent behavior in all Standard
        -: 3325:  // modes because this function is instantiated in the shared library.
        -: 3326:  if (__requested_capacity <= capacity())
        -: 3327:    return;
        -: 3328:
        -: 3329:  size_type __target_capacity = std::max(__requested_capacity, size());
        -: 3330:  __target_capacity           = __recommend(__target_capacity);
        -: 3331:  if (__target_capacity == capacity())
        -: 3332:    return;
        -: 3333:
        -: 3334:  __shrink_or_extend(__target_capacity);
        -: 3335:}
        -: 3336:
        -: 3337:template <class _CharT, class _Traits, class _Allocator>
        -: 3338:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::shrink_to_fit() _NOEXCEPT {
        -: 3339:  size_type __target_capacity = __recommend(size());
        -: 3340:  if (__target_capacity == capacity())
        -: 3341:    return;
        -: 3342:
        -: 3343:  __shrink_or_extend(__target_capacity);
        -: 3344:}
        -: 3345:
        -: 3346:template <class _CharT, class _Traits, class _Allocator>
        -: 3347:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 3348:basic_string<_CharT, _Traits, _Allocator>::__shrink_or_extend(size_type __target_capacity) {
        -: 3349:  __annotate_delete();
        -: 3350:  size_type __cap = capacity();
        -: 3351:  size_type __sz  = size();
        -: 3352:
        -: 3353:  pointer __new_data, __p;
        -: 3354:  bool __was_long, __now_long;
        -: 3355:  if (__fits_in_sso(__target_capacity)) {
        -: 3356:    __was_long = true;
        -: 3357:    __now_long = false;
        -: 3358:    __new_data = __get_short_pointer();
        -: 3359:    __p        = __get_long_pointer();
        -: 3360:  } else {
        -: 3361:    if (__target_capacity > __cap) {
        -: 3362:      // Extend
        -: 3363:      // - called from reserve should propagate the exception thrown.
        -: 3364:      auto __allocation = std::__allocate_at_least(__alloc(), __target_capacity + 1);
        -: 3365:      __new_data        = __allocation.ptr;
        -: 3366:      __target_capacity = __allocation.count - 1;
        -: 3367:    } else {
        -: 3368:      // Shrink
        -: 3369:      // - called from shrink_to_fit should not throw.
        -: 3370:      // - called from reserve may throw but is not required to.
        -: 3371:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -: 3372:      try {
        -: 3373:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -: 3374:        auto __allocation = std::__allocate_at_least(__alloc(), __target_capacity + 1);
        -: 3375:
        -: 3376:        // The Standard mandates shrink_to_fit() does not increase the capacity.
        -: 3377:        // With equal capacity keep the existing buffer. This avoids extra work
        -: 3378:        // due to swapping the elements.
        -: 3379:        if (__allocation.count - 1 > __target_capacity) {
        -: 3380:          __alloc_traits::deallocate(__alloc(), __allocation.ptr, __allocation.count);
        -: 3381:          __annotate_new(__sz); // Undoes the __annotate_delete()
        -: 3382:          return;
        -: 3383:        }
        -: 3384:        __new_data        = __allocation.ptr;
        -: 3385:        __target_capacity = __allocation.count - 1;
        -: 3386:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -: 3387:      } catch (...) {
        -: 3388:        return;
        -: 3389:      }
        -: 3390:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -: 3391:    }
        -: 3392:    __begin_lifetime(__new_data, __target_capacity + 1);
        -: 3393:    __now_long = true;
        -: 3394:    __was_long = __is_long();
        -: 3395:    __p        = __get_pointer();
        -: 3396:  }
        -: 3397:  traits_type::copy(std::__to_address(__new_data), std::__to_address(__p), size() + 1);
        -: 3398:  if (__was_long)
        -: 3399:    __alloc_traits::deallocate(__alloc(), __p, __cap + 1);
        -: 3400:  if (__now_long) {
        -: 3401:    __set_long_cap(__target_capacity + 1);
        -: 3402:    __set_long_size(__sz);
        -: 3403:    __set_long_pointer(__new_data);
        -: 3404:  } else
        -: 3405:    __set_short_size(__sz);
        -: 3406:  __annotate_new(__sz);
        -: 3407:}
        -: 3408:
        -: 3409:template <class _CharT, class _Traits, class _Allocator>
        -: 3410:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::const_reference
        -: 3411:basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) const {
        -: 3412:  if (__n >= size())
        -: 3413:    __throw_out_of_range();
        -: 3414:  return (*this)[__n];
        -: 3415:}
        -: 3416:
        -: 3417:template <class _CharT, class _Traits, class _Allocator>
        -: 3418:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::reference
        -: 3419:basic_string<_CharT, _Traits, _Allocator>::at(size_type __n) {
        -: 3420:  if (__n >= size())
        -: 3421:    __throw_out_of_range();
        -: 3422:  return (*this)[__n];
        -: 3423:}
        -: 3424:
        -: 3425:template <class _CharT, class _Traits, class _Allocator>
        -: 3426:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3427:basic_string<_CharT, _Traits, _Allocator>::copy(value_type* __s, size_type __n, size_type __pos) const {
        -: 3428:  size_type __sz = size();
        -: 3429:  if (__pos > __sz)
        -: 3430:    __throw_out_of_range();
        -: 3431:  size_type __rlen = std::min(__n, __sz - __pos);
        -: 3432:  traits_type::copy(__s, data() + __pos, __rlen);
        -: 3433:  return __rlen;
        -: 3434:}
        -: 3435:
        -: 3436:template <class _CharT, class _Traits, class _Allocator>
        -: 3437:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::swap(basic_string& __str)
        -: 3438:#if _LIBCPP_STD_VER >= 14
        -: 3439:    _NOEXCEPT
        -: 3440:#else
        -: 3441:    _NOEXCEPT_(!__alloc_traits::propagate_on_container_swap::value || __is_nothrow_swappable_v<allocator_type>)
        -: 3442:#endif
        -: 3443:{
        -: 3444:  _LIBCPP_ASSERT_COMPATIBLE_ALLOCATOR(
        -: 3445:      __alloc_traits::propagate_on_container_swap::value || __alloc_traits::is_always_equal::value ||
        -: 3446:          __alloc() == __str.__alloc(),
        -: 3447:      "swapping non-equal allocators");
        -: 3448:  if (!__is_long())
        -: 3449:    __annotate_delete();
        -: 3450:  if (this != &__str && !__str.__is_long())
        -: 3451:    __str.__annotate_delete();
        -: 3452:  std::swap(__r_.first(), __str.__r_.first());
        -: 3453:  std::__swap_allocator(__alloc(), __str.__alloc());
        -: 3454:  if (!__is_long())
        -: 3455:    __annotate_new(__get_short_size());
        -: 3456:  if (this != &__str && !__str.__is_long())
        -: 3457:    __str.__annotate_new(__str.__get_short_size());
        -: 3458:}
        -: 3459:
        -: 3460:// find
        -: 3461:
        -: 3462:template <class _Traits>
        -: 3463:struct _LIBCPP_HIDDEN __traits_eq {
        -: 3464:  typedef typename _Traits::char_type char_type;
        -: 3465:  _LIBCPP_HIDE_FROM_ABI bool operator()(const char_type& __x, const char_type& __y) _NOEXCEPT {
        -: 3466:    return _Traits::eq(__x, __y);
        -: 3467:  }
        -: 3468:};
        -: 3469:
        -: 3470:template <class _CharT, class _Traits, class _Allocator>
        -: 3471:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3472:basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT {
        -: 3473:  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::find(): received nullptr");
        -: 3474:  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
        -: 3475:}
        -: 3476:
        -: 3477:template <class _CharT, class _Traits, class _Allocator>
        -: 3478:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3479:basic_string<_CharT, _Traits, _Allocator>::find(const basic_string& __str, size_type __pos) const _NOEXCEPT {
        -: 3480:  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __str.data(), __pos, __str.size());
        -: 3481:}
        -: 3482:
        -: 3483:template <class _CharT, class _Traits, class _Allocator>
        -: 3484:template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
        -: 3485:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3486:basic_string<_CharT, _Traits, _Allocator>::find(const _Tp& __t, size_type __pos) const _NOEXCEPT {
        -: 3487:  __self_view __sv = __t;
        -: 3488:  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __sv.data(), __pos, __sv.size());
        -: 3489:}
        -: 3490:
        -: 3491:template <class _CharT, class _Traits, class _Allocator>
        -: 3492:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3493:basic_string<_CharT, _Traits, _Allocator>::find(const value_type* __s, size_type __pos) const _NOEXCEPT {
        -: 3494:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::find(): received nullptr");
        -: 3495:  return std::__str_find<value_type, size_type, traits_type, npos>(
        -: 3496:      data(), size(), __s, __pos, traits_type::length(__s));
        -: 3497:}
        -: 3498:
        -: 3499:template <class _CharT, class _Traits, class _Allocator>
        -: 3500:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3501:basic_string<_CharT, _Traits, _Allocator>::find(value_type __c, size_type __pos) const _NOEXCEPT {
        -: 3502:  return std::__str_find<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
        -: 3503:}
        -: 3504:
        -: 3505:// rfind
        -: 3506:
        -: 3507:template <class _CharT, class _Traits, class _Allocator>
        -: 3508:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3509:basic_string<_CharT, _Traits, _Allocator>::rfind(
        -: 3510:    const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT {
        -: 3511:  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::rfind(): received nullptr");
        -: 3512:  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
        -: 3513:}
        -: 3514:
        -: 3515:template <class _CharT, class _Traits, class _Allocator>
        -: 3516:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3517:basic_string<_CharT, _Traits, _Allocator>::rfind(const basic_string& __str, size_type __pos) const _NOEXCEPT {
        -: 3518:  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __str.data(), __pos, __str.size());
        -: 3519:}
        -: 3520:
        -: 3521:template <class _CharT, class _Traits, class _Allocator>
        -: 3522:template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
        -: 3523:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3524:basic_string<_CharT, _Traits, _Allocator>::rfind(const _Tp& __t, size_type __pos) const _NOEXCEPT {
        -: 3525:  __self_view __sv = __t;
        -: 3526:  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __sv.data(), __pos, __sv.size());
        -: 3527:}
        -: 3528:
        -: 3529:template <class _CharT, class _Traits, class _Allocator>
        -: 3530:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3531:basic_string<_CharT, _Traits, _Allocator>::rfind(const value_type* __s, size_type __pos) const _NOEXCEPT {
        -: 3532:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::rfind(): received nullptr");
        -: 3533:  return std::__str_rfind<value_type, size_type, traits_type, npos>(
        -: 3534:      data(), size(), __s, __pos, traits_type::length(__s));
        -: 3535:}
        -: 3536:
        -: 3537:template <class _CharT, class _Traits, class _Allocator>
        -: 3538:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3539:basic_string<_CharT, _Traits, _Allocator>::rfind(value_type __c, size_type __pos) const _NOEXCEPT {
        -: 3540:  return std::__str_rfind<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
        -: 3541:}
        -: 3542:
        -: 3543:// find_first_of
        -: 3544:
        -: 3545:template <class _CharT, class _Traits, class _Allocator>
        -: 3546:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3547:basic_string<_CharT, _Traits, _Allocator>::find_first_of(
        -: 3548:    const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT {
        -: 3549:  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::find_first_of(): received nullptr");
        -: 3550:  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
        -: 3551:}
        -: 3552:
        -: 3553:template <class _CharT, class _Traits, class _Allocator>
        -: 3554:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3555:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const basic_string& __str, size_type __pos) const _NOEXCEPT {
        -: 3556:  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
        -: 3557:      data(), size(), __str.data(), __pos, __str.size());
        -: 3558:}
        -: 3559:
        -: 3560:template <class _CharT, class _Traits, class _Allocator>
        -: 3561:template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
        -: 3562:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3563:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const _Tp& __t, size_type __pos) const _NOEXCEPT {
        -: 3564:  __self_view __sv = __t;
        -: 3565:  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
        -: 3566:      data(), size(), __sv.data(), __pos, __sv.size());
        -: 3567:}
        -: 3568:
        -: 3569:template <class _CharT, class _Traits, class _Allocator>
        -: 3570:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3571:basic_string<_CharT, _Traits, _Allocator>::find_first_of(const value_type* __s, size_type __pos) const _NOEXCEPT {
        -: 3572:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::find_first_of(): received nullptr");
        -: 3573:  return std::__str_find_first_of<value_type, size_type, traits_type, npos>(
        -: 3574:      data(), size(), __s, __pos, traits_type::length(__s));
        -: 3575:}
        -: 3576:
        -: 3577:template <class _CharT, class _Traits, class _Allocator>
        -: 3578:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3579:basic_string<_CharT, _Traits, _Allocator>::find_first_of(value_type __c, size_type __pos) const _NOEXCEPT {
        -: 3580:  return find(__c, __pos);
        -: 3581:}
        -: 3582:
        -: 3583:// find_last_of
        -: 3584:
        -: 3585:template <class _CharT, class _Traits, class _Allocator>
        -: 3586:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3587:basic_string<_CharT, _Traits, _Allocator>::find_last_of(
        -: 3588:    const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT {
        -: 3589:  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::find_last_of(): received nullptr");
        -: 3590:  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
        -: 3591:}
        -: 3592:
        -: 3593:template <class _CharT, class _Traits, class _Allocator>
        -: 3594:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3595:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const basic_string& __str, size_type __pos) const _NOEXCEPT {
        -: 3596:  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
        -: 3597:      data(), size(), __str.data(), __pos, __str.size());
        -: 3598:}
        -: 3599:
        -: 3600:template <class _CharT, class _Traits, class _Allocator>
        -: 3601:template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
        -: 3602:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3603:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const _Tp& __t, size_type __pos) const _NOEXCEPT {
        -: 3604:  __self_view __sv = __t;
        -: 3605:  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
        -: 3606:      data(), size(), __sv.data(), __pos, __sv.size());
        -: 3607:}
        -: 3608:
        -: 3609:template <class _CharT, class _Traits, class _Allocator>
        -: 3610:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3611:basic_string<_CharT, _Traits, _Allocator>::find_last_of(const value_type* __s, size_type __pos) const _NOEXCEPT {
        -: 3612:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::find_last_of(): received nullptr");
        -: 3613:  return std::__str_find_last_of<value_type, size_type, traits_type, npos>(
        -: 3614:      data(), size(), __s, __pos, traits_type::length(__s));
        -: 3615:}
        -: 3616:
        -: 3617:template <class _CharT, class _Traits, class _Allocator>
        -: 3618:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3619:basic_string<_CharT, _Traits, _Allocator>::find_last_of(value_type __c, size_type __pos) const _NOEXCEPT {
        -: 3620:  return rfind(__c, __pos);
        -: 3621:}
        -: 3622:
        -: 3623:// find_first_not_of
        -: 3624:
        -: 3625:template <class _CharT, class _Traits, class _Allocator>
        -: 3626:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3627:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(
        -: 3628:    const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT {
        -: 3629:  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::find_first_not_of(): received nullptr");
        -: 3630:  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
        -: 3631:}
        -: 3632:
        -: 3633:template <class _CharT, class _Traits, class _Allocator>
        -: 3634:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3635:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(
        -: 3636:    const basic_string& __str, size_type __pos) const _NOEXCEPT {
        -: 3637:  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
        -: 3638:      data(), size(), __str.data(), __pos, __str.size());
        -: 3639:}
        -: 3640:
        -: 3641:template <class _CharT, class _Traits, class _Allocator>
        -: 3642:template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
        -: 3643:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3644:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const _Tp& __t, size_type __pos) const _NOEXCEPT {
        -: 3645:  __self_view __sv = __t;
        -: 3646:  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
        -: 3647:      data(), size(), __sv.data(), __pos, __sv.size());
        -: 3648:}
        -: 3649:
        -: 3650:template <class _CharT, class _Traits, class _Allocator>
        -: 3651:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3652:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(const value_type* __s, size_type __pos) const _NOEXCEPT {
        -: 3653:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::find_first_not_of(): received nullptr");
        -: 3654:  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(
        -: 3655:      data(), size(), __s, __pos, traits_type::length(__s));
        -: 3656:}
        -: 3657:
        -: 3658:template <class _CharT, class _Traits, class _Allocator>
        -: 3659:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3660:basic_string<_CharT, _Traits, _Allocator>::find_first_not_of(value_type __c, size_type __pos) const _NOEXCEPT {
        -: 3661:  return std::__str_find_first_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
        -: 3662:}
        -: 3663:
        -: 3664:// find_last_not_of
        -: 3665:
        -: 3666:template <class _CharT, class _Traits, class _Allocator>
        -: 3667:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3668:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(
        -: 3669:    const value_type* __s, size_type __pos, size_type __n) const _NOEXCEPT {
        -: 3670:  _LIBCPP_ASSERT_NON_NULL(__n == 0 || __s != nullptr, "string::find_last_not_of(): received nullptr");
        -: 3671:  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __s, __pos, __n);
        -: 3672:}
        -: 3673:
        -: 3674:template <class _CharT, class _Traits, class _Allocator>
        -: 3675:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3676:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(
        -: 3677:    const basic_string& __str, size_type __pos) const _NOEXCEPT {
        -: 3678:  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
        -: 3679:      data(), size(), __str.data(), __pos, __str.size());
        -: 3680:}
        -: 3681:
        -: 3682:template <class _CharT, class _Traits, class _Allocator>
        -: 3683:template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
        -: 3684:_LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3685:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const _Tp& __t, size_type __pos) const _NOEXCEPT {
        -: 3686:  __self_view __sv = __t;
        -: 3687:  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
        -: 3688:      data(), size(), __sv.data(), __pos, __sv.size());
        -: 3689:}
        -: 3690:
        -: 3691:template <class _CharT, class _Traits, class _Allocator>
        -: 3692:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3693:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(const value_type* __s, size_type __pos) const _NOEXCEPT {
        -: 3694:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::find_last_not_of(): received nullptr");
        -: 3695:  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(
        -: 3696:      data(), size(), __s, __pos, traits_type::length(__s));
        -: 3697:}
        -: 3698:
        -: 3699:template <class _CharT, class _Traits, class _Allocator>
        -: 3700:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 3701:basic_string<_CharT, _Traits, _Allocator>::find_last_not_of(value_type __c, size_type __pos) const _NOEXCEPT {
        -: 3702:  return std::__str_find_last_not_of<value_type, size_type, traits_type, npos>(data(), size(), __c, __pos);
        -: 3703:}
        -: 3704:
        -: 3705:// compare
        -: 3706:
        -: 3707:template <class _CharT, class _Traits, class _Allocator>
        -: 3708:template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
        -: 3709:_LIBCPP_CONSTEXPR_SINCE_CXX20 int basic_string<_CharT, _Traits, _Allocator>::compare(const _Tp& __t) const _NOEXCEPT {
        -: 3710:  __self_view __sv = __t;
        -: 3711:  size_t __lhs_sz  = size();
        -: 3712:  size_t __rhs_sz  = __sv.size();
        -: 3713:  int __result     = traits_type::compare(data(), __sv.data(), std::min(__lhs_sz, __rhs_sz));
        -: 3714:  if (__result != 0)
        -: 3715:    return __result;
        -: 3716:  if (__lhs_sz < __rhs_sz)
        -: 3717:    return -1;
        -: 3718:  if (__lhs_sz > __rhs_sz)
        -: 3719:    return 1;
        -: 3720:  return 0;
        -: 3721:}
        -: 3722:
        -: 3723:template <class _CharT, class _Traits, class _Allocator>
        -: 3724:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 3725:basic_string<_CharT, _Traits, _Allocator>::compare(const basic_string& __str) const _NOEXCEPT {
        -: 3726:  return compare(__self_view(__str));
        -: 3727:}
        -: 3728:
        -: 3729:template <class _CharT, class _Traits, class _Allocator>
        -: 3730:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 int basic_string<_CharT, _Traits, _Allocator>::compare(
        -: 3731:    size_type __pos1, size_type __n1, const value_type* __s, size_type __n2) const {
        -: 3732:  _LIBCPP_ASSERT_NON_NULL(__n2 == 0 || __s != nullptr, "string::compare(): received nullptr");
        -: 3733:  size_type __sz = size();
        -: 3734:  if (__pos1 > __sz || __n2 == npos)
        -: 3735:    __throw_out_of_range();
        -: 3736:  size_type __rlen = std::min(__n1, __sz - __pos1);
        -: 3737:  int __r          = traits_type::compare(data() + __pos1, __s, std::min(__rlen, __n2));
        -: 3738:  if (__r == 0) {
        -: 3739:    if (__rlen < __n2)
        -: 3740:      __r = -1;
        -: 3741:    else if (__rlen > __n2)
        -: 3742:      __r = 1;
        -: 3743:  }
        -: 3744:  return __r;
        -: 3745:}
        -: 3746:
        -: 3747:template <class _CharT, class _Traits, class _Allocator>
        -: 3748:template <class _Tp, __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value, int> >
        -: 3749:_LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 3750:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1, size_type __n1, const _Tp& __t) const {
        -: 3751:  __self_view __sv = __t;
        -: 3752:  return compare(__pos1, __n1, __sv.data(), __sv.size());
        -: 3753:}
        -: 3754:
        -: 3755:template <class _CharT, class _Traits, class _Allocator>
        -: 3756:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 3757:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1, size_type __n1, const basic_string& __str) const {
        -: 3758:  return compare(__pos1, __n1, __str.data(), __str.size());
        -: 3759:}
        -: 3760:
        -: 3761:template <class _CharT, class _Traits, class _Allocator>
        -: 3762:template <class _Tp,
        -: 3763:          __enable_if_t<__can_be_converted_to_string_view<_CharT, _Traits, _Tp>::value &&
        -: 3764:                            !__is_same_uncvref<_Tp, basic_string<_CharT, _Traits, _Allocator> >::value,
        -: 3765:                        int> >
        -: 3766:_LIBCPP_CONSTEXPR_SINCE_CXX20 int basic_string<_CharT, _Traits, _Allocator>::compare(
        -: 3767:    size_type __pos1, size_type __n1, const _Tp& __t, size_type __pos2, size_type __n2) const {
        -: 3768:  __self_view __sv = __t;
        -: 3769:  return __self_view(*this).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
        -: 3770:}
        -: 3771:
        -: 3772:template <class _CharT, class _Traits, class _Allocator>
        -: 3773:_LIBCPP_CONSTEXPR_SINCE_CXX20 int basic_string<_CharT, _Traits, _Allocator>::compare(
        -: 3774:    size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2) const {
        -: 3775:  return compare(__pos1, __n1, __self_view(__str), __pos2, __n2);
        -: 3776:}
        -: 3777:
        -: 3778:template <class _CharT, class _Traits, class _Allocator>
        -: 3779:_LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 3780:basic_string<_CharT, _Traits, _Allocator>::compare(const value_type* __s) const _NOEXCEPT {
        -: 3781:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::compare(): received nullptr");
        -: 3782:  return compare(0, npos, __s, traits_type::length(__s));
        -: 3783:}
        -: 3784:
        -: 3785:template <class _CharT, class _Traits, class _Allocator>
        -: 3786:_LIBCPP_CONSTEXPR_SINCE_CXX20 int
        -: 3787:basic_string<_CharT, _Traits, _Allocator>::compare(size_type __pos1, size_type __n1, const value_type* __s) const {
        -: 3788:  _LIBCPP_ASSERT_NON_NULL(__s != nullptr, "string::compare(): received nullptr");
        -: 3789:  return compare(__pos1, __n1, __s, traits_type::length(__s));
        -: 3790:}
        -: 3791:
        -: 3792:// __invariants
        -: 3793:
        -: 3794:template <class _CharT, class _Traits, class _Allocator>
        -: 3795:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 bool basic_string<_CharT, _Traits, _Allocator>::__invariants() const {
        -: 3796:  if (size() > capacity())
        -: 3797:    return false;
        -: 3798:  if (capacity() < __min_cap - 1)
        -: 3799:    return false;
        -: 3800:  if (data() == nullptr)
        -: 3801:    return false;
        -: 3802:  if (!_Traits::eq(data()[size()], value_type()))
        -: 3803:    return false;
        -: 3804:  return true;
        -: 3805:}
        -: 3806:
        -: 3807:// __clear_and_shrink
        -: 3808:
        -: 3809:template <class _CharT, class _Traits, class _Allocator>
        -: 3810:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 void basic_string<_CharT, _Traits, _Allocator>::__clear_and_shrink() _NOEXCEPT {
        -: 3811:  clear();
        -: 3812:  if (__is_long()) {
        -: 3813:    __annotate_delete();
        -: 3814:    __alloc_traits::deallocate(__alloc(), __get_long_pointer(), capacity() + 1);
        -: 3815:    __r_.first() = __rep();
        -: 3816:  }
        -: 3817:}
        -: 3818:
        -: 3819:// operator==
        -: 3820:
        -: 3821:template <class _CharT, class _Traits, class _Allocator>
        -: 3822:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_HIDE_FROM_ABI bool
        -: 3823:operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3824:           const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3825:#if _LIBCPP_STD_VER >= 20
        -: 3826:  return basic_string_view<_CharT, _Traits>(__lhs) == basic_string_view<_CharT, _Traits>(__rhs);
        -: 3827:#else
        -: 3828:  size_t __lhs_sz = __lhs.size();
        -: 3829:  return __lhs_sz == __rhs.size() && _Traits::compare(__lhs.data(), __rhs.data(), __lhs_sz) == 0;
        -: 3830:#endif
        -: 3831:}
        -: 3832:
        -: 3833:template <class _Allocator>
        -: 3834:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_HIDE_FROM_ABI bool
        -: 3835:operator==(const basic_string<char, char_traits<char>, _Allocator>& __lhs,
        -: 3836:           const basic_string<char, char_traits<char>, _Allocator>& __rhs) _NOEXCEPT {
        -: 3837:  size_t __sz = __lhs.size();
        -: 3838:  if (__sz != __rhs.size())
        -: 3839:    return false;
        -: 3840:  return char_traits<char>::compare(__lhs.data(), __rhs.data(), __sz) == 0;
        -: 3841:}
        -: 3842:
        -: 3843:#if _LIBCPP_STD_VER <= 17
        -: 3844:template <class _CharT, class _Traits, class _Allocator>
        -: 3845:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3846:operator==(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3847:  typedef basic_string<_CharT, _Traits, _Allocator> _String;
        -: 3848:  _LIBCPP_ASSERT_NON_NULL(__lhs != nullptr, "operator==(char*, basic_string): received nullptr");
        -: 3849:  size_t __lhs_len = _Traits::length(__lhs);
        -: 3850:  if (__lhs_len != __rhs.size())
        -: 3851:    return false;
        -: 3852:  return __rhs.compare(0, _String::npos, __lhs, __lhs_len) == 0;
        -: 3853:}
        -: 3854:#endif // _LIBCPP_STD_VER <= 17
        -: 3855:
        -: 3856:template <class _CharT, class _Traits, class _Allocator>
        -: 3857:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 _LIBCPP_HIDE_FROM_ABI bool
        -: 3858:operator==(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) _NOEXCEPT {
        -: 3859:#if _LIBCPP_STD_VER >= 20
        -: 3860:  return basic_string_view<_CharT, _Traits>(__lhs) == basic_string_view<_CharT, _Traits>(__rhs);
        -: 3861:#else
        -: 3862:  typedef basic_string<_CharT, _Traits, _Allocator> _String;
        -: 3863:  _LIBCPP_ASSERT_NON_NULL(__rhs != nullptr, "operator==(basic_string, char*): received nullptr");
        -: 3864:  size_t __rhs_len = _Traits::length(__rhs);
        -: 3865:  if (__rhs_len != __lhs.size())
        -: 3866:    return false;
        -: 3867:  return __lhs.compare(0, _String::npos, __rhs, __rhs_len) == 0;
        -: 3868:#endif
        -: 3869:}
        -: 3870:
        -: 3871:#if _LIBCPP_STD_VER >= 20
        -: 3872:
        -: 3873:template <class _CharT, class _Traits, class _Allocator>
        -: 3874:_LIBCPP_HIDE_FROM_ABI constexpr auto operator<=>(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3875:                                                 const basic_string<_CharT, _Traits, _Allocator>& __rhs) noexcept {
        -: 3876:  return basic_string_view<_CharT, _Traits>(__lhs) <=> basic_string_view<_CharT, _Traits>(__rhs);
        -: 3877:}
        -: 3878:
        -: 3879:template <class _CharT, class _Traits, class _Allocator>
        -: 3880:_LIBCPP_HIDE_FROM_ABI constexpr auto
        -: 3881:operator<=>(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) {
        -: 3882:  return basic_string_view<_CharT, _Traits>(__lhs) <=> basic_string_view<_CharT, _Traits>(__rhs);
        -: 3883:}
        -: 3884:
        -: 3885:#else  // _LIBCPP_STD_VER >= 20
        -: 3886:
        -: 3887:template <class _CharT, class _Traits, class _Allocator>
        -: 3888:inline _LIBCPP_HIDE_FROM_ABI bool operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3889:                                             const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3890:  return !(__lhs == __rhs);
        -: 3891:}
        -: 3892:
        -: 3893:template <class _CharT, class _Traits, class _Allocator>
        -: 3894:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3895:operator!=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3896:  return !(__lhs == __rhs);
        -: 3897:}
        -: 3898:
        -: 3899:template <class _CharT, class _Traits, class _Allocator>
        -: 3900:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3901:operator!=(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) _NOEXCEPT {
        -: 3902:  return !(__lhs == __rhs);
        -: 3903:}
        -: 3904:
        -: 3905:// operator<
        -: 3906:
        -: 3907:template <class _CharT, class _Traits, class _Allocator>
        -: 3908:inline _LIBCPP_HIDE_FROM_ABI bool operator<(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3909:                                            const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3910:  return __lhs.compare(__rhs) < 0;
        -: 3911:}
        -: 3912:
        -: 3913:template <class _CharT, class _Traits, class _Allocator>
        -: 3914:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3915:operator<(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) _NOEXCEPT {
        -: 3916:  return __lhs.compare(__rhs) < 0;
        -: 3917:}
        -: 3918:
        -: 3919:template <class _CharT, class _Traits, class _Allocator>
        -: 3920:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3921:operator<(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3922:  return __rhs.compare(__lhs) > 0;
        -: 3923:}
        -: 3924:
        -: 3925:// operator>
        -: 3926:
        -: 3927:template <class _CharT, class _Traits, class _Allocator>
        -: 3928:inline _LIBCPP_HIDE_FROM_ABI bool operator>(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3929:                                            const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3930:  return __rhs < __lhs;
        -: 3931:}
        -: 3932:
        -: 3933:template <class _CharT, class _Traits, class _Allocator>
        -: 3934:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3935:operator>(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) _NOEXCEPT {
        -: 3936:  return __rhs < __lhs;
        -: 3937:}
        -: 3938:
        -: 3939:template <class _CharT, class _Traits, class _Allocator>
        -: 3940:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3941:operator>(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3942:  return __rhs < __lhs;
        -: 3943:}
        -: 3944:
        -: 3945:// operator<=
        -: 3946:
        -: 3947:template <class _CharT, class _Traits, class _Allocator>
        -: 3948:inline _LIBCPP_HIDE_FROM_ABI bool operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3949:                                             const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3950:  return !(__rhs < __lhs);
        -: 3951:}
        -: 3952:
        -: 3953:template <class _CharT, class _Traits, class _Allocator>
        -: 3954:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3955:operator<=(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) _NOEXCEPT {
        -: 3956:  return !(__rhs < __lhs);
        -: 3957:}
        -: 3958:
        -: 3959:template <class _CharT, class _Traits, class _Allocator>
        -: 3960:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3961:operator<=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3962:  return !(__rhs < __lhs);
        -: 3963:}
        -: 3964:
        -: 3965:// operator>=
        -: 3966:
        -: 3967:template <class _CharT, class _Traits, class _Allocator>
        -: 3968:inline _LIBCPP_HIDE_FROM_ABI bool operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3969:                                             const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3970:  return !(__lhs < __rhs);
        -: 3971:}
        -: 3972:
        -: 3973:template <class _CharT, class _Traits, class _Allocator>
        -: 3974:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3975:operator>=(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) _NOEXCEPT {
        -: 3976:  return !(__lhs < __rhs);
        -: 3977:}
        -: 3978:
        -: 3979:template <class _CharT, class _Traits, class _Allocator>
        -: 3980:inline _LIBCPP_HIDE_FROM_ABI bool
        -: 3981:operator>=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) _NOEXCEPT {
        -: 3982:  return !(__lhs < __rhs);
        -: 3983:}
        -: 3984:#endif // _LIBCPP_STD_VER >= 20
        -: 3985:
        -: 3986:// operator +
        -: 3987:
        -: 3988:template <class _CharT, class _Traits, class _Allocator>
        -: 3989:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 3990:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 3991:          const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
        -: 3992:  using _String = basic_string<_CharT, _Traits, _Allocator>;
        -: 3993:  auto __lhs_sz = __lhs.size();
        -: 3994:  auto __rhs_sz = __rhs.size();
        -: 3995:  _String __r(__uninitialized_size_tag(),
        -: 3996:              __lhs_sz + __rhs_sz,
        -: 3997:              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
        -: 3998:  auto __ptr = std::__to_address(__r.__get_pointer());
        -: 3999:  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
        -: 4000:  _Traits::copy(__ptr + __lhs_sz, __rhs.data(), __rhs_sz);
        -: 4001:  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
        -: 4002:  return __r;
        -: 4003:}
        -: 4004:
        -: 4005:template <class _CharT, class _Traits, class _Allocator>
        -: 4006:_LIBCPP_HIDDEN _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4007:operator+(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
        -: 4008:  using _String = basic_string<_CharT, _Traits, _Allocator>;
        -: 4009:  auto __lhs_sz = _Traits::length(__lhs);
        -: 4010:  auto __rhs_sz = __rhs.size();
        -: 4011:  _String __r(__uninitialized_size_tag(),
        -: 4012:              __lhs_sz + __rhs_sz,
        -: 4013:              _String::__alloc_traits::select_on_container_copy_construction(__rhs.get_allocator()));
        -: 4014:  auto __ptr = std::__to_address(__r.__get_pointer());
        -: 4015:  _Traits::copy(__ptr, __lhs, __lhs_sz);
        -: 4016:  _Traits::copy(__ptr + __lhs_sz, __rhs.data(), __rhs_sz);
        -: 4017:  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
        -: 4018:  return __r;
        -: 4019:}
        -: 4020:
        -: 4021:template <class _CharT, class _Traits, class _Allocator>
        -: 4022:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4023:operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
        -: 4024:  using _String                        = basic_string<_CharT, _Traits, _Allocator>;
        -: 4025:  typename _String::size_type __rhs_sz = __rhs.size();
        -: 4026:  _String __r(__uninitialized_size_tag(),
        -: 4027:              __rhs_sz + 1,
        -: 4028:              _String::__alloc_traits::select_on_container_copy_construction(__rhs.get_allocator()));
        -: 4029:  auto __ptr = std::__to_address(__r.__get_pointer());
        -: 4030:  _Traits::assign(__ptr, 1, __lhs);
        -: 4031:  _Traits::copy(__ptr + 1, __rhs.data(), __rhs_sz);
        -: 4032:  _Traits::assign(__ptr + 1 + __rhs_sz, 1, _CharT());
        -: 4033:  return __r;
        -: 4034:}
        -: 4035:
        -: 4036:template <class _CharT, class _Traits, class _Allocator>
        -: 4037:inline _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4038:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, const _CharT* __rhs) {
        -: 4039:  using _String                        = basic_string<_CharT, _Traits, _Allocator>;
        -: 4040:  typename _String::size_type __lhs_sz = __lhs.size();
        -: 4041:  typename _String::size_type __rhs_sz = _Traits::length(__rhs);
        -: 4042:  _String __r(__uninitialized_size_tag(),
        -: 4043:              __lhs_sz + __rhs_sz,
        -: 4044:              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
        -: 4045:  auto __ptr = std::__to_address(__r.__get_pointer());
        -: 4046:  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
        -: 4047:  _Traits::copy(__ptr + __lhs_sz, __rhs, __rhs_sz);
        -: 4048:  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
        -: 4049:  return __r;
        -: 4050:}
        -: 4051:
        -: 4052:template <class _CharT, class _Traits, class _Allocator>
        -: 4053:_LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4054:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, _CharT __rhs) {
        -: 4055:  using _String                        = basic_string<_CharT, _Traits, _Allocator>;
        -: 4056:  typename _String::size_type __lhs_sz = __lhs.size();
        -: 4057:  _String __r(__uninitialized_size_tag(),
        -: 4058:              __lhs_sz + 1,
        -: 4059:              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
        -: 4060:  auto __ptr = std::__to_address(__r.__get_pointer());
        -: 4061:  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
        -: 4062:  _Traits::assign(__ptr + __lhs_sz, 1, __rhs);
        -: 4063:  _Traits::assign(__ptr + 1 + __lhs_sz, 1, _CharT());
        -: 4064:  return __r;
        -: 4065:}
        -: 4066:
        -: 4067:#ifndef _LIBCPP_CXX03_LANG
        -: 4068:
        -: 4069:template <class _CharT, class _Traits, class _Allocator>
        -: 4070:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4071:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
        -: 4072:  return std::move(__lhs.append(__rhs));
        -: 4073:}
        -: 4074:
        -: 4075:template <class _CharT, class _Traits, class _Allocator>
        -: 4076:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4077:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
        -: 4078:  return std::move(__rhs.insert(0, __lhs));
        -: 4079:}
        -: 4080:
        -: 4081:template <class _CharT, class _Traits, class _Allocator>
        -: 4082:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4083:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
        -: 4084:  return std::move(__lhs.append(__rhs));
        -: 4085:}
        -: 4086:
        -: 4087:template <class _CharT, class _Traits, class _Allocator>
        -: 4088:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4089:operator+(const _CharT* __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
        -: 4090:  return std::move(__rhs.insert(0, __lhs));
        -: 4091:}
        -: 4092:
        -: 4093:template <class _CharT, class _Traits, class _Allocator>
        -: 4094:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4095:operator+(_CharT __lhs, basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
        -: 4096:  __rhs.insert(__rhs.begin(), __lhs);
        -: 4097:  return std::move(__rhs);
        -: 4098:}
        -: 4099:
        -: 4100:template <class _CharT, class _Traits, class _Allocator>
        -: 4101:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4102:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, const _CharT* __rhs) {
        -: 4103:  return std::move(__lhs.append(__rhs));
        -: 4104:}
        -: 4105:
        -: 4106:template <class _CharT, class _Traits, class _Allocator>
        -: 4107:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<_CharT, _Traits, _Allocator>
        -: 4108:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs, _CharT __rhs) {
        -: 4109:  __lhs.push_back(__rhs);
        -: 4110:  return std::move(__lhs);
        -: 4111:}
        -: 4112:
        -: 4113:#endif // _LIBCPP_CXX03_LANG
        -: 4114:
        -: 4115:#if _LIBCPP_STD_VER >= 26
        -: 4116:
        -: 4117:template <class _CharT, class _Traits, class _Allocator>
        -: 4118:_LIBCPP_HIDE_FROM_ABI constexpr basic_string<_CharT, _Traits, _Allocator>
        -: 4119:operator+(const basic_string<_CharT, _Traits, _Allocator>& __lhs,
        -: 4120:          type_identity_t<basic_string_view<_CharT, _Traits>> __rhs) {
        -: 4121:  using _String                        = basic_string<_CharT, _Traits, _Allocator>;
        -: 4122:  typename _String::size_type __lhs_sz = __lhs.size();
        -: 4123:  typename _String::size_type __rhs_sz = __rhs.size();
        -: 4124:  _String __r(__uninitialized_size_tag(),
        -: 4125:              __lhs_sz + __rhs_sz,
        -: 4126:              _String::__alloc_traits::select_on_container_copy_construction(__lhs.get_allocator()));
        -: 4127:  auto __ptr = std::__to_address(__r.__get_pointer());
        -: 4128:  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
        -: 4129:  _Traits::copy(__ptr + __lhs_sz, __rhs.data(), __rhs_sz);
        -: 4130:  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
        -: 4131:  return __r;
        -: 4132:}
        -: 4133:
        -: 4134:template <class _CharT, class _Traits, class _Allocator>
        -: 4135:_LIBCPP_HIDE_FROM_ABI constexpr basic_string<_CharT, _Traits, _Allocator>
        -: 4136:operator+(basic_string<_CharT, _Traits, _Allocator>&& __lhs,
        -: 4137:          type_identity_t<basic_string_view<_CharT, _Traits>> __rhs) {
        -: 4138:  __lhs.append(__rhs);
        -: 4139:  return std::move(__lhs);
        -: 4140:}
        -: 4141:
        -: 4142:template <class _CharT, class _Traits, class _Allocator>
        -: 4143:_LIBCPP_HIDE_FROM_ABI constexpr basic_string<_CharT, _Traits, _Allocator>
        -: 4144:operator+(type_identity_t<basic_string_view<_CharT, _Traits>> __lhs,
        -: 4145:          const basic_string<_CharT, _Traits, _Allocator>& __rhs) {
        -: 4146:  using _String                        = basic_string<_CharT, _Traits, _Allocator>;
        -: 4147:  typename _String::size_type __lhs_sz = __lhs.size();
        -: 4148:  typename _String::size_type __rhs_sz = __rhs.size();
        -: 4149:  _String __r(__uninitialized_size_tag(),
        -: 4150:              __lhs_sz + __rhs_sz,
        -: 4151:              _String::__alloc_traits::select_on_container_copy_construction(__rhs.get_allocator()));
        -: 4152:  auto __ptr = std::__to_address(__r.__get_pointer());
        -: 4153:  _Traits::copy(__ptr, __lhs.data(), __lhs_sz);
        -: 4154:  _Traits::copy(__ptr + __lhs_sz, __rhs.data(), __rhs_sz);
        -: 4155:  _Traits::assign(__ptr + __lhs_sz + __rhs_sz, 1, _CharT());
        -: 4156:  return __r;
        -: 4157:}
        -: 4158:
        -: 4159:template <class _CharT, class _Traits, class _Allocator>
        -: 4160:_LIBCPP_HIDE_FROM_ABI constexpr basic_string<_CharT, _Traits, _Allocator>
        -: 4161:operator+(type_identity_t<basic_string_view<_CharT, _Traits>> __lhs,
        -: 4162:          basic_string<_CharT, _Traits, _Allocator>&& __rhs) {
        -: 4163:  __rhs.insert(0, __lhs);
        -: 4164:  return std::move(__rhs);
        -: 4165:}
        -: 4166:
        -: 4167:#endif // _LIBCPP_STD_VER >= 26
        -: 4168:
        -: 4169:// swap
        -: 4170:
        -: 4171:template <class _CharT, class _Traits, class _Allocator>
        -: 4172:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 void
        -: 4173:swap(basic_string<_CharT, _Traits, _Allocator>& __lhs, basic_string<_CharT, _Traits, _Allocator>& __rhs)
        -: 4174:    _NOEXCEPT_(_NOEXCEPT_(__lhs.swap(__rhs))) {
        -: 4175:  __lhs.swap(__rhs);
        -: 4176:}
        -: 4177:
        -: 4178:_LIBCPP_EXPORTED_FROM_ABI int stoi(const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4179:_LIBCPP_EXPORTED_FROM_ABI long stol(const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4180:_LIBCPP_EXPORTED_FROM_ABI unsigned long stoul(const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4181:_LIBCPP_EXPORTED_FROM_ABI long long stoll(const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4182:_LIBCPP_EXPORTED_FROM_ABI unsigned long long stoull(const string& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4183:
        -: 4184:_LIBCPP_EXPORTED_FROM_ABI float stof(const string& __str, size_t* __idx = nullptr);
        -: 4185:_LIBCPP_EXPORTED_FROM_ABI double stod(const string& __str, size_t* __idx = nullptr);
        -: 4186:_LIBCPP_EXPORTED_FROM_ABI long double stold(const string& __str, size_t* __idx = nullptr);
        -: 4187:
        -: 4188:_LIBCPP_EXPORTED_FROM_ABI string to_string(int __val);
        -: 4189:_LIBCPP_EXPORTED_FROM_ABI string to_string(unsigned __val);
        -: 4190:_LIBCPP_EXPORTED_FROM_ABI string to_string(long __val);
        -: 4191:_LIBCPP_EXPORTED_FROM_ABI string to_string(unsigned long __val);
        -: 4192:_LIBCPP_EXPORTED_FROM_ABI string to_string(long long __val);
        -: 4193:_LIBCPP_EXPORTED_FROM_ABI string to_string(unsigned long long __val);
        -: 4194:_LIBCPP_EXPORTED_FROM_ABI string to_string(float __val);
        -: 4195:_LIBCPP_EXPORTED_FROM_ABI string to_string(double __val);
        -: 4196:_LIBCPP_EXPORTED_FROM_ABI string to_string(long double __val);
        -: 4197:
        -: 4198:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 4199:_LIBCPP_EXPORTED_FROM_ABI int stoi(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4200:_LIBCPP_EXPORTED_FROM_ABI long stol(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4201:_LIBCPP_EXPORTED_FROM_ABI unsigned long stoul(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4202:_LIBCPP_EXPORTED_FROM_ABI long long stoll(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4203:_LIBCPP_EXPORTED_FROM_ABI unsigned long long stoull(const wstring& __str, size_t* __idx = nullptr, int __base = 10);
        -: 4204:
        -: 4205:_LIBCPP_EXPORTED_FROM_ABI float stof(const wstring& __str, size_t* __idx = nullptr);
        -: 4206:_LIBCPP_EXPORTED_FROM_ABI double stod(const wstring& __str, size_t* __idx = nullptr);
        -: 4207:_LIBCPP_EXPORTED_FROM_ABI long double stold(const wstring& __str, size_t* __idx = nullptr);
        -: 4208:
        -: 4209:_LIBCPP_EXPORTED_FROM_ABI wstring to_wstring(int __val);
        -: 4210:_LIBCPP_EXPORTED_FROM_ABI wstring to_wstring(unsigned __val);
        -: 4211:_LIBCPP_EXPORTED_FROM_ABI wstring to_wstring(long __val);
        -: 4212:_LIBCPP_EXPORTED_FROM_ABI wstring to_wstring(unsigned long __val);
        -: 4213:_LIBCPP_EXPORTED_FROM_ABI wstring to_wstring(long long __val);
        -: 4214:_LIBCPP_EXPORTED_FROM_ABI wstring to_wstring(unsigned long long __val);
        -: 4215:_LIBCPP_EXPORTED_FROM_ABI wstring to_wstring(float __val);
        -: 4216:_LIBCPP_EXPORTED_FROM_ABI wstring to_wstring(double __val);
        -: 4217:_LIBCPP_EXPORTED_FROM_ABI wstring to_wstring(long double __val);
        -: 4218:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 4219:
        -: 4220:template <class _CharT, class _Traits, class _Allocator>
        -: 4221:_LIBCPP_TEMPLATE_DATA_VIS const typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 4222:    basic_string<_CharT, _Traits, _Allocator>::npos;
        -: 4223:
        -: 4224:template <class _CharT, class _Allocator>
        -: 4225:struct __string_hash : public __unary_function<basic_string<_CharT, char_traits<_CharT>, _Allocator>, size_t> {
        -: 4226:  _LIBCPP_HIDE_FROM_ABI size_t
        -: 4227:  operator()(const basic_string<_CharT, char_traits<_CharT>, _Allocator>& __val) const _NOEXCEPT {
        -: 4228:    return std::__do_string_hash(__val.data(), __val.data() + __val.size());
        -: 4229:  }
        -: 4230:};
        -: 4231:
        -: 4232:template <class _Allocator>
        -: 4233:struct hash<basic_string<char, char_traits<char>, _Allocator> > : __string_hash<char, _Allocator> {};
        -: 4234:
        -: 4235:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -: 4236:template <class _Allocator>
        -: 4237:struct hash<basic_string<char8_t, char_traits<char8_t>, _Allocator> > : __string_hash<char8_t, _Allocator> {};
        -: 4238:#endif
        -: 4239:
        -: 4240:template <class _Allocator>
        -: 4241:struct hash<basic_string<char16_t, char_traits<char16_t>, _Allocator> > : __string_hash<char16_t, _Allocator> {};
        -: 4242:
        -: 4243:template <class _Allocator>
        -: 4244:struct hash<basic_string<char32_t, char_traits<char32_t>, _Allocator> > : __string_hash<char32_t, _Allocator> {};
        -: 4245:
        -: 4246:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 4247:template <class _Allocator>
        -: 4248:struct hash<basic_string<wchar_t, char_traits<wchar_t>, _Allocator> > : __string_hash<wchar_t, _Allocator> {};
        -: 4249:#endif
        -: 4250:
        -: 4251:template <class _CharT, class _Traits, class _Allocator>
        -: 4252:_LIBCPP_HIDE_FROM_ABI basic_ostream<_CharT, _Traits>&
        -: 4253:operator<<(basic_ostream<_CharT, _Traits>& __os, const basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4254:
        -: 4255:template <class _CharT, class _Traits, class _Allocator>
        -: 4256:_LIBCPP_HIDE_FROM_ABI basic_istream<_CharT, _Traits>&
        -: 4257:operator>>(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4258:
        -: 4259:template <class _CharT, class _Traits, class _Allocator>
        -: 4260:_LIBCPP_HIDE_FROM_ABI basic_istream<_CharT, _Traits>&
        -: 4261:getline(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);
        -: 4262:
        -: 4263:template <class _CharT, class _Traits, class _Allocator>
        -: 4264:inline _LIBCPP_HIDE_FROM_ABI basic_istream<_CharT, _Traits>&
        -: 4265:getline(basic_istream<_CharT, _Traits>& __is, basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4266:
        -: 4267:template <class _CharT, class _Traits, class _Allocator>
        -: 4268:inline _LIBCPP_HIDE_FROM_ABI basic_istream<_CharT, _Traits>&
        -: 4269:getline(basic_istream<_CharT, _Traits>&& __is, basic_string<_CharT, _Traits, _Allocator>& __str, _CharT __dlm);
        -: 4270:
        -: 4271:template <class _CharT, class _Traits, class _Allocator>
        -: 4272:inline _LIBCPP_HIDE_FROM_ABI basic_istream<_CharT, _Traits>&
        -: 4273:getline(basic_istream<_CharT, _Traits>&& __is, basic_string<_CharT, _Traits, _Allocator>& __str);
        -: 4274:
        -: 4275:#if _LIBCPP_STD_VER >= 20
        -: 4276:template <class _CharT, class _Traits, class _Allocator, class _Up>
        -: 4277:inline _LIBCPP_HIDE_FROM_ABI typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 4278:erase(basic_string<_CharT, _Traits, _Allocator>& __str, const _Up& __v) {
        -: 4279:  auto __old_size = __str.size();
        -: 4280:  __str.erase(std::remove(__str.begin(), __str.end(), __v), __str.end());
        -: 4281:  return __old_size - __str.size();
        -: 4282:}
        -: 4283:
        -: 4284:template <class _CharT, class _Traits, class _Allocator, class _Predicate>
        -: 4285:inline _LIBCPP_HIDE_FROM_ABI typename basic_string<_CharT, _Traits, _Allocator>::size_type
        -: 4286:erase_if(basic_string<_CharT, _Traits, _Allocator>& __str, _Predicate __pred) {
        -: 4287:  auto __old_size = __str.size();
        -: 4288:  __str.erase(std::remove_if(__str.begin(), __str.end(), __pred), __str.end());
        -: 4289:  return __old_size - __str.size();
        -: 4290:}
        -: 4291:#endif
        -: 4292:
        -: 4293:#if _LIBCPP_STD_VER >= 14
        -: 4294:// Literal suffixes for basic_string [basic.string.literals]
        -: 4295:inline namespace literals {
        -: 4296:inline namespace string_literals {
        -: 4297:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<char>
        -: 4298:operator""s(const char* __str, size_t __len) {
        -: 4299:  return basic_string<char>(__str, __len);
        -: 4300:}
        -: 4301:
        -: 4302:#  ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 4303:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<wchar_t>
        -: 4304:operator""s(const wchar_t* __str, size_t __len) {
        -: 4305:  return basic_string<wchar_t>(__str, __len);
        -: 4306:}
        -: 4307:#  endif
        -: 4308:
        -: 4309:#  ifndef _LIBCPP_HAS_NO_CHAR8_T
        -: 4310:inline _LIBCPP_HIDE_FROM_ABI constexpr basic_string<char8_t> operator""s(const char8_t* __str, size_t __len) {
        -: 4311:  return basic_string<char8_t>(__str, __len);
        -: 4312:}
        -: 4313:#  endif
        -: 4314:
        -: 4315:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<char16_t>
        -: 4316:operator""s(const char16_t* __str, size_t __len) {
        -: 4317:  return basic_string<char16_t>(__str, __len);
        -: 4318:}
        -: 4319:
        -: 4320:inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_SINCE_CXX20 basic_string<char32_t>
        -: 4321:operator""s(const char32_t* __str, size_t __len) {
        -: 4322:  return basic_string<char32_t>(__str, __len);
        -: 4323:}
        -: 4324:} // namespace string_literals
        -: 4325:} // namespace literals
        -: 4326:
        -: 4327:#  if _LIBCPP_STD_VER >= 20
        -: 4328:template <>
        -: 4329:inline constexpr bool __format::__enable_insertable<std::basic_string<char>> = true;
        -: 4330:#    ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 4331:template <>
        -: 4332:inline constexpr bool __format::__enable_insertable<std::basic_string<wchar_t>> = true;
        -: 4333:#    endif
        -: 4334:#  endif
        -: 4335:
        -: 4336:#endif
        -: 4337:
        -: 4338:_LIBCPP_END_NAMESPACE_STD
        -: 4339:
        -: 4340:_LIBCPP_POP_MACROS
        -: 4341:
        -: 4342:#if !defined(_LIBCPP_REMOVE_TRANSITIVE_INCLUDES) && _LIBCPP_STD_VER <= 20
        -: 4343:#  include <algorithm>
        -: 4344:#  include <concepts>
        -: 4345:#  include <cstdlib>
        -: 4346:#  include <iterator>
        -: 4347:#  include <new>
        -: 4348:#  include <type_traits>
        -: 4349:#  include <typeinfo>
        -: 4350:#  include <utility>
        -: 4351:#endif
        -: 4352:
        -: 4353:#endif // _LIBCPP_STRING
