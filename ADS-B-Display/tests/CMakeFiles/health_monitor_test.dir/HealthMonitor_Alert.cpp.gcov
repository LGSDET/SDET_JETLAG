        -:    0:Source:/Users/jawsmacair/Downloads/CMU/SDET_JETLAG/ADS-B-Display/HealthMonitor_Alert.cpp
        -:    0:Graph:./Users/jawsmacair/Downloads/CMU/SDET_JETLAG/ADS-B-Display/HealthMonitor_Alert.cpp.gcno
        -:    0:Data:./Users/jawsmacair/Downloads/CMU/SDET_JETLAG/ADS-B-Display/HealthMonitor_Alert.cpp.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "HealthMonitor_Alert.h"
        -:    2:
       62:    3:THealthMonitorAlert::THealthMonitorAlert() {
        -:    4:  // 업데이트된 기본 임계값 설정 (요구사항에 따라)
       31:    5:  cpuThreshold = 80.0;         // 80% CPU 사용률 (5초 유지)
       31:    6:  memoryThreshold = 80.0;      // 80% 메모리 사용률 (기존 90%에서 변경)
       31:    7:  temperatureThreshold = 70.0; // 70도 (기존 75도에서 변경)
       31:    8:  diskThreshold = 90.0;        // 90% 디스크 사용률 (변경 없음)
        -:    9:  
        -:   10:  // CPU 지속 상태 초기화
       31:   11:  cpuHighState = false;
       62:   12:}
        -:   13:
        1:   14:void THealthMonitorAlert::SetCPUThreshold(double threshold) {
        1:   15:  cpuThreshold = threshold;
        1:   16:}
        -:   17:
        1:   18:void THealthMonitorAlert::SetMemoryThreshold(double threshold) {
        1:   19:  memoryThreshold = threshold;
        1:   20:}
        -:   21:
        1:   22:void THealthMonitorAlert::SetTemperatureThreshold(double threshold) {
        1:   23:  temperatureThreshold = threshold;
        1:   24:}
        -:   25:
        1:   26:void THealthMonitorAlert::SetDiskThreshold(double threshold) {
        1:   27:  diskThreshold = threshold;
        1:   28:}
        -:   29:
       19:   30:bool THealthMonitorAlert::IsCPUAlert(const CPUMetricData &data) const {
       19:   31:  if (!data.isValid) {
        -:   32:    // 데이터가 유효하지 않으면 CPU 고부하 상태 초기화
        1:   33:    cpuHighState = false;
        1:   34:    return false;
        -:   35:  }
        -:   36:  
       18:   37:  auto currentTime = std::chrono::steady_clock::now();
        -:   38:  
       18:   39:  if (data.usage >= cpuThreshold) {
       13:   40:    if (!cpuHighState) {
        -:   41:      // CPU가 처음으로 임계값을 초과한 경우
        9:   42:      cpuHighState = true;
        9:   43:      cpuHighStartTime = currentTime;
        9:   44:      return false; // 아직 5초가 지나지 않았으므로 알람 없음
        -:   45:    } else {
        -:   46:      // CPU가 이미 임계값을 초과한 상태인 경우
        4:   47:      auto duration = std::chrono::duration_cast<std::chrono::seconds>(
        4:   48:          currentTime - cpuHighStartTime);
        4:   49:      return duration.count() >= CPU_SUSTAINED_DURATION_SECONDS;
        -:   50:    }
        -:   51:  } else {
        -:   52:    // CPU가 임계값 미만인 경우 상태 초기화
        5:   53:    cpuHighState = false;
        5:   54:    return false;
        -:   55:  }
       19:   56:}
        -:   57:
       14:   58:bool THealthMonitorAlert::IsMemoryAlert(const MemoryMetricData &data) const {
       14:   59:  if (!data.isValid || data.totalMemory <= 0)
        2:   60:    return false;
       12:   61:  double usagePercent =
       12:   62:      (static_cast<double>(data.currentUsage) / data.totalMemory) * 100.0;
       12:   63:  return usagePercent >= memoryThreshold;
       14:   64:}
        -:   65:
       13:   66:bool THealthMonitorAlert::IsTemperatureAlert(
        -:   67:    const TemperatureMetricData &data) const {
       13:   68:  return data.isValid && data.temperature >= temperatureThreshold;
        -:   69:}
        -:   70:
       13:   71:bool THealthMonitorAlert::IsDiskAlert(const DiskMetricData &data) const {
       13:   72:  return data.isValid && data.usagePercent >= diskThreshold;
        -:   73:}
        -:   74:
        2:   75:AlertType THealthMonitorAlert::GetCPUAlertType(const CPUMetricData &data) const {
        2:   76:  return IsCPUAlert(data) ? AlertType::CPU_HIGH : AlertType::NONE;
        -:   77:}
        -:   78:
        6:   79:AlertType THealthMonitorAlert::GetMemoryAlertType(const MemoryMetricData &data) const {
        6:   80:  return IsMemoryAlert(data) ? AlertType::MEMORY_INSUFFICIENT : AlertType::NONE;
        -:   81:}
        -:   82:
        6:   83:AlertType THealthMonitorAlert::GetTemperatureAlertType(const TemperatureMetricData &data) const {
        6:   84:  return IsTemperatureAlert(data) ? AlertType::HIGH_TEMPERATURE : AlertType::NONE;
        -:   85:}
        -:   86:
        6:   87:AlertType THealthMonitorAlert::GetDiskAlertType(const DiskMetricData &data) const {
        6:   88:  return IsDiskAlert(data) ? AlertType::DISK_SPACE_LOW : AlertType::NONE;
        -:   89:}
        -:   90:
        1:   91:void THealthMonitorAlert::ResetCPUSustainedState() const {
        1:   92:  cpuHighState = false;
        1:   93:}
